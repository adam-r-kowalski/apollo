{"mappings":"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","sources":["src/components.ts","src/linear_algebra.ts","src/renderer.ts","src/systems/render.ts","src/systems/layout.ts","src/layers.ts","src/systems/geometry.ts","src/systems/ray_cast.ts","src/systems/pointerDown.ts","src/systems/pointerMove.ts","src/systems/pointerUp.ts","src/systems/resize.ts","src/systems/touchEnd.ts","src/systems/wheel.ts","src/systems/init.ts","src/ui/text.ts","src/ui/center.ts","src/ui/column.ts","src/ui/row.ts","src/ui/container.ts","src/ui/connection.ts","src/ui/scene.ts","src/systems/clickInput.ts","src/systems/clickOutput.ts","src/systems/drag.ts","src/ecs.ts","src/index.ts"],"sourcesContent":["import { Entity } from \"./ecs\";\r\nimport { Layers } from \"./layers\";\r\nimport { Mat3 } from \"./linear_algebra\";\r\n\r\nexport class UIRoot { constructor(public entity: Entity) { } }\r\n\r\nexport class Text { constructor(public value: string) { } }\r\n\r\nexport class FontSize { constructor(public value: number) { } }\r\n\r\nexport class FontFamily { constructor(public value: string) { } }\r\n\r\nexport class Child { constructor(public entity: Entity) { } }\r\n\r\nexport class Children { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Connections { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Camera { constructor(public entity: Entity) { } }\r\n\r\nexport enum Alignment { START, CENTER, END }\r\n\r\nexport class CrossAxisAlignment { constructor(public alignment: Alignment) { } }\r\n\r\nexport class Width { constructor(public value: number) { } }\r\n\r\nexport class Height { constructor(public value: number) { } }\r\n\r\nexport class Translate {\r\n    constructor(public x: number, public y: number) { }\r\n}\r\n\r\nexport class Transform { constructor(public matrix: Mat3) { } }\r\n\r\nexport class Zoom {\r\n    constructor(\r\n        public scale: number,\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n}\r\n\r\nexport class From { constructor(public entity: Entity) { } }\r\n\r\nexport class To { constructor(public entity: Entity) { } }\r\n\r\nexport class Color {\r\n    constructor(\r\n        public r: number,\r\n        public g: number,\r\n        public b: number,\r\n        public a: number\r\n    ) { }\r\n}\r\n\r\nexport class Padding { constructor(public value: number) { } }\r\n\r\nexport class Constraints {\r\n    constructor(\r\n        public minWidth: number,\r\n        public maxWidth: number,\r\n        public minHeight: number,\r\n        public maxHeight: number\r\n    ) { }\r\n}\r\n\r\nexport class Size {\r\n    constructor(\r\n        public width: number,\r\n        public height: number,\r\n    ) { }\r\n}\r\n\r\nexport class Offset {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n\r\n    add = (other: Offset) => new Offset(this.x + other.x, this.y + other.y)\r\n}\r\n\r\nexport class Layout {\r\n    constructor(\r\n        private impl: (self: Entity, constraints: Constraints) => Size\r\n    ) { }\r\n\r\n    layout = (self: Entity, constraints: Constraints) =>\r\n        this.impl(self, constraints)\r\n}\r\n\r\nexport class WorldSpace {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public width: number,\r\n        public height: number\r\n    ) { }\r\n}\r\n\r\nexport class Vertices { constructor(public data: number[]) { } }\r\n\r\nexport class TextureCoordinates { constructor(public data: number[]) { } }\r\n\r\nexport class Colors { constructor(public data: number[]) { } }\r\n\r\nexport class VertexIndices { constructor(public data: number[]) { } }\r\n\r\nexport class CameraIndices { constructor(public data: number[]) { } }\r\n\r\nexport class Geometry {\r\n    constructor(\r\n        private impl: (self: Entity, parentOffset: Offset, layers: Layers, z: number) => void\r\n    ) { }\r\n\r\n    geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) =>\r\n        this.impl(self, parentOffset, layers, z)\r\n}\r\n\r\nexport type OnDragCallback = (entity: Entity, x: number, y: number) => void\r\n\r\nexport class OnDrag { constructor(public callback: OnDragCallback) { } }\r\n\r\nexport type OnClickCallback = (entity: Entity) => void\r\n\r\nexport class OnClick { constructor(public callback: OnClickCallback) { } }\r\n\r\nexport class Pointers {\r\n    constructor(public events: PointerEvent[]) { }\r\n}\r\n\r\nexport class PointerDistance {\r\n    constructor(public value: number) { }\r\n}\r\n\r\nexport class Dragging {\r\n    constructor(public value: boolean) { }\r\n}\r\n\r\nexport class DraggedEntity {\r\n    constructor(public entity: Entity | null) { }\r\n}\r\n\r\nexport class ConnectionFrom {\r\n    constructor(public entity: Entity | null) { }\r\n}\r\n\r\nexport class ConnectionTo {\r\n    constructor(public entity: Entity | null) { }\r\n}","export class Vec3 {\r\n    constructor(public data: number[]) { }\r\n\r\n    length = () => {\r\n        const [a, b, c] = this.data\r\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\r\n    }\r\n}\r\n\r\nexport class Mat3 {\r\n    constructor(public data: number[]) { }\r\n\r\n    static identity = () => new Mat3([\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1,\r\n    ])\r\n\r\n    static projection = (width: number, height: number) => new Mat3([\r\n        2 / width, 0, -1,\r\n        0, -2 / height, 1,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static translation = (x: number, y: number) => new Mat3([\r\n        1, 0, x,\r\n        0, 1, y,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static rotation = (radians: number) => {\r\n        const c = Math.cos(radians)\r\n        const s = Math.sin(radians)\r\n        return new Mat3([\r\n            c, s, 0,\r\n            -s, c, 0,\r\n            0, 0, 1\r\n        ])\r\n    }\r\n\r\n    static scaling = (x: number, y: number) => new Mat3([\r\n        x, 0, 0,\r\n        0, y, 0,\r\n        0, 0, 1\r\n    ])\r\n\r\n    matMul = (other: Mat3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return new Mat3([\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ])\r\n    }\r\n\r\n    vecMul = (other: Vec3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b1 = b[0]\r\n        const b2 = b[1]\r\n        const b3 = b[2]\r\n        const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n        const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n        const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n        return new Vec3([c1, c2, c3])\r\n    }\r\n\r\n    inverse = () => {\r\n        const a = this.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = a22 * a33 - a23 * a32\r\n        const b12 = a21 * a33 - a23 * a31\r\n        const b13 = a21 * a32 - a22 * a31\r\n        const b21 = a12 * a33 - a13 * a32\r\n        const b22 = a11 * a33 - a13 * a31\r\n        const b23 = a11 * a32 - a12 * a31\r\n        const b31 = a12 * a23 - a13 * a22\r\n        const b32 = a11 * a23 - a13 * a21\r\n        const b33 = a11 * a22 - a12 * a21\r\n        const det = a31 * b31 - a32 * b32 + a33 * b33\r\n        const idet = 1 / det\r\n        return new Mat3([\r\n            idet * b11, idet * -b21, idet * b31,\r\n            idet * -b12, idet * b22, idet * -b32,\r\n            idet * b13, idet * -b23, idet * b33\r\n        ])\r\n    }\r\n}","import { Mat3 } from \"./linear_algebra\"\r\n\r\nclass DefaultProgram {\r\n    positionBuffer: WebGLBuffer\r\n    colorBuffer: WebGLBuffer\r\n    textureCoordinatesBuffer: WebGLBuffer\r\n    indexBuffer: WebGLBuffer\r\n    resolutionLocation: WebGLUniformLocation\r\n    devicePixelRatioLocation: WebGLUniformLocation\r\n    matrixLocation: WebGLUniformLocation\r\n\r\n    constructor(gl: WebGL2RenderingContext) {\r\n        const aPositionLocation = 0\r\n        const aTextureCoordinatesLocation = 1\r\n        const aColorLocation = 2\r\n\r\n        const vertexShaderSource = `#version 300 es\r\n  uniform float u_devicePixelRatio;\r\n  uniform mat3 u_matrix;\r\n\r\n  layout(location = ${aPositionLocation}) in vec2 a_position;\r\n  layout(location = ${aTextureCoordinatesLocation}) in vec2 a_textureCoordinates;\r\n  layout(location = ${aColorLocation}) in vec4 a_color;\r\n\r\n  out vec2 v_textureCoordinates;\r\n  out vec4 v_color;\r\n\r\n  void main() {\r\n    gl_Position = vec4((u_matrix * vec3(a_position, 1)).xy, 0, 1);\r\n    v_textureCoordinates = a_textureCoordinates * u_devicePixelRatio;\r\n    v_color = a_color / 255.0;\r\n  }\r\n  `\r\n        const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec2 v_textureCoordinates;\r\n  in vec4 v_color;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  void main() {\r\n    ivec2 size = textureSize(u_texture, 0);\r\n    vec2 coordinate = v_textureCoordinates / vec2(float(size.x), float(size.y));\r\n    fragColor = texture(u_texture, coordinate) * v_color;\r\n  }\r\n  `\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n        gl.shaderSource(vertexShader, vertexShaderSource)\r\n        gl.compileShader(vertexShader)\r\n\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n        gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n        gl.compileShader(fragmentShader)\r\n\r\n        const program = gl.createProgram()!\r\n        gl.attachShader(program, vertexShader)\r\n        gl.attachShader(program, fragmentShader)\r\n        gl.linkProgram(program)\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            console.log(gl.getShaderInfoLog(vertexShader))\r\n            console.log(gl.getShaderInfoLog(fragmentShader))\r\n        }\r\n\r\n        gl.useProgram(program)\r\n\r\n        const vertexArrayObject = gl.createVertexArray()!\r\n        gl.bindVertexArray(vertexArrayObject)\r\n\r\n        this.positionBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aPositionLocation, 'a_position')\r\n        gl.enableVertexAttribArray(aPositionLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer)\r\n        gl.vertexAttribPointer(\r\n            aPositionLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.textureCoordinatesBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aTextureCoordinatesLocation, 'a_textureCoordinates')\r\n        gl.enableVertexAttribArray(aTextureCoordinatesLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordinatesBuffer)\r\n        gl.vertexAttribPointer(\r\n            aTextureCoordinatesLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.colorBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aColorLocation, 'a_color')\r\n        gl.enableVertexAttribArray(aColorLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer)\r\n        gl.vertexAttribPointer(\r\n            aColorLocation,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.indexBuffer = gl.createBuffer()!\r\n        this.devicePixelRatioLocation = gl.getUniformLocation(program, 'u_devicePixelRatio')!\r\n        this.matrixLocation = gl.getUniformLocation(program, 'u_matrix')!\r\n    }\r\n}\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\ninterface Metric {\r\n    x: number\r\n    y: number\r\n    width: number\r\n    height: number\r\n}\r\n\r\nclass FontAtlas {\r\n    constructor(\r\n        public texture: number,\r\n        public metrics: Metric[],\r\n        public fontFamily: string,\r\n        public fontSize: number,\r\n    ) { }\r\n\r\n    metric = (c: string) => this.metrics[c.charCodeAt(0)]\r\n}\r\n\r\ninterface DrawData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    vertexIndices: number[]\r\n}\r\n\r\ninterface DrawLineData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n}\r\n\r\nconst createFontMetrics = (gl: WebGL2RenderingContext, texture: WebGLTexture, font: string, fontSize: number) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(fontSize * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * window.devicePixelRatio\r\n    canvas.height = size * window.devicePixelRatio\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = font\r\n    ctx.fillStyle = 'white'\r\n    const ascii = Array.from({ length: totalCells }, (v, i) => i)\r\n    const chars = ascii.map(c => String.fromCharCode(c))\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const metrics = chars.map((c, i) => {\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const height = fontSize\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        return {\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height\r\n        }\r\n    })\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas)\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return metrics\r\n}\r\n\r\nexport class Renderer {\r\n    gl: WebGL2RenderingContext\r\n    canvas: HTMLCanvasElement\r\n    program: DefaultProgram\r\n    width: number\r\n    height: number\r\n    fontAtlasses: Map<string, FontAtlas>\r\n    textures: WebGLTexture[]\r\n    devicePixelRatio: number\r\n\r\n    constructor(width: number, height: number) {\r\n        const canvas = document.createElement('canvas')\r\n        canvas.style.touchAction = 'none'\r\n        const gl = canvas.getContext('webgl2')!\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0)\r\n        gl.enable(gl.BLEND)\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n        gl.depthMask(false)\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n        gl.activeTexture(gl.TEXTURE0)\r\n        this.gl = gl\r\n        this.canvas = canvas\r\n        this.program = new DefaultProgram(gl)\r\n        this.fontAtlasses = new Map()\r\n        this.textures = []\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.setSize(width, height)\r\n        const texture = gl.createTexture()!\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255]))\r\n        this.textures.push(texture)\r\n    }\r\n\r\n    setSize = (width: number, height: number) => {\r\n        const { gl, canvas } = this\r\n        canvas.width = width * window.devicePixelRatio\r\n        canvas.height = height * window.devicePixelRatio\r\n        gl.uniform2f(this.program.resolutionLocation, canvas.width, canvas.height)\r\n        gl.uniform1f(this.program.devicePixelRatioLocation, window.devicePixelRatio)\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this.width = width\r\n        this.height = height\r\n        if (this.devicePixelRatio === window.devicePixelRatio) return\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.recreateFontAtlasses()\r\n    }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    setMatrix = (matrix: Mat3) =>\r\n        this.gl.uniformMatrix3fv(this.program.matrixLocation, /*transpose*/true, /*data*/matrix.data)\r\n\r\n    draw = ({ vertices, colors, textureCoordinates, vertexIndices }: DrawData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors, textureCoordinates }: DrawLineData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.drawArrays(gl.LINES, 0, vertices.length / 2)\r\n    }\r\n\r\n    recreateFontAtlasses = () => {\r\n        for (const [font, fontAtlas] of this.fontAtlasses) {\r\n            const texture = this.textures[fontAtlas.texture]!\r\n            const metrics = createFontMetrics(this.gl, texture, font, fontAtlas.fontSize)\r\n            fontAtlas.metrics = metrics\r\n        }\r\n    }\r\n\r\n    fontAtlas = (fontFamily: string, fontSize: number): FontAtlas => {\r\n        const font = `${fontSize}px ${fontFamily}`\r\n        const atlas = this.fontAtlasses.get(font)\r\n        if (atlas) return atlas\r\n        const { gl } = this\r\n        const texture = gl.createTexture()!\r\n        const metrics = createFontMetrics(gl, texture, font, fontSize)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newAtlas = new FontAtlas(textureIndex, metrics, fontFamily, fontSize)\r\n        this.fontAtlasses.set(font, newAtlas)\r\n        return newAtlas\r\n    }\r\n}","import { Renderer } from \"../renderer\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Camera, Colors, TextureCoordinates, Transform, UIRoot, VertexIndices, Vertices } from \"../components\";\r\nimport { Layers } from \"../layers\";\r\nimport { layout, geometry } from './'\r\nimport { Mat3 } from \"../linear_algebra\";\r\n\r\nconst renderTriangles = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let vertexIndices: number[] = []\r\n    let previousTexture: number = -1\r\n    for (const layer of layers.layers) {\r\n        for (const [texture, entities] of layer) {\r\n            if (texture !== previousTexture) {\r\n                if (vertices.length) {\r\n                    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices })\r\n                    vertices = []\r\n                    colors = []\r\n                    textureCoordinates = []\r\n                    vertexIndices = []\r\n                }\r\n                previousTexture = texture\r\n                gl.bindTexture(gl.TEXTURE_2D, renderer.textures[texture]!)\r\n            }\r\n            for (const entity of entities) {\r\n                const offset = vertices.length / 2\r\n                vertices.push(...entity.get(Vertices)!.data)\r\n                colors.push(...entity.get(Colors)!.data)\r\n                textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n                for (const index of entity.get(VertexIndices)!.data) {\r\n                    vertexIndices.push(offset + index)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (vertices.length === 0) return\r\n    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices })\r\n}\r\n\r\nconst renderLines = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    gl.bindTexture(gl.TEXTURE_2D, renderer.textures[0]!)\r\n    for (const entity of layers.lines) {\r\n        vertices.push(...entity.get(Vertices)!.data)\r\n        colors.push(...entity.get(Colors)!.data)\r\n        textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n    }\r\n    if (vertices.length === 0) return\r\n    renderer.drawLines({ vertices, colors, textureCoordinates })\r\n}\r\n\r\nexport const render = (ecs: ECS) => {\r\n    const root = ecs.get(UIRoot)!.entity\r\n    layout(root)\r\n    const layers = geometry(root)\r\n    const renderer = ecs.get(Renderer)!\r\n    const projection = Mat3.projection(renderer.width, renderer.height)\r\n    const camera = ecs.get(Camera)!.entity.get(Transform)!.matrix\r\n    renderer.setMatrix(projection.matMul(camera.inverse()))\r\n    renderer.clear()\r\n    renderTriangles(renderer, layers)\r\n    renderLines(renderer, layers)\r\n    ecs.set(layers)\r\n}","import { Constraints, Layout } from \"../components\";\r\nimport { Entity } from \"../ecs\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nexport const layout = (root: Entity) => {\r\n    const { width, height } = root.ecs.get(Renderer)!\r\n    const constraints = new Constraints(0, width, 0, height)\r\n    root.get(Layout)!.layout(root, constraints)\r\n}","import { Entity } from \"./ecs\";\r\n\r\ninterface Data {\r\n    z: number\r\n    texture: number\r\n    entity: Entity\r\n}\r\n\r\nexport class Layers {\r\n    layers: Map<number, Entity[]>[]\r\n    lines: Entity[]\r\n\r\n    constructor() {\r\n        this.layers = []\r\n        this.lines = []\r\n    }\r\n\r\n    push = ({ z, texture, entity }: Data): void => {\r\n        for (let i = this.layers.length; i < z + 1; ++i) {\r\n            this.layers.push(new Map())\r\n        }\r\n        const layer = this.layers[z]\r\n        const entities = layer.get(texture)\r\n        if (entities) {\r\n            entities.push(entity)\r\n            return\r\n        }\r\n        layer.set(texture, [entity])\r\n    }\r\n}","import { Geometry, Offset } from \"../components\";\r\nimport { Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nexport const geometry = (root: Entity): Layers => {\r\n    const layers = new Layers()\r\n    root.get(Geometry)!.geometry(root, new Offset(0, 0), layers, 0)\r\n    return layers\r\n}","import { WorldSpace } from \"../components\"\r\nimport { ECS, Entity } from \"../ecs\"\r\nimport { Layers } from \"../layers\"\r\nimport { Mat3, Vec3 } from \"../linear_algebra\"\r\n\r\nexport function* rayCast(ecs: ECS, camera: Mat3, vec: Vec3): Generator<Entity> {\r\n    const [mx, my, _] = camera.vecMul(vec).data\r\n    for (const layer of ecs.get(Layers)!.layers.reverse()) {\r\n        for (const entities of layer.values()) {\r\n            for (const entity of entities) {\r\n                const { x, y, width, height } = entity.get(WorldSpace)!\r\n                if (mx > x && mx < x + width && my > y && my < y + height) {\r\n                    yield entity\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Camera, Dragging, OnClick, Pointers, Transform } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Vec3 } from \"../linear_algebra\";\r\nimport { rayCast } from \"./ray_cast\";\r\nimport { render } from \"./render\";\r\n\r\nexport const pointerDown = (ecs: ECS) => {\r\n    document.addEventListener('pointerdown', (e) => {\r\n        const length = ecs.update(Pointers, pointers => {\r\n            pointers.events.push(e)\r\n            return pointers.events.length\r\n        })\r\n        if (length !== 1) return\r\n        const camera = ecs.get(Camera)!.entity\r\n        const cameraMatrix = camera.get(Transform)!.matrix\r\n        const mouse = new Vec3([e.clientX, e.clientY, 1])\r\n        for (const entity of rayCast(ecs, cameraMatrix, mouse)) {\r\n            const onClick = entity.get(OnClick)\r\n            if (onClick) {\r\n                onClick.callback(entity)\r\n                requestAnimationFrame(() => render(ecs))\r\n                return\r\n            }\r\n        }\r\n        ecs.update(Dragging, dragging => dragging.value = true)\r\n    })\r\n}","import { Camera, DraggedEntity, Dragging, OnDrag, PointerDistance, Pointers, Transform } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Mat3, Vec3 } from \"../linear_algebra\";\r\nimport { rayCast } from \"./ray_cast\";\r\nimport { render } from \"./render\";\r\n\r\nconst dragging = (ecs: ECS, e: PointerEvent, movementX: number, movementY: number) => {\r\n    const camera = ecs.get(Camera)!.entity\r\n    const draggedEntity = ecs.get(DraggedEntity)!.entity\r\n    if (draggedEntity) {\r\n        const onDrag = draggedEntity.get(OnDrag)!.callback\r\n        const scaling = camera.get(Transform)!.matrix.vecMul(new Vec3([0, 1, 0])).length()\r\n        onDrag(draggedEntity, movementX * scaling, movementY * scaling)\r\n        requestAnimationFrame(() => render(ecs))\r\n        return\r\n    }\r\n    const cameraMatrix = camera.get(Transform)!.matrix\r\n    const mouse = new Vec3([e.clientX, e.clientY, 1])\r\n    for (const entity of rayCast(ecs, cameraMatrix, mouse)) {\r\n        const onDrag = entity.get(OnDrag)\r\n        if (onDrag) {\r\n            ecs.update(DraggedEntity, dragged => dragged.entity = entity)\r\n            const scaling = camera.get(Transform)!.matrix.vecMul(new Vec3([0, 1, 0])).length()\r\n            onDrag.callback(entity, movementX * scaling, movementY * scaling)\r\n            requestAnimationFrame(() => render(ecs))\r\n            return\r\n        }\r\n    }\r\n    camera.update(Transform, transform => {\r\n        const translate = Mat3.translation(-movementX, -movementY)\r\n        transform.matrix = transform.matrix.matMul(translate)\r\n    })\r\n    requestAnimationFrame(() => render(ecs))\r\n}\r\n\r\nconst zoomCamera = (ecs: ECS, pointers: PointerEvent[], e: PointerEvent) => {\r\n    const [x1, y1] = [pointers[0]!.clientX, pointers[0]!.clientY]\r\n    const [x2, y2] = [pointers[1]!.clientX, pointers[1]!.clientY]\r\n    const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n    const pointerDistance = ecs.get(PointerDistance)!.value\r\n    if (pointerDistance > 0) {\r\n        const move = Mat3.translation(e.clientX, e.clientY)\r\n        const zoom = Math.pow(2, (pointerDistance - distance) * 0.01)\r\n        const scale = Mat3.scaling(zoom, zoom)\r\n        const moveBack = Mat3.translation(-e.clientX, -e.clientY)\r\n        const result = move.matMul(scale).matMul(moveBack)\r\n        const camera = ecs.get(Camera)!.entity\r\n        camera.update(Transform, transform =>\r\n            transform.matrix = transform.matrix.matMul(result)\r\n        )\r\n    }\r\n    ecs.update(PointerDistance, d => d.value = distance)\r\n    requestAnimationFrame(() => render(ecs))\r\n}\r\n\r\nconst onPointerMove = (ecs: ECS, e: PointerEvent) => {\r\n    const pointers = ecs.get(Pointers)!.events\r\n    const index = pointers.findIndex(p => p.pointerId === e.pointerId)\r\n    if (index === -1) return\r\n    const movementX = e.clientX - pointers[index]!.clientX\r\n    const movementY = e.clientY - pointers[index]!.clientY\r\n    pointers[index] = e\r\n    if (ecs.get(Dragging)!.value && pointers.length === 1) {\r\n        dragging(ecs, e, movementX, movementY)\r\n    } else if (pointers.length === 2) {\r\n        zoomCamera(ecs, pointers, e)\r\n    }\r\n}\r\n\r\nexport const pointerMove = (ecs: ECS) => {\r\n    if (typeof PointerEvent.prototype.getCoalescedEvents === 'function') {\r\n        document.addEventListener('pointermove', (e) =>\r\n            e.getCoalescedEvents().forEach(p => onPointerMove(ecs, p))\r\n        )\r\n    } else {\r\n        document.addEventListener('pointermove', (e) => onPointerMove(ecs, e))\r\n    }\r\n}","import { DraggedEntity, Dragging, PointerDistance, Pointers } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\n\r\nexport const pointerUp = (ecs: ECS) => {\r\n    document.addEventListener('pointerup', (e) => {\r\n        const length = ecs.update(Pointers, pointers => {\r\n            pointers.events.splice(pointers.events.findIndex(p => p.pointerId === e.pointerId), 1)\r\n            return pointers.events.length\r\n        })\r\n        if (length !== 0) return\r\n        ecs.update(Dragging, dragging => dragging.value = false)\r\n        ecs.update(PointerDistance, distance => distance.value = 0)\r\n        ecs.update(DraggedEntity, dragged => dragged.entity = null)\r\n    })\r\n}","import { ECS } from \"../ecs\";\r\nimport { Renderer } from \"../renderer\";\r\nimport { render } from \"./render\";\r\n\r\nexport const resize = (ecs: ECS) => {\r\n    const renderer = ecs.get(Renderer)!\r\n    window.addEventListener('resize', () => {\r\n        renderer.setSize(renderer.canvas.clientWidth, renderer.canvas.clientHeight)\r\n        requestAnimationFrame(() => render(ecs))\r\n    })\r\n}","import { ECS } from \"../ecs\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nexport const touchEnd = (ecs: ECS) => {\r\n    const renderer = ecs.get(Renderer)!\r\n    document.addEventListener('touchend', () => {\r\n        renderer.canvas.requestFullscreen()\r\n    })\r\n}","import { Camera, Transform } from \"../components\"\r\nimport { ECS } from \"../ecs\"\r\nimport { Mat3 } from \"../linear_algebra\"\r\nimport { render } from \"./render\"\r\n\r\nexport const wheel = (ecs: ECS) => {\r\n    document.addEventListener('wheel', (e) => {\r\n        const camera = ecs.get(Camera)!.entity\r\n        e.preventDefault()\r\n        camera.update(Transform, transform => {\r\n            const move = Mat3.translation(e.clientX, e.clientY)\r\n            const zoom = Math.pow(2, e.deltaY * 0.01)\r\n            const scale = Mat3.scaling(zoom, zoom)\r\n            const moveBack = Mat3.translation(-e.clientX, -e.clientY)\r\n            const result = move.matMul(scale).matMul(moveBack)\r\n            transform.matrix = transform.matrix.matMul(result)\r\n        })\r\n        requestAnimationFrame(() => render(ecs))\r\n    }, { passive: false })\r\n}","import { ConnectionFrom, ConnectionTo, DraggedEntity, Dragging, PointerDistance, Pointers } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { pointerDown } from \"./pointerDown\";\r\nimport { pointerMove } from \"./pointerMove\";\r\nimport { pointerUp } from \"./pointerUp\";\r\nimport { resize } from \"./resize\";\r\nimport { touchEnd } from \"./touchEnd\";\r\nimport { wheel } from \"./wheel\";\r\n\r\nexport const init = (ecs: ECS) => {\r\n    ecs.set(\r\n        new Pointers([]),\r\n        new PointerDistance(0),\r\n        new Dragging(false),\r\n        new DraggedEntity(null),\r\n        new ConnectionFrom(null),\r\n        new ConnectionTo(null),\r\n    )\r\n    pointerDown(ecs)\r\n    pointerMove(ecs)\r\n    pointerUp(ecs)\r\n    resize(ecs)\r\n    touchEnd(ecs)\r\n    wheel(ecs)\r\n}","import {\r\n    Layout,\r\n    Text,\r\n    FontSize,\r\n    FontFamily,\r\n    Constraints,\r\n    Color,\r\n    Offset,\r\n    Geometry,\r\n    Size,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nconst textSize = (renderer: Renderer, entity: Entity) => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let size = new Size(0, 0)\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        size.width += metric.width\r\n        size.height = Math.max(metric.height, size.height)\r\n    }\r\n    return size\r\n}\r\n\r\nconst textGeometry = (renderer: Renderer, entity: Entity, offset: Offset): number => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const { r, g, b, a } = entity.get(Color)!\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let x = 0\r\n    let indexOffset = 0\r\n    const vertices: number[] = []\r\n    const textureCoordinates: number[] = []\r\n    const colors: number[] = []\r\n    const indices: number[] = []\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        const x0 = offset.x + x\r\n        const x1 = x0 + metric.width\r\n        const y0 = offset.y\r\n        const y1 = y0 + metric.height\r\n        vertices.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1,\r\n        )\r\n        textureCoordinates.push(\r\n            metric.x, metric.y,\r\n            metric.x, metric.y + metric.height,\r\n            metric.x + metric.width, metric.y,\r\n            metric.x + metric.width, metric.y + metric.height,\r\n        )\r\n        colors.push(\r\n            r, g, b, a,\r\n            r, g, b, a,\r\n            r, g, b, a,\r\n            r, g, b, a,\r\n        )\r\n        indices.push(\r\n            indexOffset + 0, indexOffset + 1, indexOffset + 2,\r\n            indexOffset + 1, indexOffset + 2, indexOffset + 3,\r\n        )\r\n        x += metric.width\r\n        indexOffset += 4\r\n    }\r\n    entity.set(\r\n        new Vertices(vertices),\r\n        new TextureCoordinates(textureCoordinates),\r\n        new Colors(colors),\r\n        new VertexIndices(indices),\r\n    )\r\n    return atlas.texture\r\n}\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const size = textSize(self.ecs.get(Renderer)!, self)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const texture = textGeometry(self.ecs.get(Renderer)!, self, offset)\r\n    layers.push({ z, entity: self, texture })\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    fontSize?: number\r\n    fontFamily?: number\r\n    color?: Color\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, data: string): Entity\r\n    (ecs: ECS, properties: Properties, data: string): Entity\r\n}\r\n\r\nexport const text: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, data] = (() => {\r\n        if (typeof args[0] === 'string') return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Text(data),\r\n        new FontSize(properties.fontSize ?? 24),\r\n        new FontFamily(properties.fontFamily ?? \"monospace\"),\r\n        properties.color ?? new Color(255, 255, 255, 255),\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const child = self.get(Child)!.entity\r\n    const childSize = child.get(Layout)!.layout(child, constraints)\r\n    child.update(Offset, offset => {\r\n        offset.x = constraints.maxWidth / 2 - childSize.width / 2\r\n        offset.y = constraints.maxHeight / 2 - childSize.height / 2\r\n    })\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const child = self.get(Child)!.entity\r\n    child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\nexport const center = (ecs: ECS, child: Entity) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Child(child)\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.y = height)\r\n        height += size.height\r\n        width = Math.max(width, size.width)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width / 2 - childWidth / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width - childWidth)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const column: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.x = width)\r\n        width += size.width\r\n        height = Math.max(height, size.height)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height / 2 - childHeight / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height - childHeight)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const row: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    Color,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    Padding,\r\n    Width,\r\n    Height,\r\n    WorldSpace,\r\n    Translate,\r\n    OnDragCallback,\r\n    OnClickCallback,\r\n    OnClick,\r\n    OnDrag\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst clamp = (value: number, min: number, max: number): number =>\r\n    Math.max(Math.min(value, max), min)\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const padding = self.get(Padding)!.value\r\n    const child = self.get(Child)\r\n    const { x, y } = self.get(Translate)!\r\n    const offset = new Offset(x, y)\r\n    if (child) {\r\n        const childSize = child.entity.get(Layout)!.layout(child.entity, constraints)\r\n        const size = new Size(\r\n            Math.min(constraints.maxWidth, childSize.width + 2 * padding),\r\n            Math.min(constraints.maxHeight, childSize.height + 2 * padding),\r\n        )\r\n        child.entity.update(Offset, offset => {\r\n            offset.x = padding\r\n            offset.y = padding\r\n        })\r\n        self.set(constraints, size, offset)\r\n        return size\r\n    }\r\n    const size = new Size(\r\n        clamp(self.get(Width)!.value, constraints.minWidth, constraints.maxWidth),\r\n        clamp(self.get(Height)!.value, constraints.minHeight, constraints.maxHeight),\r\n    )\r\n    self.set(constraints, size, offset)\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const { width, height } = self.get(Size)!\r\n    const x0 = offset.x\r\n    const x1 = x0 + width\r\n    const y0 = offset.y\r\n    const y1 = y0 + height\r\n    const color = self.get(Color)\r\n    if (color) {\r\n        const { r, g, b, a } = color\r\n        self.set(\r\n            new Vertices([\r\n                x0, y0,\r\n                x0, y1,\r\n                x1, y0,\r\n                x1, y1,\r\n            ]),\r\n            new TextureCoordinates([\r\n                0, 0,\r\n                0, 0,\r\n                0, 0,\r\n                0, 0,\r\n            ]),\r\n            new Colors([\r\n                r, g, b, a,\r\n                r, g, b, a,\r\n                r, g, b, a,\r\n                r, g, b, a,\r\n            ]),\r\n            new VertexIndices([\r\n                0, 1, 2,\r\n                1, 2, 3,\r\n            ]),\r\n        )\r\n        layers.push({ z, texture: 0, entity: self })\r\n    }\r\n    const child = self.get(Child)\r\n    if (child) {\r\n        child.entity.get(Geometry)!.geometry(child.entity, offset, layers, z + 1)\r\n    }\r\n    self.set(new WorldSpace(x0, y0, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    color?: Color\r\n    padding?: number\r\n    width?: number\r\n    height?: number\r\n    x?: number\r\n    y?: number\r\n    onDrag?: OnDragCallback\r\n    onClick?: OnClickCallback\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, properties: Properties): Entity\r\n    (ecs: ECS, properties: Properties, child: Entity): Entity\r\n}\r\n\r\nexport const container: Overload = (ecs: ECS, properties: Properties, child?: Entity) => {\r\n    const entity = ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Padding(properties.padding ?? 0),\r\n        new Width(properties.width ?? 0),\r\n        new Height(properties.height ?? 0),\r\n        new Translate(properties.x ?? 0, properties.y ?? 0)\r\n    )\r\n    if (properties.color) entity.set(properties.color)\r\n    if (child) entity.set(new Child(child))\r\n    if (properties.onDrag) entity.set(new OnDrag(properties.onDrag))\r\n    if (properties.onClick) entity.set(new OnClick(properties.onClick))\r\n    return entity\r\n}","import { Color, Colors, From, TextureCoordinates, To, Vertices, WorldSpace } from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nconst cubicBezier = (ts: number[], from: WorldSpace, to: WorldSpace): number[] => {\r\n    const p0x = from.x + from.width / 2\r\n    const p0y = from.y + from.height / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = to.x + to.width / 2\r\n    const p3y = to.y + to.height / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    const result: number[] = []\r\n    let lastX = 0\r\n    let lastY = 0\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (result.length) result.push(lastX, lastY)\r\n        else result.push(x, y)\r\n        result.push(x, y)\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n    return result\r\n}\r\n\r\nexport const geometry = (connections: Entity[], layers: Layers) => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const textureCoordinates = Array(samples * 4).fill(0)\r\n    for (const entity of connections) {\r\n        const from = entity.get(From)!.entity.get(WorldSpace)!\r\n        const to = entity.get(To)!.entity.get(WorldSpace)!\r\n        const vertices = cubicBezier(ts, from, to)\r\n        const { r, g, b, a } = entity.get(Color)!\r\n        const colors: number[] = []\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(r, g, b, a)\r\n        entity.set(\r\n            new Vertices(vertices),\r\n            new TextureCoordinates(textureCoordinates),\r\n            new Colors(colors),\r\n        )\r\n        layers.lines.push(entity)\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    from: Entity\r\n    to: Entity\r\n    color?: Color\r\n}\r\n\r\nexport const connection = (ecs: ECS, properties: Properties): Entity =>\r\n    ecs.entity(\r\n        new From(properties.from),\r\n        new To(properties.to),\r\n        properties.color ?? new Color(255, 255, 255, 255)\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Connections,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { geometry as connectionGeometry } from './connection'\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Layout)!.layout(child, constraints)\r\n    }\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    connectionGeometry(self.get(Connections)!.entities, layers)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    children: Entity[],\r\n    connections: Entity[],\r\n}\r\n\r\nexport const scene = (ecs: ECS, properties: Properties) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(properties.children),\r\n        new Connections(properties.connections),\r\n    )","import { Color, ConnectionFrom, Connections, ConnectionTo, UIRoot } from \"../components\"\r\nimport { Entity } from \"../ecs\"\r\nimport { connection } from \"../ui\"\r\nimport { render } from \"./render\"\r\n\r\nexport const clickInput = (entity: Entity) => {\r\n    const ecs = entity.ecs\r\n    const connectionTo = ecs.get(ConnectionTo)!.entity\r\n    const connectionFrom = ecs.get(ConnectionFrom)!.entity\r\n    if (!connectionFrom) {\r\n        if (connectionTo === entity) return\r\n        else if (connectionTo !== null) connectionTo.set(new Color(101, 215, 249, 255))\r\n        ecs.update(ConnectionTo, to => to.entity = entity)\r\n        entity.set(new Color(67, 76, 112, 255))\r\n        requestAnimationFrame(() => render(ecs))\r\n    } else {\r\n        const root = ecs.get(UIRoot)!.entity\r\n        const con = connection(ecs, { from: connectionFrom, to: entity })\r\n        root.update(Connections, connections => connections.entities.push(con))\r\n        connectionFrom.set(new Color(101, 215, 249, 255))\r\n        ecs.update(ConnectionFrom, from => from.entity = null)\r\n        requestAnimationFrame(() => render(ecs))\r\n    }\r\n}\r\n","import { Color, ConnectionFrom, Connections, ConnectionTo, UIRoot } from \"../components\"\r\nimport { Entity } from \"../ecs\"\r\nimport { connection } from \"../ui\"\r\nimport { render } from \"./render\"\r\n\r\nexport const clickOutput = (entity: Entity) => {\r\n    const ecs = entity.ecs\r\n    const connectionTo = ecs.get(ConnectionTo)!.entity\r\n    const connectionFrom = ecs.get(ConnectionFrom)!.entity\r\n    if (!connectionTo) {\r\n        if (connectionFrom === entity) return\r\n        else if (connectionFrom !== null) connectionFrom.set(new Color(101, 215, 249, 255))\r\n        ecs.update(ConnectionFrom, from => from.entity = entity)\r\n        entity.set(new Color(67, 76, 112, 255))\r\n        requestAnimationFrame(() => render(ecs))\r\n    } else {\r\n        const root = ecs.get(UIRoot)!.entity\r\n        const con = connection(ecs, { from: entity, to: connectionTo })\r\n        root.update(Connections, connections => connections.entities.push(con))\r\n        connectionTo.set(new Color(101, 215, 249, 255))\r\n        ecs.update(ConnectionTo, to => to.entity = null)\r\n        requestAnimationFrame(() => render(ecs))\r\n    }\r\n}\r\n","import { Translate } from \"../components\"\r\nimport { Entity } from \"../ecs\"\r\n\r\nexport const drag = (entity: Entity, x: number, y: number) =>\r\n    entity.update(Translate, translate => {\r\n        translate.x += x\r\n        translate.y += y\r\n    })","type Component<T> = { new(...args: any[]): T }\r\n\r\nclass Storage<T> {\r\n  lookup: Map<number, number>\r\n  data: T[]\r\n  inverses: number[]\r\n\r\n  constructor() {\r\n    this.clear()\r\n  }\r\n\r\n  get = (entity: Entity): T | undefined => {\r\n    const index = this.lookup.get(entity.id)\r\n    return index !== undefined ? this.data[index] : undefined\r\n  }\r\n\r\n  hasId = (id: number): boolean => {\r\n    return this.lookup.has(id)\r\n  }\r\n\r\n  set = (entity: Entity, component: T): void => {\r\n    const index = this.lookup.get(entity.id)\r\n    if (index) {\r\n      this.data[index] = component\r\n      this.inverses[index] = entity.id\r\n      return\r\n    }\r\n    this.lookup.set(entity.id, this.data.length)\r\n    this.data.push(component)\r\n    this.inverses.push(entity.id)\r\n  }\r\n\r\n  clear = (): void => {\r\n    this.lookup = new Map()\r\n    this.data = []\r\n    this.inverses = []\r\n  }\r\n}\r\n\r\nexport class Entity {\r\n  constructor(public id: number, public ecs: ECS) { }\r\n\r\n  set = (...components: any): Entity => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      let storage = this.ecs.storages.get(Type)\r\n      if (!storage) {\r\n        storage = new Storage()\r\n        this.ecs.storages.set(Type, storage)\r\n      }\r\n      storage.set(this, component)\r\n    }\r\n    return this\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): Readonly<T> | undefined => {\r\n    const storage = this.ecs.storages.get(Type)\r\n    return storage ? storage.get(this) : undefined\r\n  }\r\n\r\n  update = <T, U>(Type: Component<T>, f: (_: T) => U): U =>\r\n    f(this.ecs.storages.get(Type)!.get(this)!)\r\n}\r\n\r\nexport class ECS {\r\n  nextEntityId: number\r\n  storages: Map<Component<any>, Storage<any>>\r\n  resources: Map<Component<any>, any>\r\n\r\n  constructor() {\r\n    this.nextEntityId = 0\r\n    this.storages = new Map()\r\n    this.resources = new Map()\r\n  }\r\n\r\n  entity = (...components: any): Entity => {\r\n    const entity = new Entity(this.nextEntityId, this)\r\n    entity.set(...components)\r\n    ++this.nextEntityId\r\n    return entity\r\n  }\r\n\r\n  set = <T>(...components: any): void => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      this.resources.set(Type, component)\r\n    }\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): T | undefined => {\r\n    return this.resources.get(Type)\r\n  }\r\n\r\n  update = <T, U>(Type: Component<T>, f: (_: T) => U): U =>\r\n    f(this.resources.get(Type)!)\r\n\r\n  unsetAll = <T>(Type: Component<T>): void => {\r\n    const storage = this.storages.get(Type)\r\n    if (!storage) return\r\n    storage.clear()\r\n  }\r\n}\r\n","import { Camera, Color } from './components'\r\nimport { Mat3 } from './linear_algebra'\r\nimport * as Studio from './studio'\r\nimport { Entity } from './studio'\r\nimport { clickInput, clickOutput, drag } from './systems'\r\nconst { ECS, Renderer } = Studio\r\nconst { UIRoot, Alignment, Transform } = Studio.components\r\nconst { text, column, row, container, scene } = Studio.ui\r\nconst { render, init } = Studio.systems\r\n\r\nconst ecs = new ECS()\r\nconst renderer = new Renderer(window.innerWidth, window.innerHeight)\r\nrenderer.canvas.style.width = '100%'\r\nrenderer.canvas.style.height = '100%'\r\n\r\n\r\nconst inputs = (n: number): Entity =>\r\n    column(ecs, Array.from({ length: n }, (_, i) =>\r\n        row(ecs, [\r\n            container(ecs, { width: 18, height: 18, color: new Color(101, 215, 249, 255), onClick: clickInput }),\r\n            container(ecs, { width: 5 }),\r\n            container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, `in ${i}`)),\r\n        ]),\r\n    ))\r\n\r\n\r\nconst outputs = (n: number): Entity =>\r\n    column(ecs, { crossAxisAlignment: Alignment.END }, Array.from({ length: n }, (_, i) =>\r\n        row(ecs, [\r\n            container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, `out ${i}`)),\r\n            container(ecs, { width: 5 }),\r\n            container(ecs, { width: 18, height: 18, color: new Color(101, 215, 249, 255), onClick: clickOutput })\r\n        ]),\r\n    ))\r\n\r\n\r\nconst source = container(ecs, { color: new Color(71, 52, 129, 255), padding: 10, x: 25, y: 200, onDrag: drag },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Source\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            inputs(3),\r\n            container(ecs, { width: 30 }),\r\n            outputs(2),\r\n        ])\r\n    ])\r\n)\r\n\r\nconst transform = container(ecs, { color: new Color(71, 52, 129, 255), padding: 10, x: 300, y: 100, onDrag: drag },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Transform\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            inputs(2),\r\n            container(ecs, { width: 30 }),\r\n            outputs(4),\r\n        ])\r\n    ])\r\n)\r\n\r\nconst sink = container(ecs, { color: new Color(71, 52, 129, 255), padding: 10, x: 550, y: 250, onDrag: drag },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Sink\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            inputs(3),\r\n            container(ecs, { width: 30 }),\r\n            outputs(3)\r\n        ])\r\n    ])\r\n)\r\n\r\nconst camera = ecs.entity(new Transform(Mat3.identity()))\r\n\r\nconst root = scene(ecs, {\r\n    children: [source, transform, sink],\r\n    connections: []\r\n})\r\n\r\necs.set(renderer, new UIRoot(root), new Camera(camera))\r\n\r\ninit(ecs)\r\n\r\nrequestAnimationFrame(() => render(ecs))\r\n\r\ndocument.body.appendChild(renderer.canvas)"],"names":["$b28c6149dbdf1c74$export$63548ce3f438e2c4","constructor","entity","$b28c6149dbdf1c74$export$5f1af8db9871e1d6","value","$b28c6149dbdf1c74$export$80f2abd03de5ca5a","$b28c6149dbdf1c74$export$cd0608c167c7849e","$b28c6149dbdf1c74$export$3edfc50f178e5b0b","$b28c6149dbdf1c74$export$dca3b0875bd9a954","entities","$b28c6149dbdf1c74$export$f3ea0776119f0e84","$b28c6149dbdf1c74$export$79f141de891a5fed","$b28c6149dbdf1c74$export$9d7927214ed7d2cf","Alignment1","$b28c6149dbdf1c74$export$66a3248d846611ce","alignment","$b28c6149dbdf1c74$export$8ee255758437644c","$b28c6149dbdf1c74$export$8954cfac7c08d16a","$b28c6149dbdf1c74$export$9db2ba50894db2b9","x","y","$b28c6149dbdf1c74$export$563a914cafbdc389","matrix","$b28c6149dbdf1c74$export$65cfd44a2050f99","scale","$b28c6149dbdf1c74$export$678de176a9a9dea","$b28c6149dbdf1c74$export$d10b08d1cf690764","$b28c6149dbdf1c74$export$892596cec99bc70e","r","g","b","a","$b28c6149dbdf1c74$export$8ee6ea94b5aedb49","$b28c6149dbdf1c74$export$6e8e053b4dff75fa","minWidth","maxWidth","minHeight","maxHeight","$b28c6149dbdf1c74$export$cb6da89c6af1a8ec","width","height","$b28c6149dbdf1c74$export$8caee09accd95d7f","add","other","this","$b28c6149dbdf1c74$export$c84671f46d6a1ca","impl","layout","self","constraints","$b28c6149dbdf1c74$export$77f0fd777d3cc7db","$b28c6149dbdf1c74$export$92bffd8adab203ca","data","$b28c6149dbdf1c74$export$535dd6b7931a007","$b28c6149dbdf1c74$export$c537fa0d021d010b","$b28c6149dbdf1c74$export$fc4f2b7e7f87722c","$b28c6149dbdf1c74$export$39d3d935cf79db44","$b28c6149dbdf1c74$export$2db6c17465f94a2","geometry","parentOffset","layers","z","$b28c6149dbdf1c74$export$b11ff02aa7665438","callback","$b28c6149dbdf1c74$export$35ee2f917ebd5998","$b28c6149dbdf1c74$export$6412482d5070c3e5","events","$b28c6149dbdf1c74$export$713e7dce70432f26","$b28c6149dbdf1c74$export$d06c063800545f6e","$b28c6149dbdf1c74$export$b04da8f7c31a5074","$b28c6149dbdf1c74$export$91139d1e0da86fd6","$b28c6149dbdf1c74$export$397a9a3acbf885db","$a26733d1baff63db$export$838423f3adec30fa","length","c","Math","sqrt","pow","$a26733d1baff63db$export$83f4edd572c84121","matMul","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","vecMul","b1","b2","b3","inverse","idet","static","radians","cos","s","sin","$621f3774f67738fc$var$DefaultProgram","gl","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","log","getShaderInfoLog","vertexArrayObject","createVertexArray","positionBuffer","createBuffer","bindAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","textureCoordinatesBuffer","colorBuffer","indexBuffer","devicePixelRatioLocation","getUniformLocation","matrixLocation","texture","metrics","fontFamily","fontSize","metric","charCodeAt","font","document","createElement","ctx","canvas","getContext","rows","size","current","$621f3774f67738fc$var$nearestPowerOfTwo","cellSize","window","devicePixelRatio","style","textAlign","textBaseline","fillStyle","chars","Array","from","v","i","map","String","fromCharCode","clearRect","measureText","ceil","floor","fillText","bindTexture","TEXTURE_2D","RGBA","UNSIGNED_BYTE","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","touchAction","clearColor","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","depthMask","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","activeTexture","TEXTURE0","fontAtlasses","Map","textures","setSize","createTexture","texImage2D","Uint8Array","push","uniform2f","resolutionLocation","uniform1f","viewport","recreateFontAtlasses","clear","COLOR_BUFFER_BIT","setMatrix","uniformMatrix3fv","vertices","colors","textureCoordinates","vertexIndices","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","drawElements","TRIANGLES","UNSIGNED_SHORT","drawLines","$9a7c059fd1344034$export$b3890eb0ae9dca99","ecs","root","get","$cb3d056828175573$export$b3219800bda33a1f","$90a5a29c0fcb75eb$export$42a7622cbf932bb","renderer","$621f3774f67738fc$export$88530751e3977073","projection","camera","previousTexture","layer","draw","offset","index","$9a7c059fd1344034$var$renderTriangles","lines","$9a7c059fd1344034$var$renderLines","set","$3b19fb344542138e$export$89312ce47c0ca777","$231f2a51c75bf33f$export$51be7442bbfe168a","vec","mx","my","_","reverse","values","$0b92ec7f88b512ef$export$e6e29dfeb5ef19c1","addEventListener","e","update","pointers","cameraMatrix","mouse","clientX","clientY","onClick","requestAnimationFrame","dragging","$f6814459cf3a656e$var$onPointerMove","findIndex","p","pointerId","movementX","movementY","draggedEntity","onDrag","scaling","dragged","transform","translate","translation","$f6814459cf3a656e$var$dragging","x1","y1","x2","y2","distance","pointerDistance","move","zoom","moveBack","result","d","$f6814459cf3a656e$var$zoomCamera","$f6814459cf3a656e$export$71eac0963f2c2f01","PointerEvent","prototype","getCoalescedEvents","forEach","$d70a29fd47e7122e$export$b0143ab4f38d0a07","splice","$56480d1b1530afac$export$4380c87abf28fdf","clientWidth","clientHeight","$e0ea414209667c6e$export$48121dda624fd32","requestFullscreen","$07cceb80b991ee21$export$d3028820ea014224","preventDefault","deltaY","passive","$6d01f164b3d82840$export$2cd8252107eb640b","$2d5075f154be1094$var$layout","text1","atlas","fontAtlas","max","$2d5075f154be1094$var$textSize","$2d5075f154be1094$var$geometry","text2","indexOffset","indices","x0","y0","$2d5075f154be1094$var$textGeometry","$2d5075f154be1094$export$6f093cfa640b7166","args","properties","color","$fd89ce3675dee463$var$layout","child","childSize","$fd89ce3675dee463$var$geometry","$fd89ce3675dee463$export$3481c78889e8fbe8","$518015a6e3cc694d$var$layout","children","START","CENTER","child1","childWidth","END","child2","$518015a6e3cc694d$var$geometry","$518015a6e3cc694d$export$4e0c71f277ca26b3","crossAxisAlignment","$9e4edab979495f0d$var$layout","childHeight","$9e4edab979495f0d$var$geometry","$9e4edab979495f0d$export$120ff0929b202a6d","$8a99d960732a172f$var$clamp","min","$8a99d960732a172f$var$layout","padding","offset1","$8a99d960732a172f$var$geometry","$8a99d960732a172f$export$34e0f9847d4c02dd","$5dee3d2e57488100$var$cubicBezier","ts","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$5dee3d2e57488100$export$42a7622cbf932bb","connections","start","stop","num","step","$5dee3d2e57488100$var$linspace","samples","fill","$5dee3d2e57488100$export$412d2991813e589a","$864b15efd9f5e1a7$var$layout","$864b15efd9f5e1a7$var$geometry","$864b15efd9f5e1a7$export$33aff30b8aa0934e","$ca74c26951914e9a$export$84dc6de0617d8752","connectionTo","connectionFrom","con","$0314a9838179d78a$export$e672ce3f6ddfd497","$b5c7b4fd2adf6dba$export$d7d5d435647ed5a0","$556f46b6ec271235$var$Storage","lookup","id","undefined","hasId","has","component","inverses","$556f46b6ec271235$export$bc644a473284d944","components","Type","storage","storages","f","$556f46b6ec271235$export$d01098d378880d3","nextEntityId","resources","unsetAll","ECS","$b4e14b6b8da86996$var$ECS","Renderer","$b4e14b6b8da86996$var$Renderer","$91ae824a8b26c87f$exports","UIRoot","$b4e14b6b8da86996$var$UIRoot","Alignment","$b4e14b6b8da86996$var$Alignment","Transform","$b4e14b6b8da86996$var$Transform","text","$b4e14b6b8da86996$var$text","column","$b4e14b6b8da86996$var$column","row","$b4e14b6b8da86996$var$row","container","$b4e14b6b8da86996$var$container","scene","$b4e14b6b8da86996$var$scene","ui","render","$b4e14b6b8da86996$var$render","init","$b4e14b6b8da86996$var$init","systems","$b4e14b6b8da86996$var$ecs","$b4e14b6b8da86996$var$renderer","innerWidth","innerHeight","$b4e14b6b8da86996$var$inputs","n","$b4e14b6b8da86996$var$outputs","$b4e14b6b8da86996$var$source","$b4e14b6b8da86996$var$transform","$b4e14b6b8da86996$var$sink","$b4e14b6b8da86996$var$camera","identity","$b4e14b6b8da86996$var$root","body","appendChild"],"version":3,"file":"index.fe349bcc.js.map"}