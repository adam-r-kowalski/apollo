{"mappings":"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","sources":["src/components.ts","src/linear_algebra.ts","src/renderer.ts","src/systems/render.ts","src/systems/layout.ts","src/layers.ts","src/systems/geometry.ts","src/systems/ray_cast.ts","src/systems/pointerDown.ts","src/systems/pointerMove.ts","src/systems/pointerUp.ts","src/systems/resize.ts","src/systems/touchEnd.ts","src/systems/wheel.ts","src/systems/init.ts","src/ui/text.ts","src/ui/center.ts","src/ui/column.ts","src/ui/row.ts","src/ui/container.ts","src/ui/connection.ts","src/ui/scene.ts","src/ui/stack.ts","src/systems/clickInput.ts","src/systems/clickOutput.ts","src/systems/drag.ts","src/ecs.ts","src/index.ts"],"sourcesContent":["import { Entity } from \"./ecs\";\r\nimport { Layers } from \"./layers\";\r\nimport { Mat3 } from \"./linear_algebra\";\r\n\r\nexport class UIRoot { constructor(public entity: Entity) { } }\r\n\r\nexport class Text { constructor(public value: string) { } }\r\n\r\nexport class FontSize { constructor(public value: number) { } }\r\n\r\nexport class FontFamily { constructor(public value: string) { } }\r\n\r\nexport class Child { constructor(public entity: Entity) { } }\r\n\r\nexport class Children { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Connections { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Camera { constructor(public entity: Entity) { } }\r\n\r\nexport enum Alignment { START, CENTER, END }\r\n\r\nexport class CrossAxisAlignment { constructor(public alignment: Alignment) { } }\r\n\r\nexport class Width { constructor(public value: number) { } }\r\n\r\nexport class Height { constructor(public value: number) { } }\r\n\r\nexport class Translate {\r\n    constructor(public x: number, public y: number) { }\r\n}\r\n\r\nexport class Transform { constructor(public matrix: Mat3) { } }\r\n\r\nexport class Zoom {\r\n    constructor(\r\n        public scale: number,\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n}\r\n\r\nexport class From { constructor(public entity: Entity) { } }\r\n\r\nexport class To { constructor(public entity: Entity) { } }\r\n\r\nexport class Color {\r\n    constructor(\r\n        public r: number,\r\n        public g: number,\r\n        public b: number,\r\n        public a: number\r\n    ) { }\r\n}\r\n\r\nexport class Padding { constructor(public value: number) { } }\r\n\r\nexport class Constraints {\r\n    constructor(\r\n        public minWidth: number,\r\n        public maxWidth: number,\r\n        public minHeight: number,\r\n        public maxHeight: number\r\n    ) { }\r\n}\r\n\r\nexport class Size {\r\n    constructor(\r\n        public width: number,\r\n        public height: number,\r\n    ) { }\r\n}\r\n\r\nexport class Offset {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n\r\n    add = (other: Offset) => new Offset(this.x + other.x, this.y + other.y)\r\n}\r\n\r\nexport class Layout {\r\n    constructor(\r\n        private impl: (self: Entity, constraints: Constraints) => Size\r\n    ) { }\r\n\r\n    layout = (self: Entity, constraints: Constraints) =>\r\n        this.impl(self, constraints)\r\n}\r\n\r\nexport class WorldSpace {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public width: number,\r\n        public height: number\r\n    ) { }\r\n}\r\n\r\nexport class Vertices { constructor(public data: number[]) { } }\r\n\r\nexport class TextureCoordinates { constructor(public data: number[]) { } }\r\n\r\nexport class Colors { constructor(public data: number[]) { } }\r\n\r\nexport class VertexIndices { constructor(public data: number[]) { } }\r\n\r\nexport class CameraIndices { constructor(public data: number[]) { } }\r\n\r\nexport class Geometry {\r\n    constructor(\r\n        private impl: (self: Entity, parentOffset: Offset, layers: Layers, z: number) => void\r\n    ) { }\r\n\r\n    geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) =>\r\n        this.impl(self, parentOffset, layers, z)\r\n}\r\n\r\nexport type OnDragCallback = (entity: Entity, x: number, y: number) => void\r\n\r\nexport class OnDrag { constructor(public callback: OnDragCallback) { } }\r\n\r\nexport type OnClickCallback = (entity: Entity) => void\r\n\r\nexport class OnClick { constructor(public callback: OnClickCallback) { } }\r\n\r\nexport class Pointers {\r\n    constructor(public events: PointerEvent[]) { }\r\n}\r\n\r\nexport class PointerDistance {\r\n    constructor(public value: number) { }\r\n}\r\n\r\nexport class Dragging {\r\n    constructor(public value: boolean) { }\r\n}\r\n\r\nexport class DraggedEntity {\r\n    constructor(public entity: Entity | null) { }\r\n}\r\n\r\nexport class ConnectionFrom {\r\n    constructor(public entity: Entity | null) { }\r\n}\r\n\r\nexport class ConnectionTo {\r\n    constructor(public entity: Entity | null) { }\r\n}","export class Vec3 {\r\n    constructor(public data: number[]) { }\r\n\r\n    length = () => {\r\n        const [a, b, c] = this.data\r\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\r\n    }\r\n}\r\n\r\nexport class Mat3 {\r\n    constructor(public data: number[]) { }\r\n\r\n    static identity = () => new Mat3([\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1,\r\n    ])\r\n\r\n    static projection = (width: number, height: number) => new Mat3([\r\n        2 / width, 0, -1,\r\n        0, -2 / height, 1,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static translation = (x: number, y: number) => new Mat3([\r\n        1, 0, x,\r\n        0, 1, y,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static rotation = (radians: number) => {\r\n        const c = Math.cos(radians)\r\n        const s = Math.sin(radians)\r\n        return new Mat3([\r\n            c, s, 0,\r\n            -s, c, 0,\r\n            0, 0, 1\r\n        ])\r\n    }\r\n\r\n    static scaling = (x: number, y: number) => new Mat3([\r\n        x, 0, 0,\r\n        0, y, 0,\r\n        0, 0, 1\r\n    ])\r\n\r\n    matMul = (other: Mat3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return new Mat3([\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ])\r\n    }\r\n\r\n    vecMul = (other: Vec3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b1 = b[0]\r\n        const b2 = b[1]\r\n        const b3 = b[2]\r\n        const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n        const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n        const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n        return new Vec3([c1, c2, c3])\r\n    }\r\n\r\n    inverse = () => {\r\n        const a = this.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = a22 * a33 - a23 * a32\r\n        const b12 = a21 * a33 - a23 * a31\r\n        const b13 = a21 * a32 - a22 * a31\r\n        const b21 = a12 * a33 - a13 * a32\r\n        const b22 = a11 * a33 - a13 * a31\r\n        const b23 = a11 * a32 - a12 * a31\r\n        const b31 = a12 * a23 - a13 * a22\r\n        const b32 = a11 * a23 - a13 * a21\r\n        const b33 = a11 * a22 - a12 * a21\r\n        const det = a31 * b31 - a32 * b32 + a33 * b33\r\n        const idet = 1 / det\r\n        return new Mat3([\r\n            idet * b11, idet * -b21, idet * b31,\r\n            idet * -b12, idet * b22, idet * -b32,\r\n            idet * b13, idet * -b23, idet * b33\r\n        ])\r\n    }\r\n}","import { Mat3 } from \"./linear_algebra\"\r\n\r\nclass DefaultProgram {\r\n    positionBuffer: WebGLBuffer\r\n    colorBuffer: WebGLBuffer\r\n    textureCoordinatesBuffer: WebGLBuffer\r\n    cameraIndexBuffer: WebGLBuffer\r\n    indexBuffer: WebGLBuffer\r\n    resolutionLocation: WebGLUniformLocation\r\n    devicePixelRatioLocation: WebGLUniformLocation\r\n    camerasLocation: WebGLUniformLocation\r\n    projectionLocation: WebGLUniformLocation\r\n\r\n    constructor(gl: WebGL2RenderingContext) {\r\n        const aPositionLocation = 0\r\n        const aTextureCoordinatesLocation = 1\r\n        const aColorLocation = 2\r\n        const aCameraIndexLocation = 3\r\n\r\n        const vertexShaderSource = `#version 300 es\r\n  uniform float u_devicePixelRatio;\r\n  uniform mat3[8] u_cameras;\r\n  uniform mat3 u_projection;\r\n\r\n  layout(location = ${aPositionLocation}) in vec2 a_position;\r\n  layout(location = ${aTextureCoordinatesLocation}) in vec2 a_textureCoordinates;\r\n  layout(location = ${aColorLocation}) in vec4 a_color;\r\n  layout(location = ${aCameraIndexLocation}) in uint a_cameraIndex;\r\n\r\n  out vec2 v_textureCoordinates;\r\n  out vec4 v_color;\r\n\r\n  void main() {\r\n    mat3 matrix = u_projection * inverse(u_cameras[a_cameraIndex]);\r\n    gl_Position = vec4((matrix * vec3(a_position, 1)).xy, 0, 1);\r\n    v_textureCoordinates = a_textureCoordinates * u_devicePixelRatio;\r\n    v_color = a_color / 255.0;\r\n  }\r\n  `\r\n        const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec2 v_textureCoordinates;\r\n  in vec4 v_color;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  void main() {\r\n    ivec2 size = textureSize(u_texture, 0);\r\n    vec2 coordinate = v_textureCoordinates / vec2(float(size.x), float(size.y));\r\n    fragColor = texture(u_texture, coordinate) * v_color;\r\n  }\r\n  `\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n        gl.shaderSource(vertexShader, vertexShaderSource)\r\n        gl.compileShader(vertexShader)\r\n\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n        gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n        gl.compileShader(fragmentShader)\r\n\r\n        const program = gl.createProgram()!\r\n        gl.attachShader(program, vertexShader)\r\n        gl.attachShader(program, fragmentShader)\r\n        gl.linkProgram(program)\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            console.log(gl.getShaderInfoLog(vertexShader))\r\n            console.log(gl.getShaderInfoLog(fragmentShader))\r\n        }\r\n\r\n        gl.useProgram(program)\r\n\r\n        const vertexArrayObject = gl.createVertexArray()!\r\n        gl.bindVertexArray(vertexArrayObject)\r\n\r\n        this.positionBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aPositionLocation, 'a_position')\r\n        gl.enableVertexAttribArray(aPositionLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer)\r\n        gl.vertexAttribPointer(\r\n            aPositionLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.textureCoordinatesBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aTextureCoordinatesLocation, 'a_textureCoordinates')\r\n        gl.enableVertexAttribArray(aTextureCoordinatesLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordinatesBuffer)\r\n        gl.vertexAttribPointer(\r\n            aTextureCoordinatesLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.colorBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aColorLocation, 'a_color')\r\n        gl.enableVertexAttribArray(aColorLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer)\r\n        gl.vertexAttribPointer(\r\n            aColorLocation,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.cameraIndexBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aCameraIndexLocation, 'a_cameraIndex')\r\n        gl.enableVertexAttribArray(aCameraIndexLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.cameraIndexBuffer)\r\n        gl.vertexAttribIPointer(\r\n            aCameraIndexLocation,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_SHORT,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.indexBuffer = gl.createBuffer()!\r\n        this.devicePixelRatioLocation = gl.getUniformLocation(program, 'u_devicePixelRatio')!\r\n        this.camerasLocation = gl.getUniformLocation(program, 'u_cameras')!\r\n        this.projectionLocation = gl.getUniformLocation(program, 'u_projection')!\r\n    }\r\n}\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\ninterface Metric {\r\n    x: number\r\n    y: number\r\n    width: number\r\n    height: number\r\n}\r\n\r\nclass FontAtlas {\r\n    constructor(\r\n        public texture: number,\r\n        public metrics: Metric[],\r\n        public fontFamily: string,\r\n        public fontSize: number,\r\n    ) { }\r\n\r\n    metric = (c: string) => this.metrics[c.charCodeAt(0)]\r\n}\r\n\r\ninterface DrawData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    vertexIndices: number[]\r\n    cameraIndices: number[]\r\n}\r\n\r\ninterface DrawLineData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    cameraIndices: number[]\r\n}\r\n\r\nconst createFontMetrics = (gl: WebGL2RenderingContext, texture: WebGLTexture, font: string, fontSize: number) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(fontSize * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * window.devicePixelRatio\r\n    canvas.height = size * window.devicePixelRatio\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = font\r\n    ctx.fillStyle = 'white'\r\n    const ascii = Array.from({ length: totalCells }, (v, i) => i)\r\n    const chars = ascii.map(c => String.fromCharCode(c))\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const metrics = chars.map((c, i) => {\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const height = fontSize\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        return {\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height\r\n        }\r\n    })\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas)\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return metrics\r\n}\r\n\r\nexport class Renderer {\r\n    gl: WebGL2RenderingContext\r\n    canvas: HTMLCanvasElement\r\n    program: DefaultProgram\r\n    width: number\r\n    height: number\r\n    fontAtlasses: Map<string, FontAtlas>\r\n    textures: WebGLTexture[]\r\n    devicePixelRatio: number\r\n\r\n    constructor(width: number, height: number) {\r\n        const canvas = document.createElement('canvas')\r\n        canvas.style.touchAction = 'none'\r\n        const gl = canvas.getContext('webgl2')!\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0)\r\n        gl.enable(gl.BLEND)\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n        gl.depthMask(false)\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n        gl.activeTexture(gl.TEXTURE0)\r\n        this.gl = gl\r\n        this.canvas = canvas\r\n        this.program = new DefaultProgram(gl)\r\n        this.fontAtlasses = new Map()\r\n        this.textures = []\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.setSize(width, height)\r\n        const texture = gl.createTexture()!\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255]))\r\n        this.textures.push(texture)\r\n    }\r\n\r\n    setSize = (width: number, height: number) => {\r\n        const { gl, canvas } = this\r\n        canvas.width = width * window.devicePixelRatio\r\n        canvas.height = height * window.devicePixelRatio\r\n        gl.uniform2f(this.program.resolutionLocation, canvas.width, canvas.height)\r\n        gl.uniform1f(this.program.devicePixelRatioLocation, window.devicePixelRatio)\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this.width = width\r\n        this.height = height\r\n        if (this.devicePixelRatio === window.devicePixelRatio) return\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.recreateFontAtlasses()\r\n    }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    setCameras = (matrices: Mat3[]) => {\r\n        const data = []\r\n        for (const matrix of matrices) data.push(...matrix.data)\r\n        this.gl.uniformMatrix3fv(this.program.camerasLocation, /*transpose*/true, data)\r\n    }\r\n\r\n    setProjection = (matrix: Mat3) =>\r\n        this.gl.uniformMatrix3fv(this.program.projectionLocation, /*transpose*/true, /*data*/matrix.data)\r\n\r\n    draw = ({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices }: DrawData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.cameraIndexBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint16Array(cameraIndices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors, textureCoordinates, cameraIndices }: DrawLineData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.cameraIndexBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint16Array(cameraIndices), gl.STATIC_DRAW)\r\n        gl.drawArrays(gl.LINES, 0, vertices.length / 2)\r\n    }\r\n\r\n    recreateFontAtlasses = () => {\r\n        for (const [font, fontAtlas] of this.fontAtlasses) {\r\n            const texture = this.textures[fontAtlas.texture]!\r\n            const metrics = createFontMetrics(this.gl, texture, font, fontAtlas.fontSize)\r\n            fontAtlas.metrics = metrics\r\n        }\r\n    }\r\n\r\n    fontAtlas = (fontFamily: string, fontSize: number): FontAtlas => {\r\n        const font = `${fontSize}px ${fontFamily}`\r\n        const atlas = this.fontAtlasses.get(font)\r\n        if (atlas) return atlas\r\n        const { gl } = this\r\n        const texture = gl.createTexture()!\r\n        const metrics = createFontMetrics(gl, texture, font, fontSize)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newAtlas = new FontAtlas(textureIndex, metrics, fontFamily, fontSize)\r\n        this.fontAtlasses.set(font, newAtlas)\r\n        return newAtlas\r\n    }\r\n}","import { Renderer } from \"../renderer\";\r\nimport { ECS } from \"../ecs\";\r\nimport { CameraIndices, Colors, TextureCoordinates, UIRoot, VertexIndices, Vertices } from \"../components\";\r\nimport { Layers } from \"../layers\";\r\nimport { layout, geometry } from './'\r\nimport { Mat3 } from \"../linear_algebra\";\r\n\r\nconst renderTriangles = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let cameraIndices: number[] = []\r\n    let vertexIndices: number[] = []\r\n    let previousTexture: number = -1\r\n    for (const layer of layers.layers) {\r\n        for (const [texture, entities] of layer) {\r\n            if (texture !== previousTexture) {\r\n                if (vertices.length) {\r\n                    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices })\r\n                    vertices = []\r\n                    colors = []\r\n                    textureCoordinates = []\r\n                    cameraIndices = []\r\n                    vertexIndices = []\r\n                }\r\n                previousTexture = texture\r\n                gl.bindTexture(gl.TEXTURE_2D, renderer.textures[texture]!)\r\n            }\r\n            for (const entity of entities) {\r\n                const offset = vertices.length / 2\r\n                vertices.push(...entity.get(Vertices)!.data)\r\n                colors.push(...entity.get(Colors)!.data)\r\n                textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n                for (const index of entity.get(VertexIndices)!.data) {\r\n                    vertexIndices.push(offset + index)\r\n                }\r\n                cameraIndices.push(...entity.get(CameraIndices)!.data)\r\n            }\r\n        }\r\n    }\r\n    if (vertices.length === 0) return\r\n    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices })\r\n}\r\n\r\nconst renderLines = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let cameraIndices: number[] = []\r\n    gl.bindTexture(gl.TEXTURE_2D, renderer.textures[0]!)\r\n    for (const entity of layers.lines) {\r\n        vertices.push(...entity.get(Vertices)!.data)\r\n        colors.push(...entity.get(Colors)!.data)\r\n        textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n        cameraIndices.push(...entity.get(CameraIndices)!.data)\r\n    }\r\n    if (vertices.length === 0) return\r\n    renderer.drawLines({ vertices, colors, textureCoordinates, cameraIndices })\r\n}\r\n\r\nexport const render = (ecs: ECS) => {\r\n    const root = ecs.get(UIRoot)!.entity\r\n    layout(root)\r\n    const layers = geometry(root)\r\n    const renderer = ecs.get(Renderer)!\r\n    const projection = Mat3.projection(renderer.width, renderer.height)\r\n    renderer.setProjection(projection)\r\n    renderer.setCameras(layers.cameras)\r\n    renderer.clear()\r\n    renderTriangles(renderer, layers)\r\n    renderLines(renderer, layers)\r\n    ecs.set(layers)\r\n}","import { Constraints, Layout } from \"../components\";\r\nimport { Entity } from \"../ecs\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nexport const layout = (root: Entity) => {\r\n    const { width, height } = root.ecs.get(Renderer)!\r\n    const constraints = new Constraints(0, width, 0, height)\r\n    root.get(Layout)!.layout(root, constraints)\r\n}","import { Entity } from \"./ecs\";\r\nimport { Mat3 } from \"./linear_algebra\";\r\n\r\ninterface Data {\r\n    z: number\r\n    texture: number\r\n    entity: Entity\r\n}\r\n\r\nexport class Layers {\r\n    cameras: Mat3[]\r\n    cameraStack: number[]\r\n    cameraForEntity: Map<Entity, number>\r\n    layers: Map<number, Entity[]>[]\r\n    lines: Entity[]\r\n\r\n    constructor() {\r\n        this.cameras = [Mat3.identity()]\r\n        this.cameraStack = [0]\r\n        this.cameraForEntity = new Map()\r\n        this.layers = []\r\n        this.lines = []\r\n    }\r\n\r\n    activeCamera = () => this.cameraStack.slice(-1)[0]\r\n\r\n    pushCamera = (camera: Mat3) => {\r\n        const index = this.cameras.length\r\n        this.cameras.push(camera)\r\n        this.cameraStack.push(index)\r\n        return index\r\n    }\r\n\r\n    popCamera = () => this.cameraStack.pop()\r\n\r\n    push = ({ z, texture, entity }: Data): void => {\r\n        this.cameraForEntity.set(entity, this.activeCamera())\r\n        for (let i = this.layers.length; i < z + 1; ++i) {\r\n            this.layers.push(new Map())\r\n        }\r\n        const layer = this.layers[z]\r\n        const entities = layer.get(texture)\r\n        if (entities) {\r\n            entities.push(entity)\r\n            return\r\n        }\r\n        layer.set(texture, [entity])\r\n    }\r\n}","import { Geometry, Offset } from \"../components\";\r\nimport { Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nexport const geometry = (root: Entity): Layers => {\r\n    const layers = new Layers()\r\n    root.get(Geometry)!.geometry(root, new Offset(0, 0), layers, 0)\r\n    return layers\r\n}","import { WorldSpace } from \"../components\"\r\nimport { ECS, Entity } from \"../ecs\"\r\nimport { Layers } from \"../layers\"\r\nimport { Mat3, Vec3 } from \"../linear_algebra\"\r\n\r\n// TODO: track which camera each entity is using\r\n// traverse layers in reverse order\r\n// apply camera to vec and check for collision\r\nexport function* rayCast(ecs: ECS, camera: Mat3, vec: Vec3): Generator<Entity> {\r\n    const [mx, my, _] = camera.vecMul(vec).data\r\n    for (const layer of ecs.get(Layers)!.layers.reverse()) {\r\n        for (const entities of layer.values()) {\r\n            for (const entity of entities) {\r\n                const { x, y, width, height } = entity.get(WorldSpace)!\r\n                if (mx > x && mx < x + width && my > y && my < y + height) {\r\n                    yield entity\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Camera, Dragging, OnClick, Pointers, Transform } from \"../components\";\r\nimport { Entity } from \"../ecs\";\r\nimport { Vec3 } from \"../linear_algebra\";\r\nimport { rayCast } from \"./ray_cast\";\r\nimport { render } from \"./render\";\r\n\r\nexport const pointerDown = (graph: Entity) => {\r\n    const ecs = graph.ecs\r\n    document.addEventListener('pointerdown', (e) => {\r\n        const length = ecs.update(Pointers, pointers => {\r\n            pointers.events.push(e)\r\n            return pointers.events.length\r\n        })\r\n        if (length !== 1) return\r\n        const camera = graph.get(Camera)!.entity\r\n        const cameraMatrix = camera.get(Transform)!.matrix\r\n        const mouse = new Vec3([e.clientX, e.clientY, 1])\r\n        for (const entity of rayCast(ecs, cameraMatrix, mouse)) {\r\n            console.log(entity.id)\r\n            const onClick = entity.get(OnClick)\r\n            if (onClick) {\r\n                onClick.callback(entity)\r\n                requestAnimationFrame(() => render(ecs))\r\n                return\r\n            }\r\n        }\r\n        ecs.update(Dragging, dragging => dragging.value = true)\r\n    })\r\n}","import { Camera, DraggedEntity, Dragging, OnDrag, PointerDistance, Pointers, Transform } from \"../components\";\r\nimport { Entity } from \"../ecs\";\r\nimport { Mat3, Vec3 } from \"../linear_algebra\";\r\nimport { rayCast } from \"./ray_cast\";\r\nimport { render } from \"./render\";\r\n\r\nconst dragging = (graph: Entity, e: PointerEvent, movementX: number, movementY: number) => {\r\n    const ecs = graph.ecs\r\n    const camera = graph.get(Camera)!.entity\r\n    const draggedEntity = ecs.get(DraggedEntity)!.entity\r\n    if (draggedEntity) {\r\n        const onDrag = draggedEntity.get(OnDrag)!.callback\r\n        const scaling = camera.get(Transform)!.matrix.vecMul(new Vec3([0, 1, 0])).length()\r\n        onDrag(draggedEntity, movementX * scaling, movementY * scaling)\r\n        requestAnimationFrame(() => render(ecs))\r\n        return\r\n    }\r\n    const cameraMatrix = camera.get(Transform)!.matrix\r\n    const mouse = new Vec3([e.clientX, e.clientY, 1])\r\n    for (const entity of rayCast(ecs, cameraMatrix, mouse)) {\r\n        const onDrag = entity.get(OnDrag)\r\n        if (onDrag) {\r\n            ecs.update(DraggedEntity, dragged => dragged.entity = entity)\r\n            const scaling = camera.get(Transform)!.matrix.vecMul(new Vec3([0, 1, 0])).length()\r\n            onDrag.callback(entity, movementX * scaling, movementY * scaling)\r\n            requestAnimationFrame(() => render(ecs))\r\n            return\r\n        }\r\n    }\r\n    camera.update(Transform, transform => {\r\n        const translate = Mat3.translation(-movementX, -movementY)\r\n        transform.matrix = transform.matrix.matMul(translate)\r\n    })\r\n    requestAnimationFrame(() => render(ecs))\r\n}\r\n\r\nconst zoomCamera = (graph: Entity, pointers: PointerEvent[], e: PointerEvent) => {\r\n    const ecs = graph.ecs\r\n    const [x1, y1] = [pointers[0]!.clientX, pointers[0]!.clientY]\r\n    const [x2, y2] = [pointers[1]!.clientX, pointers[1]!.clientY]\r\n    const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n    const pointerDistance = ecs.get(PointerDistance)!.value\r\n    if (pointerDistance > 0) {\r\n        const move = Mat3.translation(e.clientX, e.clientY)\r\n        const zoom = Math.pow(2, (pointerDistance - distance) * 0.01)\r\n        const scale = Mat3.scaling(zoom, zoom)\r\n        const moveBack = Mat3.translation(-e.clientX, -e.clientY)\r\n        const result = move.matMul(scale).matMul(moveBack)\r\n        const camera = graph.get(Camera)!.entity\r\n        camera.update(Transform, transform =>\r\n            transform.matrix = transform.matrix.matMul(result)\r\n        )\r\n    }\r\n    ecs.update(PointerDistance, d => d.value = distance)\r\n    requestAnimationFrame(() => render(ecs))\r\n}\r\n\r\nconst onPointerMove = (graph: Entity, e: PointerEvent) => {\r\n    const ecs = graph.ecs\r\n    const pointers = ecs.get(Pointers)!.events\r\n    const index = pointers.findIndex(p => p.pointerId === e.pointerId)\r\n    if (index === -1) return\r\n    const movementX = e.clientX - pointers[index]!.clientX\r\n    const movementY = e.clientY - pointers[index]!.clientY\r\n    pointers[index] = e\r\n    if (ecs.get(Dragging)!.value && pointers.length === 1) {\r\n        dragging(graph, e, movementX, movementY)\r\n    } else if (pointers.length === 2) {\r\n        zoomCamera(graph, pointers, e)\r\n    }\r\n}\r\n\r\nexport const pointerMove = (graph: Entity) => {\r\n    if (typeof PointerEvent.prototype.getCoalescedEvents === 'function') {\r\n        document.addEventListener('pointermove', (e) =>\r\n            e.getCoalescedEvents().forEach(p => onPointerMove(graph, p))\r\n        )\r\n    } else {\r\n        document.addEventListener('pointermove', (e) => onPointerMove(graph, e))\r\n    }\r\n}","import { DraggedEntity, Dragging, PointerDistance, Pointers } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\n\r\nexport const pointerUp = (ecs: ECS) => {\r\n    document.addEventListener('pointerup', (e) => {\r\n        const length = ecs.update(Pointers, pointers => {\r\n            pointers.events.splice(pointers.events.findIndex(p => p.pointerId === e.pointerId), 1)\r\n            return pointers.events.length\r\n        })\r\n        if (length !== 0) return\r\n        ecs.update(Dragging, dragging => dragging.value = false)\r\n        ecs.update(PointerDistance, distance => distance.value = 0)\r\n        ecs.update(DraggedEntity, dragged => dragged.entity = null)\r\n    })\r\n}","import { ECS } from \"../ecs\";\r\nimport { Renderer } from \"../renderer\";\r\nimport { render } from \"./render\";\r\n\r\nexport const resize = (ecs: ECS) => {\r\n    const renderer = ecs.get(Renderer)!\r\n    window.addEventListener('resize', () => {\r\n        renderer.setSize(renderer.canvas.clientWidth, renderer.canvas.clientHeight)\r\n        requestAnimationFrame(() => render(ecs))\r\n    })\r\n}","import { ECS } from \"../ecs\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nexport const touchEnd = (ecs: ECS) => {\r\n    const renderer = ecs.get(Renderer)!\r\n    document.addEventListener('touchend', () => {\r\n        renderer.canvas.requestFullscreen()\r\n    })\r\n}","import { Camera, Transform } from \"../components\"\r\nimport { Entity } from \"../ecs\"\r\nimport { Mat3 } from \"../linear_algebra\"\r\nimport { render } from \"./render\"\r\n\r\nexport const wheel = (graph: Entity) => {\r\n    document.addEventListener('wheel', (e) => {\r\n        const camera = graph.get(Camera)!.entity\r\n        e.preventDefault()\r\n        camera.update(Transform, transform => {\r\n            const move = Mat3.translation(e.clientX, e.clientY)\r\n            const zoom = Math.pow(2, e.deltaY * 0.01)\r\n            const scale = Mat3.scaling(zoom, zoom)\r\n            const moveBack = Mat3.translation(-e.clientX, -e.clientY)\r\n            const result = move.matMul(scale).matMul(moveBack)\r\n            transform.matrix = transform.matrix.matMul(result)\r\n        })\r\n        requestAnimationFrame(() => render(graph.ecs))\r\n    }, { passive: false })\r\n}","import { ConnectionFrom, ConnectionTo, DraggedEntity, Dragging, PointerDistance, Pointers } from \"../components\";\r\nimport { Entity } from \"../ecs\";\r\nimport { pointerDown } from \"./pointerDown\";\r\nimport { pointerMove } from \"./pointerMove\";\r\nimport { pointerUp } from \"./pointerUp\";\r\nimport { resize } from \"./resize\";\r\nimport { touchEnd } from \"./touchEnd\";\r\nimport { wheel } from \"./wheel\";\r\n\r\nexport const init = (graph: Entity) => {\r\n    const ecs = graph.ecs\r\n    ecs.set(\r\n        new Pointers([]),\r\n        new PointerDistance(0),\r\n        new Dragging(false),\r\n        new DraggedEntity(null),\r\n        new ConnectionFrom(null),\r\n        new ConnectionTo(null),\r\n    )\r\n    pointerDown(graph)\r\n    pointerMove(graph)\r\n    pointerUp(ecs)\r\n    resize(ecs)\r\n    touchEnd(ecs)\r\n    wheel(graph)\r\n}","import {\r\n    Layout,\r\n    Text,\r\n    FontSize,\r\n    FontFamily,\r\n    Constraints,\r\n    Color,\r\n    Offset,\r\n    Geometry,\r\n    Size,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    WorldSpace,\r\n    CameraIndices,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nconst textSize = (renderer: Renderer, entity: Entity) => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let size = new Size(0, 0)\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        size.width += metric.width\r\n        size.height = Math.max(metric.height, size.height)\r\n    }\r\n    return size\r\n}\r\n\r\nconst textGeometry = (renderer: Renderer, entity: Entity, offset: Offset, layers: Layers, z: number): number => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const { r, g, b, a } = entity.get(Color)!\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let x = 0\r\n    let indexOffset = 0\r\n    const vertices: number[] = []\r\n    const textureCoordinates: number[] = []\r\n    const colors: number[] = []\r\n    const indices: number[] = []\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        const x0 = offset.x + x\r\n        const x1 = x0 + metric.width\r\n        const y0 = offset.y\r\n        const y1 = y0 + metric.height\r\n        vertices.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1,\r\n        )\r\n        textureCoordinates.push(\r\n            metric.x, metric.y,\r\n            metric.x, metric.y + metric.height,\r\n            metric.x + metric.width, metric.y,\r\n            metric.x + metric.width, metric.y + metric.height,\r\n        )\r\n        colors.push(\r\n            r, g, b, a,\r\n            r, g, b, a,\r\n            r, g, b, a,\r\n            r, g, b, a,\r\n        )\r\n        indices.push(\r\n            indexOffset + 0, indexOffset + 1, indexOffset + 2,\r\n            indexOffset + 1, indexOffset + 2, indexOffset + 3,\r\n        )\r\n        x += metric.width\r\n        indexOffset += 4\r\n    }\r\n    layers.push({ z, entity, texture: atlas.texture })\r\n    entity.set(\r\n        new Vertices(vertices),\r\n        new TextureCoordinates(textureCoordinates),\r\n        new Colors(colors),\r\n        new VertexIndices(indices),\r\n        new CameraIndices(Array(vertices.length / 2).fill(layers.cameraForEntity.get(entity)))\r\n    )\r\n    return atlas.texture\r\n}\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const size = textSize(self.ecs.get(Renderer)!, self)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    textGeometry(self.ecs.get(Renderer)!, self, offset, layers, z)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    fontSize?: number\r\n    fontFamily?: number\r\n    color?: Color\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, data: string): Entity\r\n    (ecs: ECS, properties: Properties, data: string): Entity\r\n}\r\n\r\nexport const text: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, data] = (() => {\r\n        if (typeof args[0] === 'string') return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Text(data),\r\n        new FontSize(properties.fontSize ?? 28),\r\n        new FontFamily(properties.fontFamily ?? \"monospace\"),\r\n        properties.color ?? new Color(255, 255, 255, 255),\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const child = self.get(Child)!.entity\r\n    const childSize = child.get(Layout)!.layout(child, constraints)\r\n    child.update(Offset, offset => {\r\n        offset.x = constraints.maxWidth / 2 - childSize.width / 2\r\n        offset.y = constraints.maxHeight / 2 - childSize.height / 2\r\n    })\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const child = self.get(Child)!.entity\r\n    child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\nexport const center = (ecs: ECS, child: Entity) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Child(child)\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.y = height)\r\n        height += size.height\r\n        width = Math.max(width, size.width)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width / 2 - childWidth / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width - childWidth)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const column: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.x = width)\r\n        width += size.width\r\n        height = Math.max(height, size.height)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height / 2 - childHeight / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height - childHeight)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const row: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    Color,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    Padding,\r\n    Width,\r\n    Height,\r\n    WorldSpace,\r\n    Translate,\r\n    OnDragCallback,\r\n    OnClickCallback,\r\n    OnClick,\r\n    OnDrag,\r\n    CameraIndices\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const padding = self.get(Padding)!.value\r\n    const child = self.get(Child)\r\n    const { x, y } = self.get(Translate)!\r\n    const offset = new Offset(x, y)\r\n    if (child) {\r\n        const childSize = child.entity.get(Layout)!.layout(child.entity, constraints)\r\n        const size = new Size(\r\n            Math.min(constraints.maxWidth, childSize.width + 2 * padding),\r\n            Math.min(constraints.maxHeight, childSize.height + 2 * padding),\r\n        )\r\n        child.entity.update(Offset, offset => {\r\n            offset.x = padding\r\n            offset.y = padding\r\n        })\r\n        self.set(constraints, size, offset)\r\n        return size\r\n    }\r\n    const width = (() => {\r\n        const c = self.get(Width)\r\n        return c !== undefined ? c.value : constraints.maxWidth\r\n    })()\r\n    const height = (() => {\r\n        const c = self.get(Height)\r\n        return c !== undefined ? c.value : constraints.maxHeight\r\n    })()\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, offset)\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const { width, height } = self.get(Size)!\r\n    const x0 = offset.x\r\n    const x1 = x0 + width\r\n    const y0 = offset.y\r\n    const y1 = y0 + height\r\n    const color = self.get(Color)\r\n    if (color) {\r\n        const { r, g, b, a } = color\r\n        layers.push({ z, texture: 0, entity: self })\r\n        self.set(\r\n            new Vertices([\r\n                x0, y0,\r\n                x0, y1,\r\n                x1, y0,\r\n                x1, y1,\r\n            ]),\r\n            new TextureCoordinates(Array(8).fill(0)),\r\n            new Colors([\r\n                r, g, b, a,\r\n                r, g, b, a,\r\n                r, g, b, a,\r\n                r, g, b, a,\r\n            ]),\r\n            new VertexIndices([\r\n                0, 1, 2,\r\n                1, 2, 3,\r\n            ]),\r\n            new CameraIndices(Array(4).fill(layers.cameraForEntity.get(self)))\r\n        )\r\n    }\r\n    const child = self.get(Child)\r\n    if (child) {\r\n        child.entity.get(Geometry)!.geometry(child.entity, offset, layers, z + 1)\r\n    }\r\n    self.set(new WorldSpace(x0, y0, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    color?: Color\r\n    padding?: number\r\n    width?: number\r\n    height?: number\r\n    x?: number\r\n    y?: number\r\n    onDrag?: OnDragCallback\r\n    onClick?: OnClickCallback\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, properties: Properties): Entity\r\n    (ecs: ECS, properties: Properties, child: Entity): Entity\r\n}\r\n\r\nexport const container: Overload = (ecs: ECS, properties: Properties, child?: Entity) => {\r\n    const entity = ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Padding(properties.padding ?? 0),\r\n        new Translate(properties.x ?? 0, properties.y ?? 0)\r\n    )\r\n    if (properties.width !== undefined) entity.set(new Width(properties.width))\r\n    if (properties.height !== undefined) entity.set(new Height(properties.height))\r\n    if (child !== undefined) entity.set(new Child(child))\r\n    if (properties.color !== undefined) entity.set(properties.color)\r\n    if (properties.onDrag !== undefined) entity.set(new OnDrag(properties.onDrag))\r\n    if (properties.onClick !== undefined) entity.set(new OnClick(properties.onClick))\r\n    return entity\r\n}","import { CameraIndices, Color, Colors, From, TextureCoordinates, To, Vertices, WorldSpace } from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nconst cubicBezier = (ts: number[], from: WorldSpace, to: WorldSpace): number[] => {\r\n    const p0x = from.x + from.width / 2\r\n    const p0y = from.y + from.height / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = to.x + to.width / 2\r\n    const p3y = to.y + to.height / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    const result: number[] = []\r\n    let lastX = 0\r\n    let lastY = 0\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (result.length) result.push(lastX, lastY)\r\n        else result.push(x, y)\r\n        result.push(x, y)\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n    return result\r\n}\r\n\r\nexport const geometry = (connections: Entity[], layers: Layers) => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const textureCoordinates = Array(samples * 4).fill(0)\r\n    const camera = layers.activeCamera()\r\n    for (const entity of connections) {\r\n        const from = entity.get(From)!.entity.get(WorldSpace)!\r\n        const to = entity.get(To)!.entity.get(WorldSpace)!\r\n        const vertices = cubicBezier(ts, from, to)\r\n        const { r, g, b, a } = entity.get(Color)!\r\n        const colors: number[] = []\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(r, g, b, a)\r\n        layers.lines.push(entity)\r\n        layers.cameraForEntity.set(entity, camera)\r\n        entity.set(\r\n            new Vertices(vertices),\r\n            new TextureCoordinates(textureCoordinates),\r\n            new Colors(colors),\r\n            new CameraIndices(Array(vertices.length / 2).fill(camera))\r\n        )\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    from: Entity\r\n    to: Entity\r\n    color?: Color\r\n}\r\n\r\nexport const connection = (ecs: ECS, properties: Properties): Entity =>\r\n    ecs.entity(\r\n        new From(properties.from),\r\n        new To(properties.to),\r\n        properties.color ?? new Color(255, 255, 255, 255)\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Connections,\r\n    WorldSpace,\r\n    Camera,\r\n    Transform,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { geometry as connectionGeometry } from './connection'\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Layout)!.layout(child, constraints)\r\n    }\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    layers.pushCamera(self.get(Camera)!.entity.get(Transform)!.matrix)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    connectionGeometry(self.get(Connections)!.entities, layers)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    children?: Entity[],\r\n    connections?: Entity[],\r\n}\r\n\r\nexport const scene = (ecs: ECS, properties?: Properties) => {\r\n    properties = properties ?? {}\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(properties.children ?? []),\r\n        new Connections(properties.connections ?? []),\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        child.get(Layout)!.layout(child, constraints)\r\n    }\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n        z += 1\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\n\r\nexport const stack = (ecs: ECS, children: Entity[]): Entity =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n    )","import { Color, ConnectionFrom, Connections, ConnectionTo } from \"../components\"\r\nimport { Entity } from \"../ecs\"\r\nimport { connection } from \"../ui\"\r\nimport { render } from \"./render\"\r\n\r\nexport const clickInput = (graph: Entity) => (entity: Entity) => {\r\n    const ecs = entity.ecs\r\n    const connectionTo = ecs.get(ConnectionTo)!.entity\r\n    const connectionFrom = ecs.get(ConnectionFrom)!.entity\r\n    if (!connectionFrom) {\r\n        if (connectionTo === entity) return\r\n        else if (connectionTo !== null) connectionTo.set(new Color(101, 215, 249, 255))\r\n        ecs.update(ConnectionTo, to => to.entity = entity)\r\n        entity.set(new Color(67, 76, 112, 255))\r\n        requestAnimationFrame(() => render(ecs))\r\n    } else {\r\n        const con = connection(ecs, { from: connectionFrom, to: entity })\r\n        graph.update(Connections, connections => connections.entities.push(con))\r\n        connectionFrom.set(new Color(101, 215, 249, 255))\r\n        ecs.update(ConnectionFrom, from => from.entity = null)\r\n        requestAnimationFrame(() => render(ecs))\r\n    }\r\n}\r\n","import { Color, ConnectionFrom, Connections, ConnectionTo } from \"../components\"\r\nimport { Entity } from \"../ecs\"\r\nimport { connection } from \"../ui\"\r\nimport { render } from \"./render\"\r\n\r\nexport const clickOutput = (graph: Entity) => (entity: Entity) => {\r\n    const ecs = entity.ecs\r\n    const connectionTo = ecs.get(ConnectionTo)!.entity\r\n    const connectionFrom = ecs.get(ConnectionFrom)!.entity\r\n    if (!connectionTo) {\r\n        if (connectionFrom === entity) return\r\n        else if (connectionFrom !== null) connectionFrom.set(new Color(101, 215, 249, 255))\r\n        ecs.update(ConnectionFrom, from => from.entity = entity)\r\n        entity.set(new Color(67, 76, 112, 255))\r\n        requestAnimationFrame(() => render(ecs))\r\n    } else {\r\n        const con = connection(ecs, { from: entity, to: connectionTo })\r\n        graph.update(Connections, connections => connections.entities.push(con))\r\n        connectionTo.set(new Color(101, 215, 249, 255))\r\n        ecs.update(ConnectionTo, to => to.entity = null)\r\n        requestAnimationFrame(() => render(ecs))\r\n    }\r\n}\r\n","import { Translate } from \"../components\"\r\nimport { Entity } from \"../ecs\"\r\n\r\nexport const drag = (entity: Entity, x: number, y: number) =>\r\n    entity.update(Translate, translate => {\r\n        translate.x += x\r\n        translate.y += y\r\n    })","type Component<T> = { new(...args: any[]): T }\r\n\r\nclass Storage<T> {\r\n  lookup: Map<number, number>\r\n  data: T[]\r\n  inverses: number[]\r\n\r\n  constructor() {\r\n    this.clear()\r\n  }\r\n\r\n  get = (entity: Entity): T | undefined => {\r\n    const index = this.lookup.get(entity.id)\r\n    return index !== undefined ? this.data[index] : undefined\r\n  }\r\n\r\n  hasId = (id: number): boolean => {\r\n    return this.lookup.has(id)\r\n  }\r\n\r\n  set = (entity: Entity, component: T): void => {\r\n    const index = this.lookup.get(entity.id)\r\n    if (index) {\r\n      this.data[index] = component\r\n      this.inverses[index] = entity.id\r\n      return\r\n    }\r\n    this.lookup.set(entity.id, this.data.length)\r\n    this.data.push(component)\r\n    this.inverses.push(entity.id)\r\n  }\r\n\r\n  clear = (): void => {\r\n    this.lookup = new Map()\r\n    this.data = []\r\n    this.inverses = []\r\n  }\r\n}\r\n\r\nexport class Entity {\r\n  constructor(public id: number, public ecs: ECS) { }\r\n\r\n  set = (...components: any): Entity => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      let storage = this.ecs.storages.get(Type)\r\n      if (!storage) {\r\n        storage = new Storage()\r\n        this.ecs.storages.set(Type, storage)\r\n      }\r\n      storage.set(this, component)\r\n    }\r\n    return this\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): Readonly<T> | undefined => {\r\n    const storage = this.ecs.storages.get(Type)\r\n    return storage ? storage.get(this) : undefined\r\n  }\r\n\r\n  update = <T, U>(Type: Component<T>, f: (_: T) => U): U =>\r\n    f(this.ecs.storages.get(Type)!.get(this)!)\r\n}\r\n\r\nexport class ECS {\r\n  nextEntityId: number\r\n  storages: Map<Component<any>, Storage<any>>\r\n  resources: Map<Component<any>, any>\r\n\r\n  constructor() {\r\n    this.nextEntityId = 0\r\n    this.storages = new Map()\r\n    this.resources = new Map()\r\n  }\r\n\r\n  entity = (...components: any): Entity => {\r\n    const entity = new Entity(this.nextEntityId, this)\r\n    entity.set(...components)\r\n    ++this.nextEntityId\r\n    return entity\r\n  }\r\n\r\n  set = <T>(...components: any): void => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      this.resources.set(Type, component)\r\n    }\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): T | undefined => {\r\n    return this.resources.get(Type)\r\n  }\r\n\r\n  update = <T, U>(Type: Component<T>, f: (_: T) => U): U =>\r\n    f(this.resources.get(Type)!)\r\n\r\n  unsetAll = <T>(Type: Component<T>): void => {\r\n    const storage = this.storages.get(Type)\r\n    if (!storage) return\r\n    storage.clear()\r\n  }\r\n}\r\n","import { Camera, Children, Color } from './components'\r\nimport { Mat3 } from './linear_algebra'\r\nimport * as Studio from './studio'\r\nimport { Entity } from './studio'\r\nimport { clickInput, clickOutput, drag } from './systems'\r\nconst { ECS, Renderer } = Studio\r\nconst { UIRoot, Alignment, Transform } = Studio.components\r\nconst { text, column, row, container, scene, stack } = Studio.ui\r\nconst { render, init } = Studio.systems\r\n\r\nconst ecs = new ECS()\r\nconst renderer = new Renderer(window.innerWidth, window.innerHeight)\r\nrenderer.canvas.style.width = '100%'\r\nrenderer.canvas.style.height = '100%'\r\n\r\n\r\nconst camera = ecs.entity(new Transform(Mat3.identity()))\r\n\r\nconst graph = scene(ecs).set(new Camera(camera))\r\n\r\nconst root = stack(ecs, [\r\n    container(ecs, { color: new Color(71, 52, 129, 255) }),\r\n    graph\r\n])\r\n\r\nconst inputs = (n: number): Entity =>\r\n    column(ecs, Array.from({ length: n }, (_, i) =>\r\n        row(ecs, [\r\n            container(ecs, { width: 28, height: 28, color: new Color(101, 215, 249, 255), onClick: clickInput(graph) }),\r\n            container(ecs, { width: 5, height: 0 }),\r\n            container(ecs, { padding: 5 }, text(ecs, `in ${i}`)),\r\n        ]),\r\n    ))\r\n\r\n\r\nconst outputs = (n: number): Entity =>\r\n    column(ecs, { crossAxisAlignment: Alignment.END }, Array.from({ length: n }, (_, i) =>\r\n        row(ecs, [\r\n            container(ecs, { padding: 5 }, text(ecs, `out ${i}`)),\r\n            container(ecs, { width: 5, height: 0 }),\r\n            container(ecs, { width: 28, height: 28, color: new Color(101, 215, 249, 255), onClick: clickOutput(graph) })\r\n        ]),\r\n    ))\r\n\r\n\r\nconst source = container(ecs, { color: new Color(0, 0, 0, 50), padding: 10, x: 25, y: 200, onDrag: drag },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Source\")),\r\n        container(ecs, { width: 0, height: 10 }),\r\n        row(ecs, [\r\n            inputs(3),\r\n            container(ecs, { width: 30, height: 0 }),\r\n            outputs(2),\r\n        ]),\r\n    ])\r\n)\r\n\r\nconst transform = container(ecs, { color: new Color(0, 0, 0, 50), padding: 10, x: 400, y: 100, onDrag: drag },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Transform\")),\r\n        container(ecs, { width: 0, height: 10 }),\r\n        row(ecs, [\r\n            inputs(2),\r\n            container(ecs, { width: 30, height: 0 }),\r\n            outputs(4),\r\n        ])\r\n    ])\r\n)\r\n\r\nconst sink = container(ecs, { color: new Color(0, 0, 0, 50), padding: 10, x: 750, y: 250, onDrag: drag },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Sink\")),\r\n        container(ecs, { width: 0, height: 10 }),\r\n        row(ecs, [\r\n            inputs(3),\r\n            container(ecs, { width: 30, height: 0 }),\r\n            outputs(3)\r\n        ])\r\n    ])\r\n)\r\n\r\ngraph.update(Children, children => children.entities.push(source, transform, sink))\r\n\r\necs.set(renderer, new UIRoot(root))\r\n\r\ninit(graph)\r\n\r\nrequestAnimationFrame(() => render(ecs))\r\n\r\ndocument.body.appendChild(renderer.canvas)"],"names":["$b28c6149dbdf1c74$export$63548ce3f438e2c4","constructor","entity","$b28c6149dbdf1c74$export$5f1af8db9871e1d6","value","$b28c6149dbdf1c74$export$80f2abd03de5ca5a","$b28c6149dbdf1c74$export$cd0608c167c7849e","$b28c6149dbdf1c74$export$3edfc50f178e5b0b","$b28c6149dbdf1c74$export$dca3b0875bd9a954","entities","$b28c6149dbdf1c74$export$f3ea0776119f0e84","$b28c6149dbdf1c74$export$79f141de891a5fed","$b28c6149dbdf1c74$export$9d7927214ed7d2cf","Alignment1","$b28c6149dbdf1c74$export$66a3248d846611ce","alignment","$b28c6149dbdf1c74$export$8ee255758437644c","$b28c6149dbdf1c74$export$8954cfac7c08d16a","$b28c6149dbdf1c74$export$9db2ba50894db2b9","x","y","$b28c6149dbdf1c74$export$563a914cafbdc389","matrix","$b28c6149dbdf1c74$export$65cfd44a2050f99","scale","$b28c6149dbdf1c74$export$678de176a9a9dea","$b28c6149dbdf1c74$export$d10b08d1cf690764","$b28c6149dbdf1c74$export$892596cec99bc70e","r","g","b","a","$b28c6149dbdf1c74$export$8ee6ea94b5aedb49","$b28c6149dbdf1c74$export$6e8e053b4dff75fa","minWidth","maxWidth","minHeight","maxHeight","$b28c6149dbdf1c74$export$cb6da89c6af1a8ec","width","height","$b28c6149dbdf1c74$export$8caee09accd95d7f","add","other","this","$b28c6149dbdf1c74$export$c84671f46d6a1ca","impl","layout","self","constraints","$b28c6149dbdf1c74$export$77f0fd777d3cc7db","$b28c6149dbdf1c74$export$92bffd8adab203ca","data","$b28c6149dbdf1c74$export$535dd6b7931a007","$b28c6149dbdf1c74$export$c537fa0d021d010b","$b28c6149dbdf1c74$export$fc4f2b7e7f87722c","$b28c6149dbdf1c74$export$39d3d935cf79db44","$b28c6149dbdf1c74$export$2db6c17465f94a2","geometry","parentOffset","layers","z","$b28c6149dbdf1c74$export$b11ff02aa7665438","callback","$b28c6149dbdf1c74$export$35ee2f917ebd5998","$b28c6149dbdf1c74$export$6412482d5070c3e5","events","$b28c6149dbdf1c74$export$713e7dce70432f26","$b28c6149dbdf1c74$export$d06c063800545f6e","$b28c6149dbdf1c74$export$b04da8f7c31a5074","$b28c6149dbdf1c74$export$91139d1e0da86fd6","$b28c6149dbdf1c74$export$397a9a3acbf885db","$a26733d1baff63db$export$838423f3adec30fa","length","c","Math","sqrt","pow","$a26733d1baff63db$export$83f4edd572c84121","matMul","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","vecMul","b1","b2","b3","inverse","idet","static","radians","cos","s","sin","$621f3774f67738fc$var$DefaultProgram","gl","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","log","getShaderInfoLog","useProgram","vertexArrayObject","createVertexArray","positionBuffer","createBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","textureCoordinatesBuffer","bindAttribLocation","enableVertexAttribArray","bindBuffer","colorBuffer","cameraIndexBuffer","vertexAttribIPointer","UNSIGNED_SHORT","indexBuffer","devicePixelRatioLocation","getUniformLocation","camerasLocation","projectionLocation","texture","metrics","fontFamily","fontSize","metric","charCodeAt","$621f3774f67738fc$var$createFontMetrics","font","canvas","document","createElement","ctx","getContext","rows","size","current","$621f3774f67738fc$var$nearestPowerOfTwo","cellSize","window","devicePixelRatio","style","textAlign","textBaseline","fillStyle","chars","Array","from","v","i","map","String","fromCharCode","clearRect","measureText","ceil","floor","fillText","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","touchAction","clearColor","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","depthMask","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","activeTexture","TEXTURE0","fontAtlasses","Map","textures","setSize","createTexture","Uint8Array","push","uniform2f","resolutionLocation","uniform1f","viewport","recreateFontAtlasses","clear","COLOR_BUFFER_BIT","matrices","uniformMatrix3fv","setProjection","vertices","colors","textureCoordinates","vertexIndices","cameraIndices","bufferData","Float32Array","STATIC_DRAW","Uint16Array","ELEMENT_ARRAY_BUFFER","drawElements","TRIANGLES","$9a7c059fd1344034$export$b3890eb0ae9dca99","ecs","root","get","$cb3d056828175573$export$b3219800bda33a1f","$90a5a29c0fcb75eb$export$42a7622cbf932bb","renderer","$621f3774f67738fc$export$88530751e3977073","projection","setCameras","cameras","previousTexture","layer","draw","offset","index","$9a7c059fd1344034$var$renderTriangles","lines","drawLines","$9a7c059fd1344034$var$renderLines","set","$3b19fb344542138e$export$89312ce47c0ca777","identity","cameraStack","cameraForEntity","activeCamera","slice","pushCamera","camera","popCamera","pop","$231f2a51c75bf33f$export$51be7442bbfe168a","vec","mx","my","_","reverse","values","$0b92ec7f88b512ef$export$e6e29dfeb5ef19c1","graph","addEventListener","e","update","pointers","cameraMatrix","mouse","clientX","clientY","id","onClick","requestAnimationFrame","dragging","$f6814459cf3a656e$var$onPointerMove","findIndex","p","pointerId","movementX","movementY","draggedEntity","onDrag","scaling","dragged","transform","translate","translation","$f6814459cf3a656e$var$dragging","x1","y1","x2","y2","distance","pointerDistance","move","zoom","moveBack","result","d","$f6814459cf3a656e$var$zoomCamera","$f6814459cf3a656e$export$71eac0963f2c2f01","PointerEvent","prototype","getCoalescedEvents","forEach","$d70a29fd47e7122e$export$b0143ab4f38d0a07","splice","$56480d1b1530afac$export$4380c87abf28fdf","clientWidth","clientHeight","$e0ea414209667c6e$export$48121dda624fd32","requestFullscreen","$07cceb80b991ee21$export$d3028820ea014224","preventDefault","deltaY","passive","$6d01f164b3d82840$export$2cd8252107eb640b","$2d5075f154be1094$var$layout","text1","atlas","fontAtlas","max","$2d5075f154be1094$var$textSize","$2d5075f154be1094$var$geometry","text2","indexOffset","indices","x0","y0","fill","$2d5075f154be1094$var$textGeometry","$2d5075f154be1094$export$6f093cfa640b7166","args","properties","color","$fd89ce3675dee463$var$layout","child","childSize","$fd89ce3675dee463$var$geometry","$fd89ce3675dee463$export$3481c78889e8fbe8","$518015a6e3cc694d$var$layout","children","START","CENTER","child1","childWidth","END","child2","$518015a6e3cc694d$var$geometry","$518015a6e3cc694d$export$4e0c71f277ca26b3","crossAxisAlignment","$9e4edab979495f0d$var$layout","childHeight","$9e4edab979495f0d$var$geometry","$9e4edab979495f0d$export$120ff0929b202a6d","$8a99d960732a172f$var$layout","padding","offset1","min","undefined","$8a99d960732a172f$var$geometry","$8a99d960732a172f$export$34e0f9847d4c02dd","$5dee3d2e57488100$var$cubicBezier","ts","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$5dee3d2e57488100$export$42a7622cbf932bb","connections","start","stop","num","step","$5dee3d2e57488100$var$linspace","samples","$5dee3d2e57488100$export$412d2991813e589a","$864b15efd9f5e1a7$var$layout","$864b15efd9f5e1a7$var$geometry","$864b15efd9f5e1a7$export$33aff30b8aa0934e","$d380360335f9e6c0$var$layout","$d380360335f9e6c0$var$geometry","$d380360335f9e6c0$export$a57ab32f40f83ea9","$ca74c26951914e9a$export$84dc6de0617d8752","connectionTo","connectionFrom","con","$0314a9838179d78a$export$e672ce3f6ddfd497","$b5c7b4fd2adf6dba$export$d7d5d435647ed5a0","$556f46b6ec271235$var$Storage","lookup","hasId","has","component","inverses","$556f46b6ec271235$export$bc644a473284d944","components","Type","storage","storages","f","$556f46b6ec271235$export$d01098d378880d3","nextEntityId","resources","unsetAll","ECS","$b4e14b6b8da86996$var$ECS","Renderer","$b4e14b6b8da86996$var$Renderer","$91ae824a8b26c87f$exports","UIRoot","$b4e14b6b8da86996$var$UIRoot","Alignment","$b4e14b6b8da86996$var$Alignment","Transform","$b4e14b6b8da86996$var$Transform","text","$b4e14b6b8da86996$var$text","column","$b4e14b6b8da86996$var$column","row","$b4e14b6b8da86996$var$row","container","$b4e14b6b8da86996$var$container","scene","$b4e14b6b8da86996$var$scene","stack","$b4e14b6b8da86996$var$stack","ui","render","$b4e14b6b8da86996$var$render","init","$b4e14b6b8da86996$var$init","systems","$b4e14b6b8da86996$var$ecs","$b4e14b6b8da86996$var$renderer","innerWidth","innerHeight","$b4e14b6b8da86996$var$camera","$b4e14b6b8da86996$var$graph","$b4e14b6b8da86996$var$root","$b4e14b6b8da86996$var$inputs","n","$b4e14b6b8da86996$var$outputs","$b4e14b6b8da86996$var$source","$b4e14b6b8da86996$var$transform","$b4e14b6b8da86996$var$sink","body","appendChild"],"version":3,"file":"index.5b9bd7ee.js.map"}