{"mappings":"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","sources":["src/webgl2_renderer.ts","src/scene.ts","src/color.ts","src/simple.ts","src/index.ts"],"sourcesContent":["import { Scene } from './scene'\n\ninterface Renderer {\n  gl: WebGL2RenderingContext\n  ctx: CanvasRenderingContext2D\n  position: { buffer: WebGLBuffer, location: number }\n  color: { buffer: WebGLBuffer, location: number }\n}\n\nconst vertexShaderSource = `#version 300 es\nuniform vec2 uResolution;\nin vec2 aPosition;\nin vec3 aColor;\nout vec3 vColor;\n\nvoid main() {\n  vColor = aColor;\n  vec2 clipSpace = aPosition / uResolution * 2.0 - 1.0;\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0.0, 1.0);\n}\n`\n\nconst fragmentShaderSource = `#version 300 es\nprecision mediump float;\n\nin vec3 vColor;\nout vec4 fragColor;\n\nvoid main() {\n  fragColor = vec4(vColor, 1.0);\n}\n`\n\nexport const initRenderer = (): Renderer => {\n  const gl_canvas: HTMLCanvasElement = document.createElement('canvas')\n  gl_canvas.style.width = '100%'\n  gl_canvas.style.height = '100%'\n  gl_canvas.style.position = 'absolute'\n  document.body.appendChild(gl_canvas)\n\n  const text_canvas: HTMLCanvasElement = document.createElement('canvas')\n  text_canvas.style.width = '100%'\n  text_canvas.style.height = '100%'\n  text_canvas.style.position = 'absolute'\n\n  const dpr = window.devicePixelRatio;\n  const gl = gl_canvas.getContext('webgl2')\n  gl.canvas.width = Math.round(gl.canvas.clientWidth * dpr)\n  gl.canvas.height = Math.round(gl.canvas.clientHeight * dpr)\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n  gl.clearColor(33 / 255, 33 / 255, 33 / 255, 1.0)\n\n  const ctx = text_canvas.getContext('2d')\n  ctx.canvas.width = gl.canvas.width\n  ctx.canvas.height = gl.canvas.height\n  document.body.appendChild(text_canvas)\n\n  const vertexShader = gl.createShader(gl.VERTEX_SHADER)\n  gl.shaderSource(vertexShader, vertexShaderSource)\n  gl.compileShader(vertexShader)\n\n  const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)\n  gl.shaderSource(fragmentShader, fragmentShaderSource)\n  gl.compileShader(fragmentShader)\n\n  const program = gl.createProgram()\n  gl.attachShader(program, vertexShader)\n  gl.attachShader(program, fragmentShader)\n  gl.linkProgram(program)\n\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    console.log(gl.getShaderInfoLog(vertexShader))\n    console.log(gl.getShaderInfoLog(fragmentShader))\n  }\n\n  gl.useProgram(program)\n\n  const uResolution = gl.getUniformLocation(program, 'uResolution')\n  const aPosition = gl.getAttribLocation(program, 'aPosition')\n  const aColor = gl.getAttribLocation(program, 'aColor')\n\n  gl.uniform2f(uResolution, gl.canvas.width, gl.canvas.height)\n  gl.enableVertexAttribArray(aPosition)\n  gl.enableVertexAttribArray(aColor)\n\n  return {\n    gl,\n    ctx,\n    position: {\n      location: aPosition,\n      buffer: gl.createBuffer(),\n    },\n    color: {\n      location: aColor,\n      buffer: gl.createBuffer(),\n    }\n  }\n}\n\nexport const render = (renderer: Renderer, scene: Scene): void => {\n  const { gl, ctx, position, color } = renderer\n  gl.clear(gl.COLOR_BUFFER_BIT)\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, position.buffer)\n  {\n    const data = new Float32Array(scene.triangles * 2)\n    let i = 0\n    for (const vertices of scene.positions) {\n      for (const vertex of vertices) {\n        data[i++] = vertex\n      }\n    }\n    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW)\n  }\n  gl.vertexAttribPointer(position.location, /*size*/2, /*type*/gl.FLOAT, /*normalize*/false, /*stride*/0, /*offset*/0)\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, color.buffer)\n  {\n    const data = new Uint8Array(scene.triangles * 3)\n    let i = 0\n    for (const colors of scene.colors) {\n      for (const color of colors) {\n        data[i++] = color\n      }\n    }\n    gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW)\n  }\n  gl.vertexAttribPointer(color.location, /*size*/3, /*type*/gl.UNSIGNED_BYTE, /*normalize*/true, /*stride*/0, /*offset*/0)\n\n  gl.drawArrays(gl.TRIANGLES, /*offset*/0, /*count*/scene.triangles)\n\n  ctx.font = `24px sans-serif`\n  ctx.fillStyle = 'white'\n  ctx.fillText('foo', 55, 100 + 24 - 5)\n}\n","import { Color } from './color'\n\nexport interface Scene {\n  positions: number[][]\n  colors: number[][]\n  triangles: number\n}\n\nexport interface Node {\n  x: number\n  y: number\n  color: Color\n}\n\nexport const addNode = (scene: Scene, { x, y, color }: Node) => {\n  const dpr = window.devicePixelRatio\n  const x1 = x\n  const y1 = y\n  const { r, g, b } = color\n  const x2 = x1 + 200\n  const y2 = y1 + 25\n  const y3 = y2 + 1\n  const y4 = y2 + 75\n  const vertices = [\n    x1, y1,\n    x2, y1,\n    x2, y2,\n    x1, y1,\n    x1, y2,\n    x2, y2,\n\n    x1, y2,\n    x2, y2,\n    x2, y3,\n    x1, y2,\n    x1, y3,\n    x2, y3,\n\n    x1, y3,\n    x2, y3,\n    x2, y4,\n    x1, y3,\n    x1, y4,\n    x2, y4,\n  ]\n  scene.positions.push(vertices)\n  scene.colors.push([\n    r, g, b,\n    r, g, b,\n    r, g, b,\n    r, g, b,\n    r, g, b,\n    r, g, b,\n\n    0, 0, 0,\n    0, 0, 0,\n    0, 0, 0,\n    0, 0, 0,\n    0, 0, 0,\n    0, 0, 0,\n\n    66, 66, 66,\n    66, 66, 66,\n    66, 66, 66,\n    66, 66, 66,\n    66, 66, 66,\n    66, 66, 66,\n  ])\n  scene.triangles += vertices.length / 2\n}\n","export interface Color {\n  r: number\n  g: number\n  b: number\n}\n\nexport interface Palette {\n  red: Color\n  pink: Color\n  purple: Color\n  deepPurple: Color\n  indigo: Color\n  blue: Color\n  lightBlue: Color\n  cyan: Color\n  teal: Color\n  green: Color\n  brown: Color\n  grey: Color\n  blueGrey: Color\n}\n\nexport const material: Palette = {\n  red: { r: 198, g: 40, b: 40 },\n  pink: { r: 173, g: 20, b: 87 },\n  purple: { r: 106, g: 27, b: 154 },\n  deepPurple: { r: 69, g: 39, b: 160 },\n  indigo: { r: 40, g: 53, b: 147 },\n  blue: { r: 21, g: 101, b: 192 },\n  lightBlue: { r: 2, g: 119, b: 189 },\n  cyan: { r: 0, g: 131, b: 143 },\n  teal: { r: 0, g: 105, b: 92 },\n  green: { r: 46, g: 125, b: 50 },\n  brown: { r: 78, g: 52, b: 46 },\n  grey: { r: 117, g: 117, b: 117 },\n  blueGrey: { r: 55, g: 71, b: 79 }\n}\n","import { Scene, addNode } from './scene'\nimport { material } from './color'\n\nconst initScene = (): Scene => {\n  const scene: Scene = {\n    positions: [],\n    colors: [],\n    triangles: 0\n  }\n  addNode(scene, { x: 50, y: 100, color: material.red })\n  addNode(scene, { x: 300, y: 100, color: material.pink })\n  addNode(scene, { x: 550, y: 100, color: material.purple })\n  addNode(scene, { x: 800, y: 100, color: material.deepPurple })\n  addNode(scene, { x: 1050, y: 100, color: material.indigo })\n  addNode(scene, { x: 50, y: 250, color: material.blue })\n  addNode(scene, { x: 300, y: 250, color: material.lightBlue })\n  addNode(scene, { x: 550, y: 250, color: material.cyan })\n  addNode(scene, { x: 800, y: 250, color: material.teal })\n  addNode(scene, { x: 1050, y: 250, color: material.green })\n  addNode(scene, { x: 50, y: 400, color: material.brown })\n  addNode(scene, { x: 300, y: 400, color: material.grey })\n  addNode(scene, { x: 550, y: 400, color: material.blueGrey })\n  return scene\n}\n\nexport const scene: Scene = initScene()\n","import { initRenderer, render } from './webgl2_renderer'\nimport { scene } from './simple'\n\nconst renderer = initRenderer()\nrender(renderer, scene)\n"],"names":["$389457da2918ac76$export$2fed3c3ffa8e7fdf","scene","x","y","color","window","devicePixelRatio","x1","y1","r","g","b","x2","y2","y3","y4","vertices","positions","push","colors","triangles","length","$5b55f105e5908397$export$15d6f59453b50ec6","red","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","brown","grey","blueGrey","$8532dd324f87e703$export$33aff30b8aa0934e","$8532dd324f87e703$var$initScene","renderer","gl","ctx","position","clear","COLOR_BUFFER_BIT","bindBuffer","ARRAY_BUFFER","buffer","data","Float32Array","i","vertex","bufferData","STATIC_DRAW","vertexAttribPointer","location","FLOAT","Uint8Array","UNSIGNED_BYTE","drawArrays","TRIANGLES","font","fillStyle","fillText","$fbc63a1b85c866a4$export$b3890eb0ae9dca99","gl_canvas","document","createElement","style","width","height","body","appendChild","text_canvas","dpr","getContext","canvas","Math","round","clientWidth","clientHeight","viewport","clearColor","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","log","getShaderInfoLog","useProgram","uResolution","getUniformLocation","aPosition","getAttribLocation","aColor","uniform2f","enableVertexAttribArray","createBuffer","$fbc63a1b85c866a4$export$6423463da94c1ca3"],"version":3,"file":"index.90e18015.js.map"}