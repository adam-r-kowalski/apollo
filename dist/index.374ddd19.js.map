{"mappings":"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","sources":["index.ts"],"sourcesContent":["interface Numbers {\n  xs: number[],\n  ys: number[],\n  literals: string[]\n}\n\ninterface Calls {\n  xs: number[],\n  ys: number[],\n  names: string[],\n  arguments: string[][],\n}\n\ninterface Graph {\n  numbers: Numbers,\n  calls: Calls\n}\n\ninterface Cursor {\n  x: number,\n  y: number,\n}\n\ninterface State {\n  graph: Graph,\n  cursor: Cursor,\n  grid: number,\n  repeat: string,\n}\n\nconst grid = 50\n\nconst state: State = {\n  graph: {\n    numbers: {\n      xs: [],\n      ys: [],\n      literals: [],\n    },\n    calls: {\n      xs: [],\n      ys: [],\n      names: [],\n      arguments: [],\n    }\n  },\n  cursor: {\n    x: Math.round((window.innerWidth / 2) / grid) * grid - grid / 2,\n    y: Math.round((window.innerHeight / 2) / grid) * grid - grid / 2\n  },\n  grid,\n  repeat: ''\n}\n\n\nconst glCanvas: HTMLCanvasElement = document.querySelector('#gl')\nglCanvas.width = window.innerWidth\nglCanvas.height = window.innerHeight\nconst gl = glCanvas.getContext('webgl2')\n\ngl.enable(gl.BLEND)\ngl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\n\nconst textCanvas: HTMLCanvasElement = document.querySelector('#text')\ntextCanvas.width = window.innerWidth\ntextCanvas.height = window.innerHeight\nconst ctx = textCanvas.getContext('2d')\n\nconst vertexShaderSource = `#version 300 es\n\nin vec2 a_position;\n\nuniform vec2 u_resolution;\n\nvoid main() {\n  vec2 zeroToOne = a_position / u_resolution;\n  vec2 zeroToTwo = zeroToOne * 2.0;\n  vec2 clipSpace = zeroToTwo - 1.0;\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n}\n`\n\n\nconst fragmentShaderSource = `#version 300 es\n\nprecision highp float;\n\nuniform vec4 u_color;\n\nout vec4 outColor;\n\nvoid main() {\n  outColor = u_color;\n}\n`\n\n\nconst createShader = (gl: WebGL2RenderingContext, shader_type: number, source: string) => {\n  const shader = gl.createShader(shader_type)\n  gl.shaderSource(shader, source)\n  gl.compileShader(shader)\n  const success = gl.getShaderParameter(shader, gl.COMPILE_STATUS)\n  if (success) {\n    return shader\n  }\n  console.log(gl.getShaderInfoLog(shader))\n  gl.deleteShader(shader)\n}\n\nconst vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource)\nconst fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource)\n\n\nconst createProgram = (gl: WebGL2RenderingContext, vertexShader: WebGLShader, fragmentShader: WebGLShader) => {\n  const program = gl.createProgram()\n  gl.attachShader(program, vertexShader)\n  gl.attachShader(program, fragmentShader)\n  gl.linkProgram(program)\n  const success = gl.getProgramParameter(program, gl.LINK_STATUS)\n  if (success) {\n    return program\n  }\n  console.log(gl.getProgramInfoLog(program))\n  gl.deleteProgram(program)\n}\n\nconst program = createProgram(gl, vertexShader, fragmentShader)\n\nconst positionAttributeLocation = gl.getAttribLocation(program, \"a_position\")\nconst positionBuffer = gl.createBuffer()\n\n\nconst vao = gl.createVertexArray()\ngl.bindVertexArray(vao)\ngl.enableVertexAttribArray(positionAttributeLocation)\n\ngl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n\n{\n  const size = 2\n  const dtype = gl.FLOAT\n  const normalize = false\n  const stride = 0\n  const offset = 0\n  gl.vertexAttribPointer(positionAttributeLocation, size, dtype, normalize, stride, offset)\n}\n\n\n\n\n\nconst resizeCanvasToDisplaySize = (canvas: HTMLCanvasElement) => {\n  const dpr = window.devicePixelRatio\n  const { width, height } = canvas.getBoundingClientRect()\n  const displayWidth = Math.round(width * dpr)\n  const displayHeight = Math.round(height * dpr)\n  const needResize = canvas.width != displayWidth || canvas.height != displayHeight;\n  if (needResize) {\n    canvas.width = displayWidth;\n    canvas.height = displayHeight;\n  }\n  return needResize;\n}\n\nconst resoltionUniformLocation = gl.getUniformLocation(program, \"u_resolution\")\n\nresizeCanvasToDisplaySize(gl.canvas)\ngl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\ngl.clearColor(.27, .35, .39, 1)\n\n\ngl.useProgram(program)\ngl.uniform2f(resoltionUniformLocation, gl.canvas.width, gl.canvas.height)\n\ngl.bindVertexArray(vao)\n\n\nconst randomInt = (range: number) => Math.floor(Math.random() * range)\n\nconst setRectangle = (gl: WebGL2RenderingContext, x: number, y: number, width: number, height: number) => {\n  const x1 = x\n  const x2 = x + width\n  const y1 = y\n  const y2 = y + height\n  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([\n    x1, y1,\n    x2, y1,\n    x1, y2,\n    x1, y2,\n    x2, y1,\n    x2, y2,\n  ]), gl.STATIC_DRAW);\n}\n\nconst colorLocation = gl.getUniformLocation(program, \"u_color\")\n\n\nconst primitiveType = gl.TRIANGLES\nconst offset = 0\nconst count = 6\n\n\ngl.clear(gl.COLOR_BUFFER_BIT)\n\nconst width = 200\nconst height = 105\n\n\nconst renderNumbers = (numbers: Numbers) => {\n  numbers.xs.map((x, i) => {\n    const y = numbers.ys[i]\n\n    // function name\n\n    setRectangle(gl, x, y, width, 40)\n    gl.uniform4f(colorLocation, .10, .46, .82, 1)\n    gl.drawArrays(primitiveType, offset, count)\n\n    ctx.font = '22px sans-serif'\n    ctx.fillStyle = 'white'\n    ctx.fillText('Number', x + 5, y + 28)\n\n    // function body\n\n    setRectangle(gl, x, y + 40, 200, height - 40)\n    gl.uniform4f(colorLocation, .11, .19, .23, 1)\n    gl.drawArrays(primitiveType, offset, count)\n\n    // literal\n    setRectangle(gl, x, y + 40, 200, height - 40)\n    gl.uniform4f(colorLocation, .11, .19, .23, 1)\n    gl.drawArrays(primitiveType, offset, count)\n\n    // result\n    setRectangle(gl, x + 180, y + 55, 10, 10)\n    gl.uniform4f(colorLocation, .39, .64, 1, 1)\n    gl.drawArrays(primitiveType, offset, count)\n  })\n}\n\nconst renderCalls = (calls: Calls) => {\n  calls.xs.map((x, i) => {\n    const y = calls.ys[i]\n\n    // function name\n\n    setRectangle(gl, x, y, width, 40)\n    gl.uniform4f(colorLocation, .10, .46, .82, 1)\n    gl.drawArrays(primitiveType, offset, count)\n\n    ctx.font = '22px sans-serif'\n    ctx.fillStyle = 'white'\n    ctx.fillText('Add', x + 5, y + 28)\n\n    // function body\n\n    setRectangle(gl, x, y + 40, 200, height - 40)\n    gl.uniform4f(colorLocation, .11, .19, .23, 1)\n    gl.drawArrays(primitiveType, offset, count)\n\n\n    // x\n\n    setRectangle(gl, x + 10, y + 55, 10, 10)\n    gl.uniform4f(colorLocation, .39, .64, 1, 1)\n    gl.drawArrays(primitiveType, offset, count)\n\n    ctx.font = '18px sans-serif'\n    ctx.fillStyle = 'white'\n    ctx.fillText('x', x + 30, y + 65)\n\n\n    // y\n\n    setRectangle(gl, x + 10, y + 80, 10, 10)\n    gl.uniform4f(colorLocation, .39, .64, 1, 1)\n    gl.drawArrays(primitiveType, offset, count)\n\n    ctx.font = '18px sans-serif'\n    ctx.fillStyle = 'white'\n    ctx.fillText('y', x + 30, y + 90)\n\n\n    // result\n\n    setRectangle(gl, x + 180, y + 55, 10, 10)\n    gl.uniform4f(colorLocation, .39, .64, 1, 1)\n    gl.drawArrays(primitiveType, offset, count)\n\n    ctx.font = '18px sans-serif'\n    ctx.fillStyle = 'white'\n    ctx.fillText('result', x + 125, y + 65)\n\n  })\n}\n\nconst mainLoop = () => {\n  gl.clear(gl.COLOR_BUFFER_BIT)\n  ctx.clearRect(0, 0, textCanvas.width, textCanvas.height)\n\n\n  for (let x = state.grid / 2; x < textCanvas.width; x += state.grid) {\n    setRectangle(gl, x, 0, 1, textCanvas.height)\n    gl.uniform4f(colorLocation, 1, 1, 1, 0.1)\n    gl.drawArrays(primitiveType, offset, count)\n  }\n\n  for (let y = state.grid / 2; y < textCanvas.height; y += state.grid) {\n    setRectangle(gl, 0, y, textCanvas.width, 1)\n    gl.uniform4f(colorLocation, 1, 1, 1, 0.1)\n    gl.drawArrays(primitiveType, offset, count)\n  }\n\n  renderNumbers(state.graph.numbers)\n  renderCalls(state.graph.calls)\n\n\n  // cursor\n  const x = state.cursor.x - width / 2\n  const y = state.cursor.y - height / 2\n\n  setRectangle(gl, x + width / 2 - 15, y + height / 2 - 1, 30, 2)\n  gl.uniform4f(colorLocation, 1, 1, 1, 1)\n  gl.drawArrays(primitiveType, offset, count)\n\n  setRectangle(gl, x + width / 2 - 1, y + height / 2 - 15, 2, 30)\n  gl.uniform4f(colorLocation, 1, 1, 1, 1)\n  gl.drawArrays(primitiveType, offset, count)\n\n  requestAnimationFrame(mainLoop)\n}\n\nrequestAnimationFrame(mainLoop)\n\ndocument.addEventListener('mousemove', event => {\n  state.cursor.x = Math.round(event.clientX / state.grid) * state.grid - state.grid / 2\n  state.cursor.y = Math.round(event.clientY / state.grid) * state.grid - state.grid / 2\n})\n\nconst addNumber = (state: State) => {\n  state.graph.numbers.xs.push(state.cursor.x)\n  state.graph.numbers.ys.push(state.cursor.y)\n  state.graph.numbers.literals.push('')\n}\n\nconst addCall = (state: State) => {\n  state.graph.calls.xs.push(state.cursor.x)\n  state.graph.calls.ys.push(state.cursor.y)\n  state.graph.calls.names.push('Add')\n  state.graph.calls.arguments.push(['x', 'y'])\n}\n\nconst repeat = (state: State) => {\n  if (state.repeat.length > 0) {\n    const result = parseInt(state.repeat)\n    state.repeat = ''\n    return result\n  }\n  return 1\n}\n\ndocument.addEventListener('keypress', event => {\n  switch (event.key) {\n    case 'n': addNumber(state); break\n    case 'c': addCall(state); break\n    case 'h': state.cursor.x -= state.grid * repeat(state); break\n    case 'j': state.cursor.y += state.grid * repeat(state); break\n    case 'k': state.cursor.y -= state.grid * repeat(state); break\n    case 'l': state.cursor.x += state.grid * repeat(state); break\n    case '0': state.repeat += '0'; break\n    case '1': state.repeat += '1'; break\n    case '2': state.repeat += '2'; break\n    case '3': state.repeat += '3'; break\n    case '4': state.repeat += '4'; break\n    case '5': state.repeat += '5'; break\n    case '6': state.repeat += '6'; break\n    case '7': state.repeat += '7'; break\n    case '8': state.repeat += '8'; break\n    case '9': state.repeat += '9'; break\n    default: console.log(event.key)\n  }\n})\n\nwindow.addEventListener('resize', () => {\n  gl.canvas.width = window.innerWidth\n  gl.canvas.height = window.innerHeight\n  resizeCanvasToDisplaySize(gl.canvas)\n  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n  gl.uniform2f(resoltionUniformLocation, gl.canvas.width, gl.canvas.height)\n  textCanvas.width = window.innerWidth\n  textCanvas.height = window.innerHeight\n})\n\n\n"],"names":["$543d6d2a56ed7d8d$var$state","graph","numbers","xs","ys","literals","calls","names","arguments","cursor","x","Math","round","window","innerWidth","$543d6d2a56ed7d8d$var$grid","y","innerHeight","grid","repeat","$543d6d2a56ed7d8d$var$glCanvas","document","querySelector","width","height","$543d6d2a56ed7d8d$var$gl","getContext","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","$543d6d2a56ed7d8d$var$textCanvas","$543d6d2a56ed7d8d$var$ctx","$543d6d2a56ed7d8d$var$createShader","gl","shader_type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","console","log","getShaderInfoLog","deleteShader","$543d6d2a56ed7d8d$var$vertexShader","VERTEX_SHADER","$543d6d2a56ed7d8d$var$fragmentShader","FRAGMENT_SHADER","$543d6d2a56ed7d8d$var$program","vertexShader","fragmentShader","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","deleteProgram","$543d6d2a56ed7d8d$var$createProgram","$543d6d2a56ed7d8d$var$positionAttributeLocation","getAttribLocation","$543d6d2a56ed7d8d$var$positionBuffer","createBuffer","$543d6d2a56ed7d8d$var$vao","createVertexArray","bindVertexArray","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","size","dtype","FLOAT","normalize","stride","offset","vertexAttribPointer","$543d6d2a56ed7d8d$var$resizeCanvasToDisplaySize","canvas","dpr","devicePixelRatio","getBoundingClientRect","displayWidth","displayHeight","needResize","$543d6d2a56ed7d8d$var$resoltionUniformLocation","getUniformLocation","viewport","clearColor","useProgram","uniform2f","$543d6d2a56ed7d8d$var$setRectangle","x1","x2","y1","y2","bufferData","Float32Array","STATIC_DRAW","$543d6d2a56ed7d8d$var$colorLocation","$543d6d2a56ed7d8d$var$primitiveType","TRIANGLES","clear","COLOR_BUFFER_BIT","$543d6d2a56ed7d8d$var$mainLoop","clearRect","uniform4f","drawArrays","map","i","font","fillStyle","fillText","$543d6d2a56ed7d8d$var$height","x3","$543d6d2a56ed7d8d$var$width","y3","requestAnimationFrame","addEventListener","event","clientX","clientY","$543d6d2a56ed7d8d$var$repeat","state","length","result","parseInt","key","push","$543d6d2a56ed7d8d$var$addCall"],"version":3,"file":"index.374ddd19.js.map"}