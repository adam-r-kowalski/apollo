{"mappings":"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","sources":["src/color.ts","src/simple.ts","src/scene.ts","src/index.ts","src/webgl2_renderer.ts"],"sourcesContent":["export interface Color {\n  r: number\n  g: number\n  b: number\n}\n\nexport interface Palette {\n  red: Color\n  pink: Color\n  purple: Color\n  deepPurple: Color\n  indigo: Color\n  blue: Color\n  lightBlue: Color\n  cyan: Color\n  teal: Color\n  green: Color\n  brown: Color\n  grey: Color\n  blueGrey: Color\n}\n\nexport const material: Palette = {\n  red: { r: 198, g: 40, b: 40 },\n  pink: { r: 173, g: 20, b: 87 },\n  purple: { r: 106, g: 27, b: 154 },\n  deepPurple: { r: 69, g: 39, b: 160 },\n  indigo: { r: 40, g: 53, b: 147 },\n  blue: { r: 21, g: 101, b: 192 },\n  lightBlue: { r: 2, g: 119, b: 189 },\n  cyan: { r: 0, g: 131, b: 143 },\n  teal: { r: 0, g: 105, b: 92 },\n  green: { r: 46, g: 125, b: 50 },\n  brown: { r: 78, g: 52, b: 46 },\n  grey: { r: 117, g: 117, b: 117 },\n  blueGrey: { r: 55, g: 71, b: 79 }\n}\n","import Scene from './scene'\nimport { material } from './color'\n\nconst scene = new Scene()\nscene.addNode({ x: 50, y: 100, color: material.red })\nscene.addNode({ x: 300, y: 100, color: material.pink })\nscene.addNode({ x: 550, y: 100, color: material.purple })\nscene.addNode({ x: 800, y: 100, color: material.deepPurple })\nscene.addNode({ x: 1050, y: 100, color: material.indigo })\nscene.addNode({ x: 50, y: 250, color: material.blue })\nscene.addNode({ x: 300, y: 250, color: material.lightBlue })\nscene.addNode({ x: 550, y: 250, color: material.cyan })\nscene.addNode({ x: 800, y: 250, color: material.teal })\nscene.addNode({ x: 1050, y: 250, color: material.green })\nscene.addNode({ x: 50, y: 400, color: material.brown })\nscene.addNode({ x: 300, y: 400, color: material.grey })\nscene.addNode({ x: 550, y: 400, color: material.blueGrey })\n\nexport default scene\n","import { Color } from './color'\n\nexport interface Node {\n  x: number\n  y: number\n  color: Color\n}\n\nexport default class {\n  positions: number[][]\n  colors: number[][]\n  triangles: number\n\n  constructor() {\n    this.positions = []\n    this.colors = []\n    this.triangles = 0\n  }\n\n  addNode({ x, y, color }: Node): void {\n    const dpr = window.devicePixelRatio\n    const x1 = x\n    const y1 = y\n    const { r, g, b } = color\n    const x2 = x1 + 200\n    const y2 = y1 + 25\n    const y3 = y2 + 1\n    const y4 = y2 + 75\n    const vertices = [\n      x1, y1,\n      x2, y1,\n      x2, y2,\n      x1, y1,\n      x1, y2,\n      x2, y2,\n\n      x1, y2,\n      x2, y2,\n      x2, y3,\n      x1, y2,\n      x1, y3,\n      x2, y3,\n\n      x1, y3,\n      x2, y3,\n      x2, y4,\n      x1, y3,\n      x1, y4,\n      x2, y4,\n    ]\n    this.positions.push(vertices)\n    this.colors.push([\n      r, g, b,\n      r, g, b,\n      r, g, b,\n      r, g, b,\n      r, g, b,\n      r, g, b,\n\n      0, 0, 0,\n      0, 0, 0,\n      0, 0, 0,\n      0, 0, 0,\n      0, 0, 0,\n      0, 0, 0,\n\n      66, 66, 66,\n      66, 66, 66,\n      66, 66, 66,\n      66, 66, 66,\n      66, 66, 66,\n      66, 66, 66,\n    ])\n    this.triangles += vertices.length / 2\n  }\n}\n\n\n","import Renderer from './webgl2_renderer'\nimport scene from './simple'\n\nconst renderer = new Renderer(scene)\n","import Scene from './scene'\n\nconst vertexShaderSource = `#version 300 es\nuniform vec2 uResolution;\nin vec2 aPosition;\nin vec3 aColor;\nout vec3 vColor;\n\nvoid main() {\n  vColor = aColor;\n  vec2 clipSpace = aPosition / uResolution * 2.0 - 1.0;\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0.0, 1.0);\n}\n`\n\nconst fragmentShaderSource = `#version 300 es\nprecision mediump float;\n\nin vec3 vColor;\nout vec4 fragColor;\n\nvoid main() {\n  fragColor = vec4(vColor, 1.0);\n}\n`\n\nexport default class Renderer {\n  gl: WebGL2RenderingContext\n  ctx: CanvasRenderingContext2D\n  position: { buffer: WebGLBuffer, location: number }\n  color: { buffer: WebGLBuffer, location: number }\n  uResolution: WebGLUniformLocation\n\n  constructor(public scene: Scene) {\n    const gl_canvas: HTMLCanvasElement = document.createElement('canvas')\n    gl_canvas.style.width = '100%'\n    gl_canvas.style.height = '100%'\n    gl_canvas.style.position = 'absolute'\n    document.body.appendChild(gl_canvas)\n\n    const text_canvas: HTMLCanvasElement = document.createElement('canvas')\n    text_canvas.style.width = '100%'\n    text_canvas.style.height = '100%'\n    text_canvas.style.position = 'absolute'\n    document.body.appendChild(text_canvas)\n\n    const gl = gl_canvas.getContext('webgl2')\n    this.gl = gl\n    gl.clearColor(33 / 255, 33 / 255, 33 / 255, 1.0)\n\n    this.ctx = text_canvas.getContext('2d')\n\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)\n    gl.shaderSource(vertexShader, vertexShaderSource)\n    gl.compileShader(vertexShader)\n\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)\n    gl.shaderSource(fragmentShader, fragmentShaderSource)\n    gl.compileShader(fragmentShader)\n\n    const program = gl.createProgram()\n    gl.attachShader(program, vertexShader)\n    gl.attachShader(program, fragmentShader)\n    gl.linkProgram(program)\n\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n      console.log(gl.getShaderInfoLog(vertexShader))\n      console.log(gl.getShaderInfoLog(fragmentShader))\n    }\n\n    this.uResolution = gl.getUniformLocation(program, 'uResolution')\n\n    this.position = {\n      location: gl.getAttribLocation(program, 'aPosition'),\n      buffer: gl.createBuffer()\n    }\n    gl.enableVertexAttribArray(this.position.location)\n\n    this.color = {\n      location: gl.getAttribLocation(program, 'aColor'),\n      buffer: gl.createBuffer(),\n    }\n    gl.enableVertexAttribArray(this.color.location)\n\n    gl.useProgram(program)\n\n    const resizeObserver = new ResizeObserver(this.onResize)\n    try {\n      resizeObserver.observe(gl_canvas, { box: 'device-pixel-content-box' })\n    } catch (ex) {\n      resizeObserver.observe(gl_canvas, { box: 'content-box' })\n    }\n  }\n\n  onResize = (entries: ResizeObserverEntry[]): void => {\n    entries.map(entry => {\n      if (entry.devicePixelContentBoxSize) return {\n        entry: entry,\n        width: entry.devicePixelContentBoxSize[0].inlineSize,\n        height: entry.devicePixelContentBoxSize[0].blockSize,\n        dpr: 1,\n      }\n      if (entry.contentBoxSize) return {\n        entry: entry,\n        width: entry.contentBoxSize[0].inlineSize,\n        height: entry.contentBoxSize[0].blockSize,\n        dpr: window.devicePixelRatio,\n      }\n      return {\n        entry: entry,\n        width: entry.contentRect.width,\n        height: entry.contentRect.height,\n        dpr: window.devicePixelRatio,\n      }\n    }).forEach(({ entry, width, height, dpr }) => {\n      const canvas = entry.target as HTMLCanvasElement\n      canvas.width = Math.round(width * dpr)\n      canvas.height = Math.round(height * dpr)\n    })\n    const gl = this.gl\n    gl.uniform2f(this.uResolution, gl.canvas.width, gl.canvas.height)\n    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height)\n    this.ctx.canvas.width = gl.canvas.width\n    this.ctx.canvas.height = gl.canvas.height\n    this.render()\n  }\n\n  render = (): void => {\n    const gl = this.gl\n    const ctx = this.ctx\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.position.buffer)\n    {\n      const data = new Float32Array(this.scene.triangles * 2)\n      let i = 0\n      for (const vertices of this.scene.positions) {\n        for (const vertex of vertices) {\n          data[i++] = vertex\n        }\n      }\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW)\n    }\n    gl.vertexAttribPointer(this.position.location, /*size*/2, /*type*/gl.FLOAT, /*normalize*/false, /*stride*/0, /*offset*/0)\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.color.buffer)\n    {\n      const data = new Uint8Array(this.scene.triangles * 3)\n      let i = 0\n      for (const colors of this.scene.colors) {\n        for (const color of colors) {\n          data[i++] = color\n        }\n      }\n      gl.bufferData(gl.ARRAY_BUFFER, data, gl.STATIC_DRAW)\n    }\n    gl.vertexAttribPointer(this.color.location, /*size*/3, /*type*/gl.UNSIGNED_BYTE, /*normalize*/true, /*stride*/0, /*offset*/0)\n\n    gl.drawArrays(gl.TRIANGLES, /*offset*/0, /*count*/this.scene.triangles)\n\n    ctx.clearRect(0, 0, gl.canvas.width, gl.canvas.height)\n    ctx.font = `24px sans-serif`\n    ctx.fillStyle = 'white'\n    ctx.fillText('foo', 55, 100 + 24 - 3)\n  }\n}\n"],"names":["$5b55f105e5908397$export$15d6f59453b50ec6","red","r","g","b","pink","purple","deepPurple","indigo","blue","lightBlue","cyan","teal","green","brown","grey","blueGrey","$8532dd324f87e703$var$scene","constructor","this","positions","colors","triangles","addNode","x","y","color","window","devicePixelRatio","x1","y1","x2","y2","y3","y4","vertices","push","length","$8532dd324f87e703$export$2e2bcd8739ae039","scene","onResize","entries","map","entry","devicePixelContentBoxSize","width","inlineSize","height","blockSize","dpr","contentBoxSize","contentRect","forEach","canvas","target","Math","round","gl","uniform2f","uResolution","viewport","ctx","render","clear","COLOR_BUFFER_BIT","bindBuffer","ARRAY_BUFFER","position","buffer","data","Float32Array","i","vertex","bufferData","STATIC_DRAW","vertexAttribPointer","location","FLOAT","Uint8Array","UNSIGNED_BYTE","drawArrays","TRIANGLES","clearRect","font","fillStyle","fillText","gl_canvas","document","createElement","style","body","appendChild","text_canvas","gl1","getContext","clearColor","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","log","getShaderInfoLog","getUniformLocation","getAttribLocation","createBuffer","enableVertexAttribArray","useProgram","resizeObserver","ResizeObserver","observe","box","ex"],"version":3,"file":"index.7990a5ff.js.map"}