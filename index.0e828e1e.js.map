{"mappings":"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","sources":["src/fuzzy_find.ts","src/linear_algebra/matrix3x3.ts","src/linear_algebra/vector3.ts","src/state.ts","src/event.ts","src/ui/pointer_down.ts","src/ui/batch_geometry.ts","src/ui/camera_stack.ts","src/ui/center.ts","src/ui/alignment.ts","src/ui/column.ts","src/ui/container.ts","src/ui/row.ts","src/ui/scene.ts","src/ui/stack.ts","src/ui/text.ts","src/ui/index.ts","src/ui/reduce.ts","src/ui/gather_on_click_handlers.ts","src/ui/id_to_world_space.ts","src/ui/layer_geometry.ts","src/ui/gather_connections.ts","src/ui/reducer.ts","src/ui/render.ts","src/ui/webgl2.ts","src/ui/run.ts","src/ui/view/index.ts","src/index.ts"],"sourcesContent":["export interface FuzzyFind {\r\n    haystack: string\r\n    needle: string\r\n}\r\n\r\nexport const fuzzyFind = ({ haystack, needle }: FuzzyFind): boolean => {\r\n    let haystackIndex = 0\r\n    let needleIndex = 0\r\n    while (needleIndex < needle.length) {\r\n        const n = needle[needleIndex].toLowerCase()\r\n        while (haystackIndex < haystack.length && n !== haystack[haystackIndex].toLowerCase()) {\r\n            ++haystackIndex\r\n        }\r\n        if (haystackIndex === haystack.length) return false\r\n        ++needleIndex\r\n    }\r\n    return true\r\n}\r\n","import { Size } from \"../ui\"\r\nimport { Vector3 } from \"./vector3\"\r\n\r\nexport type Matrix3x3 = number[]\r\n\r\nexport const identity = (): Matrix3x3 => [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n]\r\n\r\nexport const projection = ({ width, height }: Size): Matrix3x3 => [\r\n    2 / width, 0, -1,\r\n    0, -2 / height, 1,\r\n    0, 0, 1\r\n]\r\n\r\nexport const translate = (x: number, y: number): Matrix3x3 => [\r\n    1, 0, x,\r\n    0, 1, y,\r\n    0, 0, 1\r\n]\r\n\r\nexport const scale = (x: number, y: number): Matrix3x3 => [\r\n    x, 0, 0,\r\n    0, y, 0,\r\n    0, 0, 1\r\n]\r\n\r\nexport const rotate = (radians: number): Matrix3x3 => {\r\n    const c = Math.cos(radians)\r\n    const s = Math.sin(radians)\r\n    return [\r\n        c, s, 0,\r\n        -s, c, 0,\r\n        0, 0, 1\r\n    ]\r\n}\r\n\r\nexport const multiplyMatrices = (...matrices: Matrix3x3[]) => {\r\n    const [head, ...tail] = matrices\r\n    return tail.reduce((a, b) => {\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return [\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ]\r\n    }, head)\r\n}\r\n\r\nexport const multiplyMatrixVector = (a: Matrix3x3, b: Vector3): Vector3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b1 = b[0]\r\n    const b2 = b[1]\r\n    const b3 = b[2]\r\n    const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n    const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n    const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n    return [c1, c2, c3]\r\n}\r\n\r\nexport const inverse = (a: Matrix3x3): Matrix3x3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b11 = a22 * a33 - a23 * a32\r\n    const b12 = a21 * a33 - a23 * a31\r\n    const b13 = a21 * a32 - a22 * a31\r\n    const b21 = a12 * a33 - a13 * a32\r\n    const b22 = a11 * a33 - a13 * a31\r\n    const b23 = a11 * a32 - a12 * a31\r\n    const b31 = a12 * a23 - a13 * a22\r\n    const b32 = a11 * a23 - a13 * a21\r\n    const b33 = a11 * a22 - a12 * a21\r\n    const det = a31 * b31 - a32 * b32 + a33 * b33\r\n    const idet = 1 / det\r\n    return [\r\n        idet * b11, idet * -b21, idet * b31,\r\n        idet * -b12, idet * b22, idet * -b32,\r\n        idet * b13, idet * -b23, idet * b33\r\n    ]\r\n}","export type Vector3 = number[]\r\n\r\nexport const length = ([a, b, c]: Vector3) =>\r\n    Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))","import { identity, Matrix3x3 } from \"./linear_algebra/matrix3x3\"\r\nimport { Pointer, Color } from \"./ui\"\r\n\r\nexport type UUID = string\r\n\r\nexport interface InputPath {\r\n    nodeUUID: UUID\r\n    inputIndex: number\r\n}\r\n\r\nexport interface OutputPath {\r\n    nodeUUID: UUID\r\n    outputIndex: number\r\n}\r\n\r\nexport interface Input {\r\n    name: string\r\n    selected: boolean\r\n    edgeIndices: number[]\r\n}\r\n\r\nexport interface Output {\r\n    name: string\r\n    selected: boolean\r\n    edgeIndices: number[]\r\n}\r\n\r\nexport interface Body {\r\n    value: number\r\n    editing: boolean\r\n}\r\n\r\nexport interface Node {\r\n    uuid: UUID\r\n    name: string\r\n    inputs: Input[]\r\n    body?: Body\r\n    outputs: Output[]\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport interface Edge {\r\n    input: InputPath\r\n    output: OutputPath\r\n}\r\n\r\nexport interface Graph {\r\n    nodes: { [uuid: UUID]: Node }\r\n    nodeOrder: UUID[]\r\n    edges: Edge[]\r\n}\r\n\r\nexport interface Theme {\r\n    background: Color\r\n    node: Color\r\n    input: Color\r\n    selectedInput: Color\r\n    connection: Color\r\n}\r\n\r\nexport interface Finder {\r\n    search: string\r\n    show: boolean\r\n    options: string[]\r\n}\r\n\r\nexport interface Operation {\r\n    name: string\r\n    inputs: string[]\r\n    body?: number\r\n    outputs: string[]\r\n}\r\n\r\nexport type Operations = { [name: string]: Operation }\r\n\r\nexport interface ScreenCoordinates {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport enum VirtualKeyboardKind {\r\n    ALPHABETIC,\r\n    NUMERIC\r\n}\r\n\r\nexport interface VirtualKeyboard {\r\n    show: boolean\r\n    kind: VirtualKeyboardKind\r\n}\r\n\r\nexport enum InputTargetKind {\r\n    FINDER,\r\n    NUMBER,\r\n    NONE\r\n}\r\n\r\nexport interface FinderInputTarget { kind: InputTargetKind.FINDER }\r\n\r\nexport interface NumberInputTarget {\r\n    kind: InputTargetKind.NUMBER,\r\n    nodeUUID: UUID\r\n}\r\n\r\nexport interface NoInputTarget {\r\n    kind: InputTargetKind.NONE,\r\n}\r\n\r\nexport type InputTarget =\r\n    | FinderInputTarget\r\n    | NumberInputTarget\r\n    | NoInputTarget\r\n\r\nexport interface State {\r\n    graph: Graph\r\n    zooming: boolean\r\n    dragging: boolean\r\n    selectedNode: UUID | null\r\n    pointers: Pointer[]\r\n    pointerDistance: number\r\n    pointerCenter: [number, number]\r\n    selectedOutput: OutputPath | null\r\n    selectedInput: InputPath | null\r\n    potentialDoubleClick: boolean\r\n    nodePlacementLocation: ScreenCoordinates\r\n    finder: Finder\r\n    virtualKeyboard: VirtualKeyboard\r\n    inputTarget: InputTarget\r\n    camera: Matrix3x3\r\n    operations: Operations\r\n    theme: Theme\r\n}\r\n\r\nexport type GenerateUUID = () => UUID\r\n\r\nexport const initialState = (generateUUID: GenerateUUID): State => {\r\n    const uuids = Array.from({ length: 6 }, () => generateUUID())\r\n    return {\r\n        graph: {\r\n            nodes: {\r\n                [uuids[0]]: {\r\n                    uuid: uuids[0],\r\n                    name: \"Number\",\r\n                    inputs: [],\r\n                    body: { value: 5, editing: false },\r\n                    outputs: [\r\n                        { name: \"out\", selected: false, edgeIndices: [0] },\r\n                    ],\r\n                    x: 25,\r\n                    y: 25\r\n                },\r\n                [uuids[1]]: {\r\n                    uuid: uuids[1],\r\n                    name: \"Number\",\r\n                    inputs: [],\r\n                    body: { value: 10, editing: false },\r\n                    outputs: [\r\n                        { name: \"out\", selected: false, edgeIndices: [1] },\r\n                    ],\r\n                    x: 25,\r\n                    y: 100\r\n                },\r\n                [uuids[2]]: {\r\n                    uuid: uuids[2],\r\n                    name: \"Add\",\r\n                    inputs: [\r\n                        { name: \"x\", selected: false, edgeIndices: [0] },\r\n                        { name: \"y\", selected: false, edgeIndices: [1] }\r\n                    ],\r\n                    outputs: [\r\n                        { name: \"out\", selected: false, edgeIndices: [2] },\r\n                    ],\r\n                    x: 150,\r\n                    y: 50\r\n                },\r\n                [uuids[3]]: {\r\n                    uuid: uuids[3],\r\n                    name: \"Number\",\r\n                    inputs: [],\r\n                    body: { value: 15, editing: false },\r\n                    outputs: [\r\n                        { name: \"out\", selected: false, edgeIndices: [3] },\r\n                    ],\r\n                    x: 175,\r\n                    y: 150\r\n                },\r\n                [uuids[4]]: {\r\n                    uuid: uuids[4],\r\n                    name: \"Divide\",\r\n                    inputs: [\r\n                        { name: \"x\", selected: false, edgeIndices: [2] },\r\n                        { name: \"y\", selected: false, edgeIndices: [3] }\r\n                    ],\r\n                    outputs: [\r\n                        { name: \"out\", selected: false, edgeIndices: [4] },\r\n                    ],\r\n                    x: 350,\r\n                    y: 50\r\n                },\r\n                [uuids[5]]: {\r\n                    uuid: uuids[5],\r\n                    name: \"Log\",\r\n                    inputs: [\r\n                        { name: \"value\", selected: false, edgeIndices: [4] },\r\n                    ],\r\n                    outputs: [],\r\n                    x: 550,\r\n                    y: 50\r\n                },\r\n            },\r\n            nodeOrder: uuids,\r\n            edges: [\r\n                {\r\n                    output: { nodeUUID: uuids[0], outputIndex: 0 },\r\n                    input: { nodeUUID: uuids[2], inputIndex: 0 },\r\n                },\r\n                {\r\n                    output: { nodeUUID: uuids[1], outputIndex: 0 },\r\n                    input: { nodeUUID: uuids[2], inputIndex: 1 },\r\n                },\r\n                {\r\n                    output: { nodeUUID: uuids[2], outputIndex: 0 },\r\n                    input: { nodeUUID: uuids[4], inputIndex: 0 },\r\n                },\r\n                {\r\n                    output: { nodeUUID: uuids[3], outputIndex: 0 },\r\n                    input: { nodeUUID: uuids[4], inputIndex: 1 },\r\n                },\r\n                {\r\n                    output: { nodeUUID: uuids[4], outputIndex: 0 },\r\n                    input: { nodeUUID: uuids[5], inputIndex: 0 },\r\n                }\r\n            ]\r\n        },\r\n        zooming: false,\r\n        dragging: false,\r\n        pointers: [],\r\n        pointerDistance: 0,\r\n        pointerCenter: [0, 0],\r\n        camera: identity(),\r\n        selectedOutput: null,\r\n        selectedInput: null,\r\n        selectedNode: null,\r\n        theme: {\r\n            background: { red: 2, green: 22, blue: 39, alpha: 255 },\r\n            node: { red: 41, green: 95, blue: 120, alpha: 255 },\r\n            input: { red: 188, green: 240, blue: 192, alpha: 255 },\r\n            selectedInput: { red: 175, green: 122, blue: 208, alpha: 255 },\r\n            connection: { red: 255, green: 255, blue: 255, alpha: 255 },\r\n        },\r\n        potentialDoubleClick: false,\r\n        nodePlacementLocation: { x: 0, y: 0 },\r\n        finder: {\r\n            search: '',\r\n            options: [],\r\n            show: false\r\n        },\r\n        virtualKeyboard: {\r\n            show: false,\r\n            kind: VirtualKeyboardKind.ALPHABETIC\r\n        },\r\n        inputTarget: { kind: InputTargetKind.NONE },\r\n        operations: {\r\n            \"Number\": {\r\n                name: \"Number\",\r\n                inputs: [],\r\n                body: 0,\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Add\": {\r\n                name: \"Add\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Subtract\": {\r\n                name: \"Subtract\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Multiply\": {\r\n                name: \"Multiply\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Divide\": {\r\n                name: \"Divide\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Equal\": {\r\n                name: \"Equal\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Less Than\": {\r\n                name: \"Less Than\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Log\": {\r\n                name: \"Log\",\r\n                inputs: [\"value\"],\r\n                outputs: []\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { fuzzyFind } from \"./fuzzy_find\"\r\nimport { multiplyMatrices, multiplyMatrixVector, scale, translate } from \"./linear_algebra/matrix3x3\"\r\nimport { length } from \"./linear_algebra/vector3\"\r\nimport { UpdateResult } from \"./ui/run\"\r\nimport { GenerateUUID, InputPath, InputTargetKind, OutputPath, State, UUID, VirtualKeyboardKind } from \"./state\"\r\nimport { Pointer } from \"./ui\"\r\n\r\nexport enum EventKind {\r\n    POINTER_MOVE,\r\n    POINTER_DOWN,\r\n    POINTER_UP,\r\n    CLICKED_NODE,\r\n    WHEEL,\r\n    CLICKED_INPUT,\r\n    CLICKED_OUTPUT,\r\n    DOUBLE_CLICK_TIMEOUT,\r\n    DOUBLE_CLICK,\r\n    KEYDOWN,\r\n    VIRTUAL_KEYDOWN,\r\n    CLICKED_FINDER_OPTION,\r\n    CLICKED_NUMBER,\r\n    CLICKED_BACKGROUND\r\n}\r\n\r\nexport interface PointerMove {\r\n    kind: EventKind.POINTER_MOVE\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerDown {\r\n    kind: EventKind.POINTER_DOWN\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerUp {\r\n    kind: EventKind.POINTER_UP\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface ClickedNode {\r\n    kind: EventKind.CLICKED_NODE\r\n    nodeUUID: UUID\r\n}\r\n\r\nexport interface Wheel {\r\n    kind: EventKind.WHEEL\r\n    x: number\r\n    y: number\r\n    deltaY: number\r\n}\r\n\r\nexport interface ClickedInput {\r\n    kind: EventKind.CLICKED_INPUT\r\n    inputPath: InputPath\r\n}\r\n\r\nexport interface ClickedOutput {\r\n    kind: EventKind.CLICKED_OUTPUT\r\n    outputPath: OutputPath\r\n}\r\n\r\nexport interface DoubleClickTimeout {\r\n    kind: EventKind.DOUBLE_CLICK_TIMEOUT\r\n}\r\n\r\nexport interface DoubleClick {\r\n    kind: EventKind.DOUBLE_CLICK\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface KeyDown {\r\n    kind: EventKind.KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport interface VirtualKeyDown {\r\n    kind: EventKind.VIRTUAL_KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport interface ClickedFinderOption {\r\n    kind: EventKind.CLICKED_FINDER_OPTION\r\n    option: string\r\n}\r\n\r\nexport interface ClickedNumber {\r\n    kind: EventKind.CLICKED_NUMBER,\r\n    nodeUUID: UUID\r\n}\r\n\r\nexport interface ClickedBackground {\r\n    kind: EventKind.CLICKED_BACKGROUND,\r\n}\r\n\r\nexport type AppEvent =\r\n    | PointerMove\r\n    | PointerDown\r\n    | PointerUp\r\n    | ClickedNode\r\n    | Wheel\r\n    | ClickedInput\r\n    | ClickedOutput\r\n    | DoubleClickTimeout\r\n    | DoubleClick\r\n    | KeyDown\r\n    | VirtualKeyDown\r\n    | ClickedFinderOption\r\n    | ClickedNumber\r\n    | ClickedBackground\r\n\r\n\r\nconst pointerDown = (state: State, event: PointerDown): UpdateResult<State, AppEvent> => {\r\n    if (state.inputTarget.kind !== InputTargetKind.NONE) return { state }\r\n    state.pointers.push(event.pointer)\r\n    if (state.pointers.length > 1) {\r\n        state.potentialDoubleClick = false\r\n        state.dragging = false\r\n        state.zooming = state.pointers.length === 2\r\n        return { state }\r\n    }\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n        return {\r\n            state,\r\n            dispatch: [{ kind: EventKind.DOUBLE_CLICK, pointer: event.pointer }]\r\n        }\r\n    }\r\n    state.dragging = true\r\n    state.potentialDoubleClick = true\r\n    return {\r\n        state,\r\n        schedule: [\r\n            { after: { milliseconds: 300 }, event: { kind: EventKind.DOUBLE_CLICK_TIMEOUT } }\r\n        ]\r\n    }\r\n}\r\n\r\nconst pointerUp = (state: State, event: PointerUp) => {\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    state.pointers.splice(index, 1)\r\n    if (state.pointers.length === 1) {\r\n        state.zooming = false\r\n        state.dragging = true\r\n        state.pointerDistance = 0\r\n    }\r\n    else if (state.pointers.length === 0) {\r\n        state.dragging = false\r\n        state.pointerDistance = 0\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst pointerMove = (state: State, event: PointerMove) => {\r\n    if (!state.dragging && !state.zooming) {\r\n        if (!state.finder.show) {\r\n            state.nodePlacementLocation = { x: event.pointer.x, y: event.pointer.y }\r\n        }\r\n        return { state, rerender: false }\r\n    }\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    const pointer = state.pointers[index]\r\n    state.pointers[index] = event.pointer\r\n    if (state.dragging) {\r\n        const dx = event.pointer.x - pointer.x\r\n        const dy = event.pointer.y - pointer.y\r\n        if (state.selectedNode !== null) {\r\n            const scaling = length(multiplyMatrixVector(state.camera, [0, 1, 0]))\r\n            const node = state.graph.nodes[state.selectedNode]\r\n            node.x += dx * scaling\r\n            node.y += dy * scaling\r\n        } else {\r\n            state.camera = multiplyMatrices(state.camera, translate(-dx, -dy))\r\n        }\r\n        return { state, render: true }\r\n    }\r\n    // must be zooming\r\n    const [p0, p1] = [state.pointers[0], state.pointers[1]]\r\n    const [x1, y1] = [p0.x, p0.y]\r\n    const [x2, y2] = [p1.x, p1.y]\r\n    const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n    const previousDistance = state.pointerDistance\r\n    const previousCenter = state.pointerCenter\r\n    state.pointerDistance = distance\r\n    const x = (p0.x + p1.x) / 2\r\n    const y = (p0.y + p1.y) / 2\r\n    state.pointerCenter = [x, y]\r\n    if (previousDistance > 0) {\r\n        const move = translate(x, y)\r\n        const zoom = Math.pow(2, (previousDistance - distance) * 0.01)\r\n        const moveBack = translate(-x, -y)\r\n        const dx = x - previousCenter[0]\r\n        const dy = y - previousCenter[1]\r\n        state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack, translate(-dx, -dy))\r\n        return { state, render: true }\r\n    } else return { state }\r\n}\r\n\r\nconst clickedNode = (state: State, event: ClickedNode) => {\r\n    state.selectedNode = event.nodeUUID\r\n    const nodeOrder = state.graph.nodeOrder.filter(uuid => uuid !== event.nodeUUID)\r\n    nodeOrder.push(event.nodeUUID)\r\n    state.graph.nodeOrder = nodeOrder\r\n    return { state, render: true }\r\n}\r\n\r\nconst wheel = (state: State, event: Wheel) => {\r\n    const move = translate(event.x, event.y)\r\n    const zoom = Math.pow(2, event.deltaY * 0.01)\r\n    const moveBack = translate(-event.x, -event.y)\r\n    state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack)\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedInput = (state: State, event: ClickedInput) => {\r\n    state.selectedNode = event.inputPath.nodeUUID\r\n    const nodeOrder = state.graph.nodeOrder.filter(uuid => uuid !== event.inputPath.nodeUUID)\r\n    nodeOrder.push(event.inputPath.nodeUUID)\r\n    state.graph.nodeOrder = nodeOrder\r\n    if (state.selectedOutput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: event.inputPath,\r\n            output: state.selectedOutput\r\n        })\r\n        {\r\n            const { nodeUUID, outputIndex } = state.selectedOutput\r\n            const output = state.graph.nodes[nodeUUID].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n            output.selected = false\r\n        }\r\n        {\r\n            const { nodeUUID, inputIndex } = event.inputPath\r\n            const input = state.graph.nodes[nodeUUID].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedOutput = null\r\n        state.selectedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedInput) {\r\n        const { nodeUUID, inputIndex } = state.selectedInput\r\n        state.graph.nodes[nodeUUID].inputs[inputIndex].selected = false\r\n    }\r\n    const { nodeUUID, inputIndex } = event.inputPath\r\n    state.graph.nodes[nodeUUID].inputs[inputIndex].selected = true\r\n    state.selectedInput = event.inputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedOutput = (state: State, event: ClickedOutput) => {\r\n    state.selectedNode = event.outputPath.nodeUUID\r\n    const nodeOrder = state.graph.nodeOrder.filter(uuid => uuid !== event.outputPath.nodeUUID)\r\n    nodeOrder.push(event.outputPath.nodeUUID)\r\n    state.graph.nodeOrder = nodeOrder\r\n    if (state.selectedInput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: state.selectedInput,\r\n            output: event.outputPath\r\n        })\r\n        {\r\n            const { nodeUUID, inputIndex } = state.selectedInput\r\n            const input = state.graph.nodes[nodeUUID].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n            input.selected = false\r\n        }\r\n        {\r\n            const { nodeUUID, outputIndex } = event.outputPath\r\n            const output = state.graph.nodes[nodeUUID].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedInput = null\r\n        state.selectedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedOutput) {\r\n        const { nodeUUID, outputIndex } = state.selectedOutput\r\n        state.graph.nodes[nodeUUID].outputs[outputIndex].selected = false\r\n    }\r\n    const { nodeUUID, outputIndex } = event.outputPath\r\n    state.graph.nodes[nodeUUID].outputs[outputIndex].selected = true\r\n    state.selectedOutput = event.outputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst doubleClickTimeout = (state: State, _: DoubleClickTimeout) => {\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst updateFinderOptions = (state: State): State => {\r\n    state.finder.options = Object.keys(state.operations)\r\n        .filter(item => fuzzyFind({ haystack: item, needle: state.finder.search }))\r\n    return state\r\n}\r\n\r\nexport const openFinder = (state: State) => {\r\n    state.finder.show = true\r\n    state.finder.search = ''\r\n    state.virtualKeyboard = {\r\n        show: true,\r\n        kind: VirtualKeyboardKind.ALPHABETIC\r\n    }\r\n    state.inputTarget = { kind: InputTargetKind.FINDER }\r\n    state.potentialDoubleClick = false\r\n    state = updateFinderOptions(state)\r\n    return state\r\n}\r\n\r\n\r\nconst doubleClick = (state: State, { pointer }: DoubleClick) => {\r\n    state = openFinder(state)\r\n    state.nodePlacementLocation = { x: pointer.x, y: pointer.y }\r\n    return { state: state, render: true }\r\n}\r\n\r\nconst closeFinder = (state: State) => {\r\n    state.finder.show = false\r\n    state.finder.search = ''\r\n    state.virtualKeyboard = {\r\n        show: false,\r\n        kind: VirtualKeyboardKind.ALPHABETIC\r\n    }\r\n    state.inputTarget = { kind: InputTargetKind.NONE }\r\n    return state\r\n}\r\n\r\nconst insertOperationFromFinder = (state: State, name: string, gnerateUUID: GenerateUUID): State => {\r\n    state = closeFinder(state)\r\n    const operation = state.operations[name]\r\n    const [x, y, _] = multiplyMatrixVector(state.camera, [state.nodePlacementLocation.x, state.nodePlacementLocation.y, 1])\r\n    const uuid = gnerateUUID()\r\n    state.graph.nodes[uuid] = {\r\n        uuid,\r\n        name,\r\n        inputs: operation.inputs.map(input => ({\r\n            name: input,\r\n            selected: false,\r\n            edgeIndices: []\r\n        })),\r\n        outputs: operation.outputs.map(output => ({\r\n            name: output,\r\n            selected: false,\r\n            edgeIndices: []\r\n        })),\r\n        x,\r\n        y,\r\n        body: operation.body !== undefined ? {\r\n            value: operation.body,\r\n            editing: false\r\n        } : undefined\r\n    }\r\n    state.graph.nodeOrder.push(uuid)\r\n    return state\r\n}\r\n\r\nconst keyDown = (state: State, { key }: KeyDown, generateUUID: GenerateUUID) => {\r\n    switch (state.inputTarget.kind) {\r\n        case InputTargetKind.FINDER:\r\n            switch (key) {\r\n                case 'Backspace':\r\n                    state.finder.search = state.finder.search.slice(0, -1)\r\n                    break\r\n                case 'Shift':\r\n                case 'Alt':\r\n                case 'Control':\r\n                case 'Meta':\r\n                case 'Tab':\r\n                    break\r\n                case 'Enter':\r\n                    if (state.finder.options.length > 0) {\r\n                        const name = state.finder.options[0]\r\n                        state = insertOperationFromFinder(state, name, generateUUID)\r\n                    } else {\r\n                        state = closeFinder(state)\r\n                    }\r\n                    break\r\n                case 'Escape':\r\n                    state = closeFinder(state)\r\n                    break\r\n                default:\r\n                    state.finder.search += key\r\n                    break\r\n            }\r\n            return { state: updateFinderOptions(state), render: true }\r\n        case InputTargetKind.NUMBER:\r\n            const node = state.graph.nodes[state.inputTarget.nodeUUID]\r\n            let value = node.body!.value.toString()\r\n            switch (key) {\r\n                case 'Backspace':\r\n                    let newValue = value.slice(0, -1)\r\n                    if (newValue === '') newValue = '0'\r\n                    node.body!.value = parseFloat(newValue)\r\n                    return { state, render: true }\r\n                case '1':\r\n                case '2':\r\n                case '3':\r\n                case '4':\r\n                case '5':\r\n                case '6':\r\n                case '7':\r\n                case '8':\r\n                case '9':\r\n                case '0':\r\n                    value += key\r\n                    node.body!.value = parseFloat(value)\r\n                    return { state, render: true }\r\n                case 'Enter':\r\n                    node.body!.editing = false\r\n                    state.virtualKeyboard = {\r\n                        show: false,\r\n                        kind: VirtualKeyboardKind.ALPHABETIC\r\n                    }\r\n                    state.inputTarget = {\r\n                        kind: InputTargetKind.NONE\r\n                    }\r\n                    return { state, render: true }\r\n                default:\r\n                    return { state }\r\n            }\r\n        case InputTargetKind.NONE:\r\n            switch (key) {\r\n                case 'f':\r\n                    return { state: openFinder(state), render: true }\r\n                case 'd':\r\n                    const uuid = state.selectedNode\r\n                    if (uuid === null) return { state }\r\n                    const node = state.graph.nodes[uuid]\r\n                    const edgeIndices: number[] = []\r\n                    node.inputs.forEach(input => {\r\n                        input.edgeIndices.forEach(edgeIndex => edgeIndices.push(edgeIndex))\r\n                    })\r\n                    node.outputs.forEach(input => {\r\n                        input.edgeIndices.forEach(edgeIndex => edgeIndices.push(edgeIndex))\r\n                    })\r\n                    for (const edgeIndex of edgeIndices) {\r\n                        const edge = state.graph.edges[edgeIndex]\r\n                        {\r\n                            const { nodeUUID, inputIndex } = edge.input\r\n                            if (nodeUUID !== uuid) {\r\n                                const input = state.graph.nodes[nodeUUID].inputs[inputIndex]\r\n                                input.edgeIndices = input.edgeIndices.filter((_, i) => i !== edgeIndex)\r\n                            }\r\n                        }\r\n                        {\r\n                            const { nodeUUID, outputIndex } = edge.output\r\n                            if (nodeUUID !== uuid) {\r\n                                const output = state.graph.nodes[nodeUUID].outputs[outputIndex]\r\n                                output.edgeIndices = output.edgeIndices.filter((_, i) => i !== edgeIndex)\r\n                            }\r\n                        }\r\n                    }\r\n                    state.graph.edges = state.graph.edges.filter((_, i) => !edgeIndices.includes(i))\r\n                    delete state.graph.nodes[uuid]\r\n                    state.graph.nodeOrder = state.graph.nodeOrder.filter(n => n !== uuid)\r\n                    state.selectedNode = null\r\n                    return { state, render: true }\r\n                default:\r\n                    return { state }\r\n            }\r\n    }\r\n}\r\n\r\nconst virtualKeyDown = (state: State, { key }: VirtualKeyDown, generateUUID: GenerateUUID) => {\r\n    switch (state.inputTarget.kind) {\r\n        case InputTargetKind.FINDER:\r\n            switch (key) {\r\n                case 'del':\r\n                    state.finder.search = state.finder.search.slice(0, -1)\r\n                    break\r\n                case 'sft':\r\n                    break\r\n                case 'space':\r\n                    state.finder.search += ' '\r\n                    break\r\n                case 'ret':\r\n                    if (state.finder.options.length > 0) {\r\n                        const name = state.finder.options[0]\r\n                        state = insertOperationFromFinder(state, name, generateUUID)\r\n                    } else {\r\n                        state = closeFinder(state)\r\n                    }\r\n                    break\r\n                default:\r\n                    state.finder.search += key\r\n                    break\r\n            }\r\n            return { state: updateFinderOptions(state), render: true }\r\n        case InputTargetKind.NUMBER:\r\n            const node = state.graph.nodes[state.inputTarget.nodeUUID]\r\n            let value = node.body!.value.toString()\r\n            switch (key) {\r\n                case 'del':\r\n                    let newValue = value.slice(0, -1)\r\n                    if (newValue === '') newValue = '0'\r\n                    node.body!.value = parseFloat(newValue)\r\n                    return { state, render: true }\r\n                case '1':\r\n                case '2':\r\n                case '3':\r\n                case '4':\r\n                case '5':\r\n                case '6':\r\n                case '7':\r\n                case '8':\r\n                case '9':\r\n                case '0':\r\n                case '.':\r\n                    value += key\r\n                    node.body!.value = parseFloat(value)\r\n                    return { state, render: true }\r\n                case 'ret':\r\n                    node.body!.editing = false\r\n                    state.virtualKeyboard = {\r\n                        show: false,\r\n                        kind: VirtualKeyboardKind.ALPHABETIC\r\n                    }\r\n                    state.inputTarget = {\r\n                        kind: InputTargetKind.NONE\r\n                    }\r\n                    return { state, render: true }\r\n                default:\r\n                    return { state }\r\n            }\r\n        case InputTargetKind.NONE:\r\n            return { state }\r\n    }\r\n}\r\n\r\nconst clickedFinderOption = (state: State, { option }: ClickedFinderOption, generateUUID: GenerateUUID) => ({\r\n    state: insertOperationFromFinder(state, option, generateUUID),\r\n    render: true\r\n})\r\n\r\nexport const openNumericKeyboard = (state: State, nodeUUID: UUID): State => {\r\n    state.virtualKeyboard = {\r\n        show: true,\r\n        kind: VirtualKeyboardKind.NUMERIC\r\n    }\r\n    state.inputTarget = {\r\n        kind: InputTargetKind.NUMBER,\r\n        nodeUUID\r\n    }\r\n    state.graph.nodes[nodeUUID].body!.editing = true\r\n    return state\r\n}\r\n\r\nconst clickedNumber = (state: State, { nodeUUID }: ClickedNumber) => {\r\n    if (state.inputTarget.kind === InputTargetKind.NUMBER) {\r\n        state.graph.nodes[state.inputTarget.nodeUUID].body!.editing = false\r\n    }\r\n    state = closeFinder(state)\r\n    state = openNumericKeyboard(state, nodeUUID)\r\n    return {\r\n        state,\r\n        render: true\r\n    }\r\n}\r\n\r\nconst clickedBackground = (state: State) => {\r\n    if (state.inputTarget.kind === InputTargetKind.NUMBER) {\r\n        state.graph.nodes[state.inputTarget.nodeUUID].body!.editing = false\r\n    }\r\n    return {\r\n        state: closeFinder(state),\r\n        render: true\r\n    }\r\n}\r\n\r\nexport const update = (generateUUID: GenerateUUID, state: State, event: AppEvent): UpdateResult<State, AppEvent> => {\r\n    switch (event.kind) {\r\n        case EventKind.POINTER_DOWN: return pointerDown(state, event)\r\n        case EventKind.POINTER_UP: return pointerUp(state, event)\r\n        case EventKind.POINTER_MOVE: return pointerMove(state, event)\r\n        case EventKind.CLICKED_NODE: return clickedNode(state, event)\r\n        case EventKind.WHEEL: return wheel(state, event)\r\n        case EventKind.CLICKED_INPUT: return clickedInput(state, event)\r\n        case EventKind.CLICKED_OUTPUT: return clickedOutput(state, event)\r\n        case EventKind.DOUBLE_CLICK_TIMEOUT: return doubleClickTimeout(state, event)\r\n        case EventKind.DOUBLE_CLICK: return doubleClick(state, event)\r\n        case EventKind.KEYDOWN: return keyDown(state, event, generateUUID)\r\n        case EventKind.VIRTUAL_KEYDOWN: return virtualKeyDown(state, event, generateUUID)\r\n        case EventKind.CLICKED_FINDER_OPTION: return clickedFinderOption(state, event, generateUUID)\r\n        case EventKind.CLICKED_NUMBER: return clickedNumber(state, event)\r\n        case EventKind.CLICKED_BACKGROUND: return clickedBackground(state)\r\n    }\r\n}\r\n","import { Renderer, Pointer, WorldSpace } from \".\"\r\n\r\nconst inWorldSpace = ({ x0, y0, x1, y1 }: WorldSpace, pointer: Pointer) =>\r\n    x0 <= pointer.x && pointer.x <= x1 &&\r\n    y0 <= pointer.y && pointer.y <= y1\r\n\r\nexport const pointerDown = <AppEvent, R extends Renderer<AppEvent>>(renderer: R, pointer: Pointer): R => {\r\n    for (let i = renderer.clickHandlers.length; i > 0; --i) {\r\n        for (const { onClick, worldSpace } of renderer.clickHandlers[i - 1]) {\r\n            if (inWorldSpace(worldSpace, pointer)) {\r\n                renderer.dispatch(onClick)\r\n                return renderer\r\n            }\r\n        }\r\n    }\r\n    return renderer\r\n}\r\n","import { Connections } from \"./gather_connections\"\r\nimport { Layers } from \"./layer_geometry\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\nimport { WorldSpace } from \".\"\r\n\r\nexport interface Triangles {\r\n    vertices: number[]\r\n    vertexIndices: number[]\r\n    colors: number[]\r\n    textureIndex: number\r\n    textureCoordinates: number[]\r\n    cameraIndex: number[]\r\n}\r\n\r\nexport interface Lines {\r\n    vertices: number[]\r\n    colors: number[]\r\n}\r\n\r\n\r\nexport interface Batch {\r\n    triangles: Triangles\r\n    lines: Lines\r\n}\r\n\r\nconst newBatch = (textureIndex: number): Batch => ({\r\n    triangles: {\r\n        vertices: [],\r\n        colors: [],\r\n        vertexIndices: [],\r\n        textureIndex,\r\n        textureCoordinates: [],\r\n        cameraIndex: []\r\n    },\r\n    lines: {\r\n        vertices: [],\r\n        colors: []\r\n    }\r\n})\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nexport function* cubicBezier(ts: number[], from: WorldSpace, to: WorldSpace, offset: number): Generator<number> {\r\n    const p0x = (from.x0 + from.x1) / 2\r\n    const p0y = (from.y0 + from.y1) / 2\r\n    const p1x = p0x + offset\r\n    const p1y = p0y\r\n    const p3x = (to.x0 + to.x1) / 2\r\n    const p3y = (to.y0 + to.y1) / 2\r\n    const p2x = p3x - offset\r\n    const p2y = p3y\r\n    let lastX = 0\r\n    let lastY = 0\r\n    let first = true\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (first) {\r\n            yield x\r\n            yield y\r\n            first = false\r\n        } else {\r\n            yield lastX\r\n            yield lastY\r\n        }\r\n        yield x\r\n        yield y\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n}\r\n\r\n\r\nexport const batchGeometry = (layers: Layers, connections: Connections, idToWorldSpace: IdToWorldSpace): Batch[] => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const batches: Batch[] = []\r\n    let batch = newBatch(0)\r\n    let batchTextureIndex = batch.triangles.textureIndex.toString()\r\n    layers.forEach((layer, z) => {\r\n        for (const [textureIndex, geometries] of Object.entries(layer)) {\r\n            if (batchTextureIndex !== textureIndex) {\r\n                if (batch.triangles.vertices.length !== 0) batches.push(batch)\r\n                batch = newBatch(parseInt(textureIndex))\r\n                batchTextureIndex = textureIndex\r\n            }\r\n            for (const geometry of geometries) {\r\n                const offset = batch.triangles.vertices.length / 2\r\n                batch.triangles.vertices.push(...geometry.vertices)\r\n                batch.triangles.colors.push(...geometry.colors)\r\n                for (const index of geometry.vertexIndices) {\r\n                    batch.triangles.vertexIndices.push(index + offset)\r\n                }\r\n                batch.triangles.textureCoordinates.push(...geometry.textureCoordinates)\r\n                batch.triangles.cameraIndex.push(...geometry.cameraIndex)\r\n            }\r\n        }\r\n        if (connections.length > z) {\r\n            for (const { connections: cs, scale } of connections[z]) {\r\n                const offset = 50 * scale\r\n                for (const { from, to, color } of cs) {\r\n                    for (const p of cubicBezier(ts, idToWorldSpace[from], idToWorldSpace[to], offset)) {\r\n                        batch.lines.vertices.push(p)\r\n                    }\r\n                    const { red, green, blue, alpha } = color\r\n                    for (let i = 0; i < samples * 2; ++i) batch.lines.colors.push(red, green, blue, alpha)\r\n                }\r\n            }\r\n            if (batch.lines.vertices.length !== 0) {\r\n                batches.push(batch)\r\n                batch = newBatch(0)\r\n            }\r\n        }\r\n    })\r\n    if (batch.triangles.vertices.length !== 0) batches.push(batch)\r\n    return batches\r\n}","import { WorldSpace } from \".\"\r\nimport { identity, inverse, Matrix3x3, multiplyMatrixVector } from \"../linear_algebra/matrix3x3\"\r\n\r\nexport interface CameraStack {\r\n    cameras: Matrix3x3[]\r\n    stack: number[]\r\n    transform: Matrix3x3\r\n}\r\n\r\nexport const initCameraStack = (): CameraStack => {\r\n    const camera = identity()\r\n    return {\r\n        cameras: [identity()],\r\n        stack: [0],\r\n        transform: inverse(camera)\r\n    }\r\n}\r\n\r\nexport const pushCamera = (cameraStack: CameraStack, camera: Matrix3x3): void => {\r\n    const index = cameraStack.cameras.length\r\n    cameraStack.cameras.push(camera)\r\n    cameraStack.stack.push(index)\r\n    cameraStack.transform = inverse(camera)\r\n}\r\n\r\nexport const activeCamera = (cameraStack: CameraStack): number => cameraStack.stack.slice(-1)[0]\r\n\r\nexport const popCamera = (cameraStack: CameraStack): void => {\r\n    cameraStack.stack.pop()\r\n    cameraStack.transform = inverse(cameraStack.cameras[activeCamera(cameraStack)])\r\n}\r\n\r\nexport const transformWorldSpace = (cameraStack: CameraStack, worldSpace: WorldSpace): WorldSpace => {\r\n    const [x0, y0, _0] = multiplyMatrixVector(cameraStack.transform, [worldSpace.x0, worldSpace.y0, 1])\r\n    const [x1, y1, _1] = multiplyMatrixVector(cameraStack.transform, [worldSpace.x1, worldSpace.y1, 1])\r\n    return { x0, y0, x1, y1 }\r\n}\r\n","import { Constraints, Entry, Geometry, geometry, layout, Layout, MeasureText, Offset, Size, UI, UIKind, WorldSpace, traverse } from \".\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface CenterLayout {\r\n    readonly size: Size\r\n    readonly child: Layout\r\n}\r\n\r\nexport interface CenterGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly child: Geometry\r\n}\r\n\r\nexport interface Center<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.CENTER\r\n    readonly child: UI<AppEvent>\r\n}\r\n\r\nexport const center = <AppEvent>(child: UI<AppEvent>): Center<AppEvent> => {\r\n    return {\r\n        kind: UIKind.CENTER,\r\n        child\r\n    }\r\n}\r\n\r\nexport const centerLayout = <AppEvent>(ui: Center<AppEvent>, constraints: Constraints, measureText: MeasureText): CenterLayout => {\r\n    const childLayout = layout(ui.child, constraints, measureText)\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, child: childLayout }\r\n}\r\n\r\nexport const centerGeometry = <AppEvent>(ui: Center<AppEvent>, layout: CenterLayout, offset: Offset, cameraStack: CameraStack): CenterGeometry => {\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    const childLayout = layout.child\r\n    const childOffset = {\r\n        x: offset.x + layout.size.width / 2 - childLayout.size.width / 2,\r\n        y: offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n    }\r\n    const childGeometry = geometry(ui.child, childLayout, childOffset, cameraStack)\r\n    return {\r\n        worldSpace,\r\n        child: childGeometry\r\n    }\r\n}\r\n\r\nexport function* centerTraverse<AppEvent>(ui: Center<AppEvent>, layout: CenterLayout, geometry: CenterGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield* traverse(ui.child, layout.child, geometry.child, z + 1)\r\n}","export enum MainAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END,\r\n    SPACE_EVENLY,\r\n    SPACE_BETWEEN\r\n}\r\n\r\nexport enum CrossAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END\r\n}","import { Constraints, Entry, geometry, Geometry, Layout, layout, MeasureText, Offset, Size, traverse, UI, UIKind, WorldSpace } from \".\"\r\nimport { MainAxisAlignment, CrossAxisAlignment } from \"./alignment\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface ColumnLayout {\r\n    readonly size: Size\r\n    readonly totalChildHeight: number\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface ColumnGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Column<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.COLUMN,\r\n    readonly mainAxisAlignment: MainAxisAlignment\r\n    readonly crossAxisAlignment: CrossAxisAlignment\r\n    readonly children: UI<AppEvent>[]\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\nexport function column<AppEvent>(children: UI<AppEvent>[]): Column<AppEvent>\r\nexport function column<AppEvent>(properties: Properties, children: UI<AppEvent>[]): Column<AppEvent>\r\nexport function column<AppEvent>(...args: any[]): Column<AppEvent> {\r\n    const [properties, children]: [Properties, UI<AppEvent>[]] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.COLUMN,\r\n        mainAxisAlignment: properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        crossAxisAlignment: properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    }\r\n}\r\n\r\nexport const columnLayout = <AppEvent>(ui: Column<AppEvent>, constraints: Constraints, measureText: MeasureText): ColumnLayout => {\r\n    const initialChildren: Layout[] = []\r\n    const initial = {\r\n        children: initialChildren,\r\n        width: 0,\r\n        totalChildHeight: 0\r\n    }\r\n    const result = ui.children.reduce((acc, child) => {\r\n        const childLayout = layout(child, constraints, measureText)\r\n        acc.children.push(childLayout)\r\n        acc.totalChildHeight += childLayout.size.height\r\n        acc.width = Math.max(acc.width, childLayout.size.width)\r\n        return acc\r\n    }, initial)\r\n    const { children, width, totalChildHeight } = result\r\n    const height = ui.mainAxisAlignment == MainAxisAlignment.START ? totalChildHeight : constraints.maxHeight\r\n    return {\r\n        size: { width, height },\r\n        totalChildHeight,\r\n        children\r\n    }\r\n}\r\n\r\nexport const columnGeometry = <AppEvent>(ui: Column<AppEvent>, layout: ColumnLayout, offset: Offset, cameraStack: CameraStack): ColumnGeometry => {\r\n    const initialChildren: Geometry[] = []\r\n    const freeSpaceY = layout.size.height - layout.totalChildHeight\r\n    const initial = {\r\n        children: initialChildren,\r\n        y: (() => {\r\n            switch (ui.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return offset.y\r\n                case MainAxisAlignment.CENTER: return offset.y + freeSpaceY / 2\r\n                case MainAxisAlignment.END: return offset.y + freeSpaceY\r\n                case MainAxisAlignment.SPACE_EVENLY: return offset.y + freeSpaceY / (ui.children.length + 1)\r\n                case MainAxisAlignment.SPACE_BETWEEN: return offset.y\r\n            }\r\n        })(),\r\n    }\r\n    const addYStart = (childLayout: Layout) => childLayout.size.height\r\n    const addYCenter = (childLayout: Layout) => childLayout.size.height\r\n    const addYEnd = (childLayout: Layout) => childLayout.size.height\r\n    const addYSpaceEvenly = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (ui.children.length + 1)\r\n    const addYSpaceBetween = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (ui.children.length - 1)\r\n    const addY = (() => {\r\n        switch (ui.mainAxisAlignment) {\r\n            case MainAxisAlignment.START: return addYStart\r\n            case MainAxisAlignment.CENTER: return addYCenter\r\n            case MainAxisAlignment.END: return addYEnd\r\n            case MainAxisAlignment.SPACE_EVENLY: return addYSpaceEvenly\r\n            case MainAxisAlignment.SPACE_BETWEEN: return addYSpaceBetween\r\n        }\r\n    })()\r\n    const offsetXStart = (_: Layout) => offset.x\r\n    const offsetXCenter = (childLayout: Layout) => offset.x + layout.size.width / 2 - childLayout.size.width / 2\r\n    const offsetXEnd = (childLayout: Layout) => offset.x + layout.size.width - childLayout.size.width\r\n    const offsetX = (() => {\r\n        switch (ui.crossAxisAlignment) {\r\n            case CrossAxisAlignment.START: return offsetXStart\r\n            case CrossAxisAlignment.CENTER: return offsetXCenter\r\n            case CrossAxisAlignment.END: return offsetXEnd\r\n        }\r\n    })()\r\n    const result = ui.children.reduce((acc, child, i) => {\r\n        const childLayout = layout.children[i]\r\n        const childOffset = { x: offsetX(childLayout), y: acc.y }\r\n        const childGeometry = geometry(child, childLayout, childOffset, cameraStack)\r\n        acc.children.push(childGeometry)\r\n        acc.y += addY(childLayout)\r\n        return acc\r\n    }, initial)\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height\r\n    })\r\n    return { worldSpace, children: result.children }\r\n}\r\n\r\nexport function* columnTraverse<AppEvent>(ui: Column<AppEvent>, layout: ColumnLayout, geometry: ColumnGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    const nextZ = z + 1\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        yield* traverse(child, layout.children[i], geometry.children[i], nextZ)\r\n        i += 1\r\n    }\r\n}","import { UI, Size, Layout, Constraints, MeasureText, UIKind, layout, Color, Offset, WorldSpace, Geometry, geometry, Entry, traverse, } from '.'\r\nimport { CameraStack, transformWorldSpace, activeCamera } from './camera_stack'\r\n\r\nexport interface ContainerLayout {\r\n    readonly size: Size\r\n    readonly child?: Layout\r\n}\r\n\r\nexport interface ContainerGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly vertices: number[]\r\n    readonly colors: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly child?: Geometry\r\n}\r\n\r\nexport interface Padding {\r\n    readonly top: number\r\n    readonly right: number\r\n    readonly bottom: number\r\n    readonly left: number\r\n}\r\n\r\nexport interface Container<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.CONTAINER,\r\n    readonly padding: Padding\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly child?: UI<AppEvent>\r\n}\r\n\r\ninterface Properties<AppEvent> {\r\n    readonly padding?: number\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly onClick?: AppEvent\r\n    readonly id?: string\r\n}\r\n\r\nconst transformPadding = (padding?: number): Padding => {\r\n    if (padding) return { top: padding, right: padding, bottom: padding, left: padding }\r\n    return { top: 0, right: 0, bottom: 0, left: 0 }\r\n}\r\n\r\nexport const container = <AppEvent>({ padding, width, height, color, x, y, onClick, id }: Properties<AppEvent>, child?: UI<AppEvent>): Container<AppEvent> => {\r\n    return {\r\n        kind: UIKind.CONTAINER,\r\n        padding: transformPadding(padding),\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        color,\r\n        onClick,\r\n        id,\r\n        child\r\n    }\r\n}\r\n\r\nexport const containerLayout = <AppEvent>(ui: Container<AppEvent>, constraints: Constraints, measureText: MeasureText): ContainerLayout => {\r\n    const { top, right, bottom, left } = ui.padding\r\n    if (ui.child) {\r\n        const childLayout = layout(ui.child, constraints, measureText)\r\n        const width = ui.width ?? childLayout.size.width + left + right\r\n        const height = ui.height ?? childLayout.size.height + top + bottom\r\n        return {\r\n            size: { width, height },\r\n            child: childLayout\r\n        }\r\n    }\r\n    const width = (() => {\r\n        if (ui.width) return ui.width + left + right\r\n        return constraints.maxWidth\r\n    })()\r\n    const height = (() => {\r\n        if (ui.height) return ui.height + top + bottom\r\n        return constraints.maxHeight\r\n    })()\r\n    return { size: { width, height } }\r\n}\r\n\r\nexport const containerGeometry = <AppEvent>(ui: Container<AppEvent>, layout: ContainerLayout, offset: Offset, cameraStack: CameraStack): ContainerGeometry => {\r\n    const x0 = offset.x + (ui.x ?? 0)\r\n    const x1 = x0 + layout.size.width\r\n    const y0 = offset.y + (ui.y ?? 0)\r\n    const y1 = y0 + layout.size.height\r\n    const worldSpace = transformWorldSpace(cameraStack, { x0, x1, y0, y1 })\r\n    const childGeometry = (() => {\r\n        if (ui.child) {\r\n            const childLayout = layout.child!\r\n            const childOffset = {\r\n                x: x0 + ui.padding.left,\r\n                y: y0 + ui.padding.top\r\n            }\r\n            return geometry(ui.child, childLayout, childOffset, cameraStack)\r\n        }\r\n        return undefined\r\n    })()\r\n    if (ui.color) {\r\n        const { red, green, blue, alpha } = ui.color\r\n        return {\r\n            worldSpace,\r\n            vertices: [\r\n                x0, y0,\r\n                x0, y1,\r\n                x1, y0,\r\n                x1, y1,\r\n            ],\r\n            colors: [\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n            ],\r\n            vertexIndices: [\r\n                0, 1, 2,\r\n                1, 2, 3\r\n            ],\r\n            cameraIndex: Array(4).fill(activeCamera(cameraStack)),\r\n            textureIndex: 0,\r\n            textureCoordinates: Array(8).fill(0),\r\n            child: childGeometry\r\n        }\r\n    }\r\n    return {\r\n        worldSpace,\r\n        vertices: [],\r\n        colors: [],\r\n        vertexIndices: [],\r\n        cameraIndex: [],\r\n        textureIndex: 0,\r\n        textureCoordinates: [],\r\n        child: childGeometry\r\n    }\r\n}\r\n\r\nexport function* containerTraverse<AppEvent>(ui: Container<AppEvent>, layout: ContainerLayout, geometry: ContainerGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    if (ui.child) {\r\n        const childLayout = layout.child!\r\n        const childGeometry = geometry.child!\r\n        yield* traverse(ui.child, childLayout, childGeometry, z + 1)\r\n    }\r\n}","import { Constraints, Layout, MeasureText, Size, UI, UIKind, layout, Geometry, Offset, geometry, WorldSpace, Entry, traverse } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"./alignment\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface RowLayout {\r\n    readonly size: Size\r\n    readonly totalChildWidth: number\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface RowGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Row<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.ROW,\r\n    readonly mainAxisAlignment: MainAxisAlignment\r\n    readonly crossAxisAlignment: CrossAxisAlignment\r\n    readonly children: UI<AppEvent>[]\r\n}\r\n\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\nexport function row<AppEvent>(children: UI<AppEvent>[]): Row<AppEvent>\r\nexport function row<AppEvent>(properties: Properties, children: UI<AppEvent>[]): Row<AppEvent>\r\nexport function row<AppEvent>(...args: any[]): Row<AppEvent> {\r\n    const [properties, children]: [Properties, UI<AppEvent>[]] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.ROW,\r\n        mainAxisAlignment: properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        crossAxisAlignment: properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    }\r\n}\r\n\r\nexport const rowLayout = <AppEvent>(ui: Row<AppEvent>, constraints: Constraints, measureText: MeasureText): RowLayout => {\r\n    const initialChildren: Layout[] = []\r\n    const initial = {\r\n        children: initialChildren,\r\n        totalChildWidth: 0,\r\n        height: 0\r\n    }\r\n    const result = ui.children.reduce((acc, child) => {\r\n        const childLayout = layout(child, constraints, measureText)\r\n        acc.children.push(childLayout)\r\n        acc.totalChildWidth += childLayout.size.width\r\n        acc.height = Math.max(acc.height, childLayout.size.height)\r\n        return acc\r\n    }, initial)\r\n    const { children, totalChildWidth, height } = result\r\n    const width = ui.mainAxisAlignment == MainAxisAlignment.START ? totalChildWidth : constraints.maxWidth\r\n    return { size: { width, height }, totalChildWidth, children }\r\n}\r\n\r\nexport const rowGeometry = <AppEvent>(ui: Row<AppEvent>, layout: RowLayout, offset: Offset, cameraStack: CameraStack): RowGeometry => {\r\n    const initialChildren: Geometry[] = []\r\n    const freeSpaceX = layout.size.width - layout.totalChildWidth\r\n    const initial = {\r\n        children: initialChildren,\r\n        x: (() => {\r\n            switch (ui.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return offset.x\r\n                case MainAxisAlignment.CENTER: return offset.x + freeSpaceX / 2\r\n                case MainAxisAlignment.END: return offset.x + freeSpaceX\r\n                case MainAxisAlignment.SPACE_EVENLY: return offset.x + freeSpaceX / (ui.children.length + 1)\r\n                case MainAxisAlignment.SPACE_BETWEEN: return offset.x\r\n            }\r\n        })(),\r\n    }\r\n    const addXStart = (childLayout: Layout) => childLayout.size.width\r\n    const addXCenter = (childLayout: Layout) => childLayout.size.width\r\n    const addXEnd = (childLayout: Layout) => childLayout.size.width\r\n    const addXSpaceEvenly = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (ui.children.length + 1)\r\n    const addXSpaceBetween = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (ui.children.length - 1)\r\n    const addX = (() => {\r\n        switch (ui.mainAxisAlignment) {\r\n            case MainAxisAlignment.START: return addXStart\r\n            case MainAxisAlignment.CENTER: return addXCenter\r\n            case MainAxisAlignment.END: return addXEnd\r\n            case MainAxisAlignment.SPACE_EVENLY: return addXSpaceEvenly\r\n            case MainAxisAlignment.SPACE_BETWEEN: return addXSpaceBetween\r\n        }\r\n    })()\r\n    const offsetYStart = (_: Layout) => offset.y\r\n    const offsetYCenter = (childLayout: Layout) => offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n    const offsetYEnd = (childLayout: Layout) => offset.y + layout.size.height - childLayout.size.height\r\n    const offsetY = (() => {\r\n        switch (ui.crossAxisAlignment) {\r\n            case CrossAxisAlignment.START: return offsetYStart\r\n            case CrossAxisAlignment.CENTER: return offsetYCenter\r\n            case CrossAxisAlignment.END: return offsetYEnd\r\n        }\r\n    })()\r\n    const result = ui.children.reduce((acc, child, i) => {\r\n        const childLayout = layout.children[i]\r\n        const childOffset = { x: acc.x, y: offsetY(childLayout) }\r\n        const childGeometry = geometry(child, childLayout, childOffset, cameraStack)\r\n        acc.children.push(childGeometry)\r\n        acc.x += addX(childLayout)\r\n        return acc\r\n    }, initial)\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    return { worldSpace, children: result.children }\r\n}\r\n\r\nexport function* rowTraverse<AppEvent>(ui: Row<AppEvent>, layout: RowLayout, geometry: RowGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    const nextZ = z + 1\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        yield* traverse(child, layout.children[i], geometry.children[i], nextZ)\r\n        i += 1\r\n    }\r\n}","import { Connection, Constraints, Entry, geometry, Geometry, layout, Layout, MeasureText, Offset, Size, traverse, UI, UIKind, WorldSpace } from \".\"\r\nimport { Matrix3x3 } from \"../linear_algebra/matrix3x3\"\r\nimport { CameraStack, popCamera, pushCamera, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface SceneLayout {\r\n    readonly size: Size\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface SceneGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Scene<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.SCENE\r\n    readonly camera: Matrix3x3\r\n    readonly children: UI<AppEvent>[]\r\n    readonly connections: Connection[]\r\n}\r\n\r\nexport interface Properties<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly camera: Matrix3x3\r\n    readonly children: UI<AppEvent>[]\r\n    readonly connections?: Connection[]\r\n}\r\n\r\nexport const scene = <AppEvent>({ id, onClick, camera, children, connections }: Properties<AppEvent>): Scene<AppEvent> => ({\r\n    id, onClick, kind: UIKind.SCENE, camera, children, connections: connections ?? []\r\n})\r\n\r\nexport const sceneLayout = <AppEvent>(ui: Scene<AppEvent>, constraints: Constraints, measureText: MeasureText): SceneLayout => {\r\n    const children = ui.children.map(c => layout(c, constraints, measureText))\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, children }\r\n}\r\n\r\nexport const sceneGeometry = <AppEvent>(ui: Scene<AppEvent>, layout: SceneLayout, offset: Offset, cameraStack: CameraStack): SceneGeometry => {\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height\r\n    })\r\n    pushCamera(cameraStack, ui.camera)\r\n    const children = ui.children.map((c, i) => geometry(c, layout.children[i], offset, cameraStack))\r\n    popCamera(cameraStack)\r\n    return { worldSpace, children }\r\n}\r\n\r\nexport function* sceneTraverse<AppEvent>(ui: Scene<AppEvent>, layout: SceneLayout, geometry: SceneGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        for (const entry of traverse(child, layout.children[i], geometry.children[i], z)) {\r\n            yield entry\r\n            z = Math.max(z, entry.z)\r\n        }\r\n        i++\r\n        z++\r\n    }\r\n}\r\n","import { Constraints, Geometry, layout, Layout, MeasureText, Offset, Size, UI, UIKind, WorldSpace, geometry, Entry, traverse } from \".\";\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\";\r\n\r\nexport interface StackLayout {\r\n    readonly size: Size\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface StackGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Stack<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    kind: UIKind.STACK\r\n    children: UI<AppEvent>[]\r\n}\r\n\r\nexport const stack = <AppEvent>(children: UI<AppEvent>[]): Stack<AppEvent> => ({\r\n    kind: UIKind.STACK,\r\n    children\r\n})\r\n\r\nexport const stackLayout = <AppEvent>(ui: Stack<AppEvent>, constraints: Constraints, measureText: MeasureText): StackLayout => {\r\n    const children = ui.children.map(c => layout(c, constraints, measureText))\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, children }\r\n}\r\n\r\nexport const stackGeometry = <AppEvent>(ui: Stack<AppEvent>, layout: StackLayout, offset: Offset, cameraStack: CameraStack): StackGeometry => {\r\n    const children = ui.children.map((c, i) => geometry(c, layout.children[i], offset, cameraStack))\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    return { worldSpace, children }\r\n}\r\n\r\nexport function* stackTraverse<AppEvent>(ui: Stack<AppEvent>, layout: StackLayout, geometry: StackGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        for (const entry of traverse(child, layout.children[i], geometry.children[i], z)) {\r\n            yield entry\r\n            z = Math.max(z, entry.z)\r\n        }\r\n        i += 1\r\n        z += 1\r\n    }\r\n}","import { Color, Constraints, Entry, Font, MeasureText, Offset, Size, TextMeasurements, UIKind, WorldSpace } from \".\";\r\nimport { activeCamera, CameraStack, transformWorldSpace } from \"./camera_stack\";\r\n\r\nexport interface TextLayout {\r\n    readonly measurements: TextMeasurements\r\n    readonly size: Size\r\n}\r\n\r\nexport interface TextGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly colors: number[]\r\n    readonly vertices: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n}\r\n\r\nexport interface Text<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.TEXT\r\n    readonly font: Font\r\n    readonly color: Color\r\n    readonly str: string\r\n}\r\n\r\ninterface Properties {\r\n    readonly font?: string\r\n    readonly size?: number\r\n    readonly color?: Color\r\n}\r\n\r\nexport function text<AppEvent>(str: string): Text<AppEvent>\r\nexport function text<AppEvent>(properties: Properties, str: string): Text<AppEvent>\r\nexport function text<AppEvent>(...args: any[]): Text<AppEvent> {\r\n    const [properties, str]: [Properties, string] = (() =>\r\n        typeof args[0] == 'string' ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.TEXT,\r\n        font: {\r\n            family: properties.font ?? \"monospace\",\r\n            size: properties.size ?? 14\r\n        },\r\n        color: properties.color ?? { red: 255, green: 255, blue: 255, alpha: 255 },\r\n        str\r\n    }\r\n}\r\n\r\nexport const textLayout = <AppEvent>({ font, str }: Text<AppEvent>, _: Constraints, measureText: MeasureText): TextLayout => {\r\n    const measurements = measureText(font, str)\r\n    const width = measurements.widths.reduce((acc, width) => acc + width)\r\n    const size = { width, height: font.size }\r\n    return { measurements, size }\r\n}\r\n\r\nconst vertices = (widths: number[], height: number, offset: Offset) => {\r\n    const result = []\r\n    let offsetX = offset.x\r\n    const y0 = offset.y\r\n    const y1 = offset.y + height\r\n    for (const width of widths) {\r\n        const x0 = offsetX\r\n        const x1 = offsetX + width\r\n        result.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        )\r\n        offsetX += width\r\n    }\r\n    return result\r\n}\r\n\r\nconst colors = (n: number, { red, green, blue, alpha }: Color) => {\r\n    const result = []\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n        )\r\n    }\r\n    return result\r\n}\r\n\r\nconst vertexIndices = (n: number) => {\r\n    const result = []\r\n    let offset = 0\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            offset, offset + 1, offset + 2,\r\n            offset + 1, offset + 2, offset + 3\r\n        )\r\n        offset += 4\r\n    }\r\n    return result\r\n}\r\n\r\nexport const textGeometry = <AppEvent>(ui: Text<AppEvent>, layout: TextLayout, offset: Offset, cameraStack: CameraStack): TextGeometry => {\r\n    const textLayout = layout as TextLayout\r\n    const { measurements } = textLayout\r\n    const { textureIndex, textureCoordinates, widths } = measurements\r\n    return {\r\n        worldSpace: transformWorldSpace(cameraStack, {\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        }),\r\n        textureIndex,\r\n        textureCoordinates: textureCoordinates.flat(),\r\n        colors: colors(widths.length, ui.color),\r\n        vertices: vertices(widths, ui.font.size, offset),\r\n        vertexIndices: vertexIndices(widths.length),\r\n        cameraIndex: Array(widths.length * 4).fill(activeCamera(cameraStack))\r\n    }\r\n}\r\n\r\nexport function* textTraverse<AppEvent>(ui: Text<AppEvent>, layout: TextLayout, geometry: TextGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n}","import { Center, CenterLayout, centerLayout, CenterGeometry, centerGeometry, centerTraverse } from './center'\r\nimport { Column, ColumnLayout, columnLayout, ColumnGeometry, columnGeometry, columnTraverse } from './column'\r\nimport { Container, ContainerLayout, containerLayout, ContainerGeometry, containerGeometry, containerTraverse } from './container'\r\nimport { Row, RowLayout, rowLayout, RowGeometry, rowGeometry, rowTraverse } from './row'\r\nimport { Scene, SceneLayout, sceneLayout, SceneGeometry, sceneGeometry, sceneTraverse } from './scene'\r\nimport { Stack, StackLayout, stackLayout, StackGeometry, stackGeometry, stackTraverse } from './stack'\r\nimport { Text, TextLayout, textLayout, TextGeometry, textGeometry, textTraverse } from './text'\r\nimport { CameraStack } from './camera_stack'\r\nimport { Matrix3x3 } from '../linear_algebra/matrix3x3'\r\nimport { Batch } from './batch_geometry'\r\nimport { ClickHandlers } from './gather_on_click_handlers'\r\n\r\nexport { center } from './center'\r\nexport { column } from './column'\r\nexport { container } from './container'\r\nexport { row } from './row'\r\nexport { scene } from './scene'\r\nexport { stack } from './stack'\r\nexport { text } from './text'\r\n\r\nexport enum UIKind {\r\n    CENTER,\r\n    COLUMN,\r\n    CONTAINER,\r\n    ROW,\r\n    SCENE,\r\n    STACK,\r\n    TEXT,\r\n}\r\n\r\nexport type UI<AppEvent> =\r\n    | Center<AppEvent>\r\n    | Column<AppEvent>\r\n    | Container<AppEvent>\r\n    | Row<AppEvent>\r\n    | Scene<AppEvent>\r\n    | Stack<AppEvent>\r\n    | Text<AppEvent>\r\n\r\nexport interface Color {\r\n    red: number\r\n    green: number\r\n    blue: number\r\n    alpha: number\r\n}\r\n\r\nexport interface Size {\r\n    readonly width: number\r\n    readonly height: number\r\n}\r\n\r\nexport interface Constraints {\r\n    readonly minWidth: number\r\n    readonly maxWidth: number\r\n    readonly minHeight: number\r\n    readonly maxHeight: number\r\n}\r\n\r\nexport type Layout =\r\n    | CenterLayout\r\n    | ColumnLayout\r\n    | ContainerLayout\r\n    | RowLayout\r\n    | SceneLayout\r\n    | StackLayout\r\n    | TextLayout\r\n\r\nexport interface Font {\r\n    readonly family: string\r\n    readonly size: number\r\n}\r\n\r\nexport interface TextMeasurements {\r\n    readonly widths: number[]\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[][]\r\n}\r\n\r\nexport type MeasureText = (font: Font, str: string) => TextMeasurements\r\n\r\nexport const layout = <AppEvent>(ui: UI<AppEvent>, constraints: Constraints, measureText: MeasureText): Layout => {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            return centerLayout(ui, constraints, measureText)\r\n        case UIKind.COLUMN:\r\n            return columnLayout(ui, constraints, measureText)\r\n        case UIKind.CONTAINER:\r\n            return containerLayout(ui, constraints, measureText)\r\n        case UIKind.ROW:\r\n            return rowLayout(ui, constraints, measureText)\r\n        case UIKind.SCENE:\r\n            return sceneLayout(ui, constraints, measureText)\r\n        case UIKind.STACK:\r\n            return stackLayout(ui, constraints, measureText)\r\n        case UIKind.TEXT:\r\n            return textLayout(ui, constraints, measureText)\r\n    }\r\n}\r\n\r\nexport interface Offset {\r\n    readonly x: number\r\n    readonly y: number\r\n}\r\n\r\nexport interface WorldSpace {\r\n    readonly x0: number\r\n    readonly y0: number\r\n    readonly x1: number\r\n    readonly y1: number\r\n}\r\n\r\nexport type Geometry =\r\n    | CenterGeometry\r\n    | ColumnGeometry\r\n    | ContainerGeometry\r\n    | RowGeometry\r\n    | SceneGeometry\r\n    | StackGeometry\r\n    | TextGeometry\r\n\r\nexport const geometry = <AppEvent>(ui: UI<AppEvent>, layout: Layout, offset: Offset, cameraStack: CameraStack): Geometry => {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            return centerGeometry(ui, layout as CenterLayout, offset, cameraStack)\r\n        case UIKind.COLUMN:\r\n            return columnGeometry(ui, layout as ColumnLayout, offset, cameraStack)\r\n        case UIKind.CONTAINER:\r\n            return containerGeometry(ui, layout as ContainerLayout, offset, cameraStack)\r\n        case UIKind.ROW:\r\n            return rowGeometry(ui, layout as RowLayout, offset, cameraStack)\r\n        case UIKind.SCENE:\r\n            return sceneGeometry(ui, layout as SceneLayout, offset, cameraStack)\r\n        case UIKind.STACK:\r\n            return stackGeometry(ui, layout as StackLayout, offset, cameraStack)\r\n        case UIKind.TEXT:\r\n            return textGeometry(ui, layout as TextLayout, offset, cameraStack)\r\n    }\r\n}\r\n\r\nexport interface Entry<AppEvent> {\r\n    readonly ui: UI<AppEvent>\r\n    readonly layout: Layout\r\n    readonly geometry: Geometry\r\n    readonly z: number\r\n}\r\n\r\nexport function* traverse<AppEvent>(ui: UI<AppEvent>, layout: Layout, geometry: Geometry, z: number): Generator<Entry<AppEvent>> {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            yield* centerTraverse(ui, layout as CenterLayout, geometry as CenterGeometry, z)\r\n            break\r\n        case UIKind.COLUMN:\r\n            yield* columnTraverse(ui, layout as ColumnLayout, geometry as ColumnGeometry, z)\r\n            break\r\n        case UIKind.CONTAINER:\r\n            yield* containerTraverse(ui, layout as ContainerLayout, geometry as ContainerGeometry, z)\r\n            break\r\n        case UIKind.ROW:\r\n            yield* rowTraverse(ui, layout as RowLayout, geometry as RowGeometry, z)\r\n            break\r\n        case UIKind.SCENE:\r\n            yield* sceneTraverse(ui, layout as SceneLayout, geometry as SceneGeometry, z)\r\n            break\r\n        case UIKind.STACK:\r\n            yield* stackTraverse(ui, layout as StackLayout, geometry as StackGeometry, z)\r\n            break\r\n        case UIKind.TEXT:\r\n            yield* textTraverse(ui, layout as TextLayout, geometry as TextGeometry, z)\r\n            break\r\n    }\r\n}\r\n\r\nexport interface Connection {\r\n    from: string\r\n    to: string\r\n    color: Color\r\n}\r\n\r\nexport interface Renderer<AppEvent> {\r\n    size: Size\r\n    cameras: Matrix3x3[]\r\n    clickHandlers: ClickHandlers<AppEvent>\r\n    clear: () => void\r\n    draw: (batch: Batch) => void\r\n    measureText: MeasureText\r\n    dispatch: (event: AppEvent) => void\r\n}\r\n\r\nexport interface Pointer {\r\n    x: number\r\n    y: number\r\n    id: number\r\n}","import { UI, Geometry, Layout, Entry, traverse } from \".\";\r\n\r\nexport interface Reducer<AppEvent, T> {\r\n    initial: () => T\r\n    combine: (accumulator: T, entry: Entry<AppEvent>) => T\r\n}\r\n\r\nexport const reduce = <AppEvent, T>(ui: UI<AppEvent>, layout: Layout, geometry: Geometry, reducer: Reducer<AppEvent, T>): T => {\r\n    const accumulator = reducer.initial()\r\n    for (const entry of traverse(ui, layout, geometry, 0)) {\r\n        reducer.combine(accumulator, entry)\r\n    }\r\n    return accumulator\r\n}","import { Entry, WorldSpace } from \".\"\r\n\r\nexport interface ClickHandler<AppEvent> {\r\n    onClick: AppEvent\r\n    worldSpace: WorldSpace\r\n}\r\n\r\nexport type ClickHandlers<AppEvent> = ClickHandler<AppEvent>[][]\r\n\r\nexport const initial = <AppEvent>(): ClickHandlers<AppEvent> => []\r\n\r\nexport const combine = <AppEvent>(handlers: ClickHandlers<AppEvent>, entry: Entry<AppEvent>): ClickHandlers<AppEvent> => {\r\n    if (entry.ui.onClick === undefined) return handlers\r\n    const needed = entry.z - handlers.length + 1\r\n    for (let i = 0; i < needed; ++i) handlers.push([])\r\n    handlers[entry.z].push({\r\n        onClick: entry.ui.onClick,\r\n        worldSpace: entry.geometry.worldSpace\r\n    })\r\n    return handlers\r\n}\r\n","import { Entry, WorldSpace } from \".\"\r\n\r\nexport type IdToWorldSpace = { [id: string]: WorldSpace }\r\n\r\nexport const initial = (): IdToWorldSpace => ({})\r\n\r\nexport const combine = <AppEvent>(lookup: IdToWorldSpace, entry: Entry<AppEvent>): IdToWorldSpace => {\r\n    if (!entry.ui.id) return lookup\r\n    lookup[entry.ui.id] = entry.geometry.worldSpace\r\n    return lookup\r\n}","import { Entry, UIKind } from \".\"\r\nimport { ContainerGeometry } from \"./container\"\r\nimport { TextGeometry } from \"./text\"\r\n\r\ntype Geometry = ContainerGeometry | TextGeometry\r\nexport type Layer = { [textureIndex: number]: Geometry[] }\r\nexport type Layers = Layer[]\r\n\r\nexport const initial = (): Layers => []\r\n\r\nexport const combine = <AppEvent>(layers: Layers, entry: Entry<AppEvent>): Layers => {\r\n    switch (entry.ui.kind) {\r\n        case UIKind.CONTAINER:\r\n        case UIKind.TEXT:\r\n            const entryGeometry = entry.geometry as Geometry\r\n            if (entryGeometry.vertices.length == 0) return layers\r\n            const needed = entry.z - layers.length + 1\r\n            for (let i = 0; i < needed; ++i) layers.push({})\r\n            const layer = layers[entry.z]\r\n            const geometry = (() => {\r\n                const geometry = layer[entryGeometry.textureIndex]\r\n                if (geometry) return geometry\r\n                const newGeometry: Geometry[] = []\r\n                layer[entryGeometry.textureIndex] = newGeometry\r\n                return newGeometry\r\n            })()\r\n            geometry.push(entryGeometry)\r\n            return layers\r\n        default:\r\n            return layers\r\n    }\r\n}\r\n","import { Entry, Connection, UIKind } from \".\"\r\nimport { inverse, multiplyMatrixVector } from \"../linear_algebra/matrix3x3\"\r\nimport { length } from \"../linear_algebra/vector3\"\r\n\r\nexport interface ConnectionsAndScale {\r\n    connections: Connection[]\r\n    scale: number\r\n}\r\n\r\nexport type Connections = ConnectionsAndScale[][]\r\n\r\nexport const initial = (): Connections => []\r\n\r\nexport const combine = <AppEvent>(connections: Connections, entry: Entry<AppEvent>): Connections => {\r\n    if (entry.ui.kind == UIKind.SCENE) {\r\n        if (entry.ui.connections.length === 0) return connections\r\n        const needed = entry.z - connections.length + 1\r\n        for (let i = 0; i < needed; ++i) connections.push([])\r\n        const layer = connections[entry.z]\r\n        layer.push({\r\n            connections: entry.ui.connections,\r\n            scale: length(multiplyMatrixVector(inverse(entry.ui.camera), [0, 1, 0]))\r\n        })\r\n        return connections\r\n    }\r\n    return connections\r\n}\r\n","import { Entry } from \".\"\r\nimport { ClickHandlers } from \"./gather_on_click_handlers\"\r\nimport * as gatherOnClickHandlers from \"./gather_on_click_handlers\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\nimport * as buildIdToWorldSpace from \"./id_to_world_space\"\r\nimport { Layers } from \"./layer_geometry\"\r\nimport * as layerGeometry from \"./layer_geometry\"\r\nimport { Connections } from \"./gather_connections\"\r\nimport * as gatherConnections from \"./gather_connections\"\r\n\r\nexport interface Accumulator<AppEvent> {\r\n    layers: Layers,\r\n    clickHandlers: ClickHandlers<AppEvent>,\r\n    idToWorldSpace: IdToWorldSpace\r\n    connections: Connections\r\n}\r\n\r\nexport const initial = <AppEvent>(): Accumulator<AppEvent> => ({\r\n    layers: layerGeometry.initial(),\r\n    clickHandlers: gatherOnClickHandlers.initial(),\r\n    idToWorldSpace: buildIdToWorldSpace.initial(),\r\n    connections: gatherConnections.initial()\r\n})\r\n\r\nexport const combine = <AppEvent>(acc: Accumulator<AppEvent>, entry: Entry<AppEvent>): Accumulator<AppEvent> => ({\r\n    layers: layerGeometry.combine(acc.layers, entry),\r\n    clickHandlers: gatherOnClickHandlers.combine(acc.clickHandlers, entry),\r\n    idToWorldSpace: buildIdToWorldSpace.combine(acc.idToWorldSpace, entry),\r\n    connections: gatherConnections.combine(acc.connections, entry)\r\n})\r\n","import { batchGeometry } from \"./batch_geometry\"\r\nimport { initCameraStack } from \"./camera_stack\"\r\nimport { reduce } from \"./reduce\"\r\nimport { UI, layout, geometry, Renderer } from \".\"\r\nimport * as reducer from './reducer'\r\nimport { Accumulator } from './reducer'\r\n\r\nexport const render = <AppEvent, R extends Renderer<AppEvent>>(renderer: R, ui: UI<AppEvent>): R => {\r\n    const { width, height } = renderer.size\r\n    renderer.clear()\r\n    const constraints = {\r\n        minWidth: 0,\r\n        maxWidth: width,\r\n        minHeight: 0,\r\n        maxHeight: height\r\n    }\r\n    const uiLayout = layout(ui, constraints, renderer.measureText)\r\n    const offsets = { x: 0, y: 0 }\r\n    const cameraStack = initCameraStack()\r\n    const uiGeometry = geometry(ui, uiLayout, offsets, cameraStack)\r\n    const { layers, clickHandlers, connections, idToWorldSpace } = reduce<AppEvent, Accumulator<AppEvent>>(ui, uiLayout, uiGeometry, reducer)\r\n    const batches = batchGeometry(layers, connections, idToWorldSpace)\r\n    renderer.cameras = cameraStack.cameras\r\n    renderer.clickHandlers = clickHandlers\r\n    for (const batch of batches) renderer.draw(batch)\r\n    return renderer\r\n}\r\n","import { Batch } from \"./batch_geometry\";\r\nimport { Font, TextMeasurements, Size } from \".\";\r\nimport { Matrix3x3, projection } from \"../linear_algebra/matrix3x3\";\r\nimport { Document, WebGL2Context, Buffer, UniformLocation, Shader, Program, Canvas, Texture, Window } from \"./dom\";\r\nimport { ClickHandlers } from \"./gather_on_click_handlers\";\r\n\r\ninterface Attribute {\r\n    location: number\r\n    buffer: Buffer\r\n}\r\n\r\ninterface Attributes {\r\n    vertices: Attribute\r\n    vertexIndices: Buffer\r\n    colors: Attribute\r\n    textureCoordinates: Attribute\r\n    cameraIndex: Attribute\r\n}\r\n\r\ninterface Uniforms {\r\n    projection: UniformLocation\r\n    texture: UniformLocation\r\n    cameras: UniformLocation\r\n}\r\n\r\nexport enum ProgramKind { DATA, ERROR }\r\n\r\ninterface ProgramData {\r\n    kind: ProgramKind.DATA\r\n    vertexShader: Shader\r\n    fragmentShader: Shader\r\n    program: Program\r\n    attributes: Attributes\r\n    uniforms: Uniforms\r\n}\r\n\r\nexport interface ProgramError {\r\n    kind: ProgramKind.ERROR\r\n    vertexInfoLog: string | null\r\n    fragmentInfoLog: string | null\r\n}\r\n\r\n\r\ntype DevicePixelRatio = number\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\nconst createTextMeasurements = (document: Document, gl: WebGL2Context, font: Font, dpr: DevicePixelRatio) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(font.size * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * dpr\r\n    canvas.height = size * dpr\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(dpr, dpr)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = `${font.size}px ${font.family}`\r\n    ctx.fillStyle = 'white'\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const height = font.size\r\n    const widths: number[] = []\r\n    const textureCoordinates: number[][] = []\r\n    for (let i = 0; i < totalCells; ++i) {\r\n        const c = String.fromCharCode(i)\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        widths.push(width)\r\n        const x0 = x / size\r\n        const x1 = (x + width) / size\r\n        const y0 = y / size\r\n        const y1 = (y + height) / size\r\n        textureCoordinates.push([\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        ])\r\n    }\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas\r\n    )\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return { widths, textureCoordinates, texture }\r\n}\r\n\r\nconst mapString = <T>(str: string, f: (c: string, i: number) => T): Array<T> => {\r\n    let result = []\r\n    for (let i = 0; i < str.length; ++i) {\r\n        result.push(f(str[i], i))\r\n    }\r\n    return result\r\n}\r\n\r\nexport class WebGL2Renderer<AppEvent> {\r\n    _size: Size\r\n    _cameras: Matrix3x3[]\r\n    kind: ProgramKind.DATA = ProgramKind.DATA\r\n\r\n    constructor(\r\n        public window: Window,\r\n        public document: Document,\r\n        public canvas: Canvas,\r\n        public gl: WebGL2Context,\r\n        public program: ProgramData,\r\n        public textures: Texture[],\r\n        public textMeasurementsCache: Map<string, TextMeasurements>,\r\n        public clickHandlers: ClickHandlers<AppEvent>,\r\n        public dispatch: (event: AppEvent) => void\r\n    ) {\r\n    }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    set size(size: Size) {\r\n        const { gl, program, window } = this\r\n        const { uniforms } = program\r\n        const { canvas } = gl\r\n        gl.uniformMatrix3fv(uniforms.projection, /*transpose*/true, projection(size))\r\n        canvas.width = size.width * window.devicePixelRatio\r\n        canvas.height = size.height * window.devicePixelRatio\r\n        canvas.style.width = `${size.width}px`\r\n        canvas.style.height = `${size.height}px`\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this._size = size\r\n    }\r\n\r\n    get size() { return this._size }\r\n\r\n    set cameras(cameras: Matrix3x3[]) {\r\n        const { gl, program } = this\r\n        const { uniforms } = program\r\n        const data: number[] = []\r\n        for (const camera of cameras) data.push(...camera)\r\n        gl.uniformMatrix3fv(uniforms.cameras, /*transpose*/true, data)\r\n        this._cameras = cameras\r\n    }\r\n\r\n    get cameras() { return this._cameras }\r\n\r\n    draw = ({ triangles, lines }: Batch) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        {\r\n            const { vertices, colors, vertexIndices, textureCoordinates, textureIndex, cameraIndex } = triangles\r\n            if (vertices.length !== 0) {\r\n                const texture = textures[textureIndex]\r\n                gl.bindTexture(gl.TEXTURE_2D, texture)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndex), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.vertexIndices)\r\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n                gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n            }\r\n        }\r\n        {\r\n            const { vertices, colors } = lines\r\n            if (vertices.length !== 0) {\r\n                const texture = textures[0]\r\n                const count = vertices.length / 2\r\n                gl.bindTexture(gl.TEXTURE_2D, texture)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(Array(count * 2).fill(0)), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(Array(count).fill(0)), gl.STATIC_DRAW)\r\n                gl.drawArrays(gl.LINES, /*first*/0, count)\r\n            }\r\n        }\r\n    }\r\n\r\n    getTextureMeasurements = (font: Font, dpr: DevicePixelRatio) => {\r\n        const { document, gl } = this\r\n        const key = `${dpr} ${font.size} ${font.family}`\r\n        const measurements = this.textMeasurementsCache.get(key)\r\n        if (measurements) return measurements\r\n        const { texture, widths, textureCoordinates } = createTextMeasurements(document, gl, font, dpr)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newMeasurements = { widths, textureIndex, textureCoordinates }\r\n        this.textMeasurementsCache.set(key, newMeasurements)\r\n        return newMeasurements\r\n    }\r\n\r\n    measureText = (font: Font, str: string) => {\r\n        const { window } = this\r\n        const dpr = window.devicePixelRatio\r\n        const { widths, textureIndex, textureCoordinates } = this.getTextureMeasurements(font, dpr)\r\n        const indices = mapString(str, c => c.charCodeAt(0))\r\n        return {\r\n            widths: indices.map(i => widths[i]),\r\n            textureIndex,\r\n            textureCoordinates: indices.map(i => textureCoordinates[i]),\r\n        }\r\n    }\r\n}\r\n\r\nconst createVertexShader = (gl: WebGL2Context, attributes: Attributes): Shader => {\r\n    const { vertices, colors, textureCoordinates, cameraIndex } = attributes\r\n    const vertexShaderSource = `#version 300 es\r\n  uniform mat3 u_projection;\r\n  uniform mat3 u_cameras[8];\r\n\r\n  layout(location = ${vertices.location}) in vec2 a_vertex;\r\n  layout(location = ${colors.location}) in vec4 a_color;\r\n  layout(location = ${textureCoordinates.location}) in vec2 a_textureCoordinates;\r\n  layout(location = ${cameraIndex.location}) in uint a_cameraIndex;\r\n\r\n  out vec4 v_color;\r\n  out vec2 v_textureCoordinates;\r\n\r\n  void main() {\r\n    mat3 camera = u_cameras[a_cameraIndex];\r\n    mat3 transform = u_projection * inverse(camera);\r\n    gl_Position = vec4((transform * vec3(a_vertex, 1)).xy, 0, 1);\r\n    v_color = a_color / 255.0;\r\n    v_textureCoordinates = a_textureCoordinates;\r\n  }\r\n  `\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n    gl.shaderSource(vertexShader, vertexShaderSource)\r\n    gl.compileShader(vertexShader)\r\n    return vertexShader\r\n}\r\n\r\nconst createFragmentShader = (gl: WebGL2Context): Shader => {\r\n    const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec4 v_color;\r\n  in vec2 v_textureCoordinates;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  void main() {\r\n    fragColor = texture(u_texture, v_textureCoordinates) * v_color;\r\n  }\r\n  `\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n    gl.compileShader(fragmentShader)\r\n    return fragmentShader\r\n}\r\n\r\nconst bindVertices = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_vertex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindColors = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_color')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindTextureCoordinates = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_textureCoordinates')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindCameraIndex = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_cameraIndex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribIPointer(\r\n        location,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst createProgram = (gl: WebGL2Context): ProgramData | ProgramError => {\r\n    const attributes: Attributes = {\r\n        vertices: {\r\n            location: 0,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        colors: {\r\n            location: 1,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        textureCoordinates: {\r\n            location: 2,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        cameraIndex: {\r\n            location: 3,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        vertexIndices: gl.createBuffer()!\r\n    }\r\n    const vertexShader = createVertexShader(gl, attributes)\r\n    const fragmentShader = createFragmentShader(gl)\r\n    const program = gl.createProgram()!\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        return {\r\n            kind: ProgramKind.ERROR,\r\n            vertexInfoLog: gl.getShaderInfoLog(vertexShader),\r\n            fragmentInfoLog: gl.getShaderInfoLog(fragmentShader),\r\n        }\r\n    }\r\n    gl.useProgram(program)\r\n    const vertexArrayObject = gl.createVertexArray()!\r\n    gl.bindVertexArray(vertexArrayObject)\r\n    bindVertices(gl, program, attributes.vertices)\r\n    bindColors(gl, program, attributes.colors)\r\n    bindTextureCoordinates(gl, program, attributes.textureCoordinates)\r\n    bindCameraIndex(gl, program, attributes.cameraIndex)\r\n    const uniforms: Uniforms = {\r\n        projection: gl.getUniformLocation(program, 'u_projection')!,\r\n        texture: gl.getUniformLocation(program, 'u_texture')!,\r\n        cameras: gl.getUniformLocation(program, 'u_cameras')!\r\n    }\r\n    return {\r\n        kind: ProgramKind.DATA,\r\n        vertexShader,\r\n        fragmentShader,\r\n        program,\r\n        attributes,\r\n        uniforms\r\n    }\r\n}\r\n\r\ninterface Parameters<AppEvent> {\r\n    width: number\r\n    height: number\r\n    document: Document\r\n    window: Window\r\n    dispatch?: (event: AppEvent) => void\r\n}\r\n\r\nexport const webGL2Renderer = <AppEvent>({ width, height, document, window, dispatch }: Parameters<AppEvent>): WebGL2Renderer<AppEvent> | ProgramError => {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.style.touchAction = 'none'\r\n    const gl = canvas.getContext('webgl2')!\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n    gl.depthMask(false)\r\n    gl.activeTexture(gl.TEXTURE0)\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n    gl.clearColor(0, 0, 0, 1)\r\n    const program = createProgram(gl)\r\n    if (program.kind == ProgramKind.ERROR) return program\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255])\r\n    )\r\n    const renderer = new WebGL2Renderer<AppEvent>(\r\n        window,\r\n        document,\r\n        canvas,\r\n        gl,\r\n        program,\r\n        [texture],\r\n        new Map(),\r\n        [],\r\n        dispatch ?? (() => { })\r\n    )\r\n    renderer.size = { width, height }\r\n    return renderer\r\n}","import { pointerDown } from \"./pointer_down\"\r\nimport { render } from \"./render\"\r\nimport { ProgramError, ProgramKind, WebGL2Renderer, webGL2Renderer } from \"./webgl2\"\r\nimport { Pointer, UI } from \".\"\r\nimport { Document, Window, PointerEvent } from \"./dom\"\r\n\r\nexport const transformPointer = (p: PointerEvent): Pointer => ({\r\n    x: p.clientX,\r\n    y: p.clientY,\r\n    id: p.pointerId,\r\n})\r\n\r\nexport type Dispatch<AppEvent> = (event: AppEvent) => void\r\n\r\ntype View<State, AppEvent> = (state: State) => UI<AppEvent>\r\n\r\ninterface Milliseconds {\r\n    milliseconds: number\r\n}\r\n\r\ninterface Scheduled<AppEvent> {\r\n    after: Milliseconds\r\n    event: AppEvent\r\n}\r\n\r\nexport interface UpdateResult<State, AppEvent> {\r\n    state: State\r\n    render?: boolean\r\n    schedule?: Scheduled<AppEvent>[]\r\n    dispatch?: AppEvent[]\r\n}\r\n\r\ntype Update<State, AppEvent> = (state: State, event: AppEvent) => UpdateResult<State, AppEvent>\r\n\r\ninterface Properties<State, AppEvent> {\r\n    state: State\r\n    view: View<State, AppEvent>\r\n    update: Update<State, AppEvent>\r\n    window: Window\r\n    document: Document\r\n    requestAnimationFrame: (callback: () => void) => void\r\n    setTimeout: (callback: () => void, milliseconds: number) => void\r\n}\r\n\r\nexport interface Success<AppEvent> {\r\n    kind: ProgramKind.DATA\r\n    dispatch: Dispatch<AppEvent>\r\n}\r\n\r\nexport const run = <State, AppEvent>(properties: Properties<State, AppEvent>): Success<AppEvent> | ProgramError => {\r\n    let { state, view, update, window, document, requestAnimationFrame, setTimeout } = properties\r\n    const renderer_or_error = webGL2Renderer<AppEvent>({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        window,\r\n        document,\r\n    })\r\n    switch (renderer_or_error.kind) {\r\n        case ProgramKind.ERROR:\r\n            return renderer_or_error\r\n        case ProgramKind.DATA:\r\n            let renderer = renderer_or_error\r\n            let renderQueued = false\r\n            const scheduleRender = () => {\r\n                if (!renderQueued) {\r\n                    renderQueued = true\r\n                    requestAnimationFrame(() => {\r\n                        renderer = render(renderer, view(state))\r\n                        renderQueued = false\r\n                    })\r\n                }\r\n            }\r\n            const dispatch = (event: AppEvent) => {\r\n                const { state: newState, render, schedule, dispatch: dispatchEvents } = update(state, event)\r\n                state = newState\r\n                if (render) scheduleRender()\r\n                for (const { after, event } of schedule ?? []) {\r\n                    const { milliseconds } = after\r\n                    setTimeout(() => dispatch(event), milliseconds)\r\n                }\r\n                for (const event of dispatchEvents ?? []) dispatch(event)\r\n            }\r\n            renderer.dispatch = dispatch\r\n            document.body.appendChild(renderer.canvas)\r\n            document.addEventListener(\"pointerdown\", p => {\r\n                renderer = pointerDown<AppEvent, WebGL2Renderer<AppEvent>>(renderer, transformPointer(p))\r\n            })\r\n            window.addEventListener(\"resize\", () => {\r\n                renderer.size = { width: window.innerWidth, height: window.innerHeight }\r\n                scheduleRender()\r\n            })\r\n            scheduleRender()\r\n            return { kind: ProgramKind.DATA, dispatch }\r\n    }\r\n}\r\n","import { CrossAxisAlignment, MainAxisAlignment } from \"../alignment\"\r\nimport { AppEvent, EventKind } from \"../../event\"\r\nimport { Body, Finder, Input, Node, Output, State, Theme, UUID, VirtualKeyboardKind } from \"../../state\"\r\nimport { text, stack, scene, row, container, column, Connection, UI } from '..'\r\n\r\n\r\nexport const spacer = (size: number): UI<AppEvent> =>\r\n    container({ width: size, height: size })\r\n\r\n\r\nexport const intersperse = <T>(array: T[], seperator: T): T[] => {\r\n    const result = [array[0]]\r\n    for (const element of array.slice(1)) {\r\n        result.push(seperator, element)\r\n    }\r\n    return result\r\n}\r\n\r\n\r\nexport const inputUi = (theme: Theme, { name, selected }: Input, nodeUUID: UUID, inputIndex: number): UI<AppEvent> =>\r\n    container({\r\n        onClick: {\r\n            kind: EventKind.CLICKED_INPUT,\r\n            inputPath: { nodeUUID, inputIndex }\r\n        }\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            container({\r\n                id: `input ${nodeUUID} ${inputIndex}`,\r\n                width: 14,\r\n                height: 14,\r\n                color: selected ? theme.selectedInput : theme.input,\r\n            }),\r\n            spacer(4),\r\n            text(name)\r\n        ])\r\n    )\r\n\r\n\r\nexport const inputsUi = (theme: Theme, inputs: Input[], nodeUUID: UUID) =>\r\n    column(\r\n        intersperse(\r\n            inputs.map((input, inputIndex) => inputUi(theme, input, nodeUUID, inputIndex)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\n\r\nexport const outputUi = (theme: Theme, { name, selected }: Output, nodeUUID: UUID, outputIndex: number): UI<AppEvent> =>\r\n    container({\r\n        onClick: {\r\n            kind: EventKind.CLICKED_OUTPUT,\r\n            outputPath: { nodeUUID, outputIndex }\r\n        }\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            container({\r\n                id: `output ${nodeUUID} ${outputIndex}`,\r\n                width: 14,\r\n                height: 14,\r\n                color: selected ? theme.selectedInput : theme.input,\r\n            }),\r\n        ])\r\n    )\r\n\r\n\r\nexport const outputsUi = (theme: Theme, outputs: Output[], nodeUUID: UUID) =>\r\n    column(\r\n        intersperse(\r\n            outputs.map((output, outputIndex) => outputUi(theme, output, nodeUUID, outputIndex)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\n\r\nexport const numberUi = (theme: Theme, body: Body, nodeUUID: UUID): UI<AppEvent> =>\r\n    container({\r\n        color: body.editing ? theme.selectedInput : theme.background,\r\n        padding: 5,\r\n        onClick: {\r\n            kind: EventKind.CLICKED_NUMBER,\r\n            nodeUUID\r\n        }\r\n    },\r\n        text(body.value.toString()))\r\n\r\n\r\nexport const nodeUi = (theme: Theme, { name, x, y, inputs, body, outputs, uuid }: Node): UI<AppEvent> => {\r\n    const rowEntries: UI<AppEvent>[] = []\r\n    if (inputs.length) rowEntries.push(inputsUi(theme, inputs, uuid))\r\n    if (inputs.length && outputs.length) rowEntries.push(spacer(15))\r\n    if (body !== undefined) rowEntries.push(numberUi(theme, body, uuid), spacer(15))\r\n    if (outputs.length) rowEntries.push(outputsUi(theme, outputs, uuid))\r\n    return container(\r\n        {\r\n            color: theme.node,\r\n            padding: 4,\r\n            x, y,\r\n            onClick: {\r\n                kind: EventKind.CLICKED_NODE,\r\n                nodeUUID: uuid\r\n            }\r\n        },\r\n        column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            row(rowEntries)\r\n        ])\r\n    )\r\n}\r\n\r\n\r\nexport const finder = ({ search, options }: Finder, theme: Theme): UI<AppEvent> =>\r\n    column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n        container({ height: 10 }),\r\n        container({ color: theme.node, padding: 4 },\r\n            column([\r\n                container({ color: theme.background, width: 300, padding: 4 },\r\n                    text({ color: theme.input, size: 24 }, search.length ? search : \"Search ...\")),\r\n                container({ width: 10, height: 10 }),\r\n                ...options.map((option, i) =>\r\n                    container<AppEvent>({\r\n                        padding: 4,\r\n                        onClick: {\r\n                            kind: EventKind.CLICKED_FINDER_OPTION,\r\n                            option\r\n                        }\r\n                    },\r\n                        text({\r\n                            size: 18,\r\n                            color: i == 0 ? theme.input : { red: 255, green: 255, blue: 255, alpha: 255 }\r\n                        }, option)\r\n                    )\r\n                )\r\n            ])\r\n        )\r\n    ])\r\n\r\n\r\nexport const virtualKey = (key: string): UI<AppEvent> =>\r\n    container({\r\n        padding: 10,\r\n        onClick: {\r\n            kind: EventKind.VIRTUAL_KEYDOWN,\r\n            key\r\n        }\r\n    }, text({ size: 24 }, key))\r\n\r\n\r\nexport const virtualKeys = (keys: string[]) =>\r\n    row(keys.map(c => virtualKey(c)))\r\n\r\n\r\nexport const alphabeticVirtualKeyboard = (theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.SPACE_BETWEEN }, [\r\n            container({ padding: 4, color: theme.node },\r\n                column([\r\n                    virtualKeys(['1', '2', '3', '4', '5']),\r\n                    virtualKeys(['q', 'w', 'e', 'r', 't']),\r\n                    virtualKeys(['a', 's', 'd', 'f', 'g']),\r\n                    virtualKeys(['z', 'x', 'c', 'v']),\r\n                    virtualKeys(['sft', 'space']),\r\n                ])\r\n            ),\r\n            container({ padding: 4, color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(['6', '7', '8', '9', '0']),\r\n                    virtualKeys(['y', 'u', 'i', 'o', 'p']),\r\n                    virtualKeys(['h', 'j', 'k', 'l']),\r\n                    virtualKeys(['b', 'n', 'm', 'del']),\r\n                    virtualKeys(['space', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\n\r\nexport const numericVirtualKeyboard = (theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n            container({ padding: 4, color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(['1', '2', '3', '4']),\r\n                    virtualKeys(['5', '6', '7', '8']),\r\n                    virtualKeys(['9', '0', 'del']),\r\n                    virtualKeys(['.', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\n\r\nexport const virtualKeyboard = (theme: Theme, kind: VirtualKeyboardKind) => {\r\n    switch (kind) {\r\n        case VirtualKeyboardKind.ALPHABETIC: return alphabeticVirtualKeyboard(theme)\r\n        case VirtualKeyboardKind.NUMERIC: return numericVirtualKeyboard(theme)\r\n    }\r\n}\r\n\r\n\r\nexport const view = (state: State): UI<AppEvent> => {\r\n    const nodes = state.graph.nodeOrder.map(nodeUUID => nodeUi(state.theme, state.graph.nodes[nodeUUID]))\r\n    const connections: Connection[] = state.graph.edges.map(({ input, output }) => ({\r\n        from: `output ${output.nodeUUID} ${output.outputIndex}`,\r\n        to: `input ${input.nodeUUID} ${input.inputIndex}`,\r\n        color: state.theme.connection\r\n    }))\r\n    const stacked: UI<AppEvent>[] = [\r\n        container({ color: state.theme.background, onClick: { kind: EventKind.CLICKED_BACKGROUND } }),\r\n        scene({ camera: state.camera, children: nodes, connections }),\r\n    ]\r\n    if (state.finder.show) stacked.push(finder(state.finder, state.theme))\r\n    if (state.virtualKeyboard.show) stacked.push(virtualKeyboard(state.theme, state.virtualKeyboard.kind))\r\n    return stack(stacked)\r\n}","import { AppEvent, EventKind, update } from \"./event\"\r\nimport { run, transformPointer } from \"./ui/run\"\r\nimport { view } from './ui/view'\r\nimport { initialState, State } from \"./state\"\r\nimport { Document } from './ui/dom'\r\nimport { ProgramKind } from \"./ui/webgl2\"\r\n\r\nconst generateUUID = () => crypto.randomUUID()\r\n\r\nconst success_or_error = run({\r\n    state: initialState(generateUUID),\r\n    view,\r\n    update: (state: State, event: AppEvent) => update(generateUUID, state, event),\r\n    window,\r\n    document: document as Document,\r\n    requestAnimationFrame,\r\n    setTimeout\r\n})\r\n\r\nif (success_or_error.kind == ProgramKind.ERROR) {\r\n    throw success_or_error\r\n}\r\n\r\nconst dispatch = success_or_error.dispatch\r\n\r\nif (typeof PointerEvent.prototype.getCoalescedEvents === 'function') {\r\n    document.addEventListener('pointermove', (e) => {\r\n        e.getCoalescedEvents().forEach(p => {\r\n            dispatch({\r\n                kind: EventKind.POINTER_MOVE,\r\n                pointer: transformPointer(p)\r\n            })\r\n        })\r\n    })\r\n} else {\r\n    document.addEventListener('pointermove', p =>\r\n        dispatch({\r\n            kind: EventKind.POINTER_MOVE,\r\n            pointer: transformPointer(p)\r\n        })\r\n    )\r\n}\r\n\r\ndocument.addEventListener(\"pointerdown\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_DOWN,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener(\"pointerup\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_UP,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener('wheel', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.WHEEL,\r\n        x: e.clientX,\r\n        y: e.clientY,\r\n        deltaY: e.deltaY,\r\n    })\r\n}, { passive: false })\r\n\r\ndocument.addEventListener('contextmenu', e => {\r\n    e.preventDefault()\r\n})\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    document.body.requestFullscreen()\r\n})\r\n\r\ndocument.addEventListener('keydown', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.KEYDOWN,\r\n        key: e.key\r\n    })\r\n})"],"names":["$f4c0df53f29f413e$export$fad298d038a96a64","haystack","needle","haystackIndex","needleIndex","length","n","toLowerCase","$2a9d6d4b688c9d90$export$b74061472fe7c07","width","height","$2a9d6d4b688c9d90$export$d73ee8ef04f5226a","x","y","$2a9d6d4b688c9d90$export$dcdf75081b88279d","$2a9d6d4b688c9d90$export$84b43e5e8429f175","matrices","head","tail","reduce","a","b","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","$2a9d6d4b688c9d90$export$dbb85424dca880d0","b1","b2","b3","$2a9d6d4b688c9d90$export$70ae2c07e401031b","idet","$9a57707492d0f60d$export$f24224f1c91d8156","c","Math","sqrt","pow","$0b89d474933103bc$export$52710c6013234220","VirtualKeyboardKind1","$0b89d474933103bc$export$c59a831e29c6eb0","InputTargetKind1","$d7336fab2a6e7c56$export$50508d7849040d51","EventKind1","$d7336fab2a6e7c56$var$updateFinderOptions","state","finder","options","Object","keys","operations","filter","item","search","$d7336fab2a6e7c56$export$a72e97d68c48a4a","show","virtualKeyboard","kind","ALPHABETIC","inputTarget","FINDER","potentialDoubleClick","$d7336fab2a6e7c56$var$closeFinder","NONE","$d7336fab2a6e7c56$var$insertOperationFromFinder","name","gnerateUUID","operation","_","camera","nodePlacementLocation","uuid","graph","nodes","inputs","map","input","selected","edgeIndices","outputs","output","body","undefined","value","editing","nodeOrder","push","$d7336fab2a6e7c56$var$clickedNumber","nodeUUID","NUMBER","NUMERIC","$d7336fab2a6e7c56$export$c1b5afa9b8c6f143","render","$d7336fab2a6e7c56$export$722fbec263ad908a","generateUUID","event","POINTER_DOWN","pointers","pointer","dragging","zooming","dispatch","DOUBLE_CLICK","schedule","after","milliseconds","DOUBLE_CLICK_TIMEOUT","$d7336fab2a6e7c56$var$pointerDown","POINTER_UP","index","findIndex","p","id","splice","pointerDistance","$d7336fab2a6e7c56$var$pointerUp","POINTER_MOVE","rerender","dx","dy","selectedNode","scaling","node","p0","p1","x1","y1","x2","y2","distance","previousDistance","previousCenter","pointerCenter","move","zoom","moveBack","$d7336fab2a6e7c56$var$pointerMove","CLICKED_NODE","$d7336fab2a6e7c56$var$clickedNode","WHEEL","deltaY","$d7336fab2a6e7c56$var$wheel","CLICKED_INPUT","inputPath","selectedOutput","edgeIndex","edges","outputIndex","inputIndex","selectedInput","$d7336fab2a6e7c56$var$clickedInput","CLICKED_OUTPUT","outputPath","$d7336fab2a6e7c56$var$clickedOutput","$d7336fab2a6e7c56$var$doubleClickTimeout","$d7336fab2a6e7c56$var$doubleClick","KEYDOWN","key","slice","toString","newValue","parseFloat","node1","forEach","edgeIndex1","edge","i","includes","$d7336fab2a6e7c56$var$keyDown","VIRTUAL_KEYDOWN","$d7336fab2a6e7c56$var$virtualKeyDown","CLICKED_FINDER_OPTION","option","$d7336fab2a6e7c56$var$clickedFinderOption","CLICKED_NUMBER","CLICKED_BACKGROUND","$d7336fab2a6e7c56$var$clickedBackground","$3aa357479a49b085$var$inWorldSpace","x0","y0","$3aa357479a49b085$export$e6e29dfeb5ef19c1","renderer","clickHandlers","onClick","worldSpace","$b6ca04fcd3e6f123$var$newBatch","textureIndex","triangles","vertices","colors","vertexIndices","textureCoordinates","cameraIndex","lines","$b6ca04fcd3e6f123$export$2c575fa1d20488bd","ts","from","to","offset","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","first","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$b6ca04fcd3e6f123$export$1e96939139b396da","layers","connections","idToWorldSpace","start","stop","num","step","Array","$b6ca04fcd3e6f123$var$linspace","batches","batch","batchTextureIndex","layer","z","geometries","entries","parseInt","geometry","cs","scale","color","red","green","blue","alpha","samples","$f82cd7e5241fa075$export$eea5d8c438131c40","cameraStack","cameras","stack","transform","$f82cd7e5241fa075$export$3c901611250dc02c","$f82cd7e5241fa075$export$d14f39ee728c5da5","pop","$f82cd7e5241fa075$export$86ad693455315c84","_0","_1","$fd89ce3675dee463$export$83d5419fac007c8c","ui","constraints","measureText","childLayout","$1e3ba84e9ce044db$export$b3219800bda33a1f","child","size","maxWidth","maxHeight","$fd89ce3675dee463$export$efb2657d225c129a","layout1","childOffset","$1e3ba84e9ce044db$export$42a7622cbf932bb","$fd89ce3675dee463$export$edc8554b50279bf4","layout2","geometry1","$1e3ba84e9ce044db$export$df3f009e3d155b20","$9b5b1345df3acfe9$export$6595504a60e1f77c","MainAxisAlignment1","$9b5b1345df3acfe9$export$66a3248d846611ce","CrossAxisAlignment1","$518015a6e3cc694d$export$4e0c71f277ca26b3","args","properties","children","$1e3ba84e9ce044db$export$8984f19c96d30531","COLUMN","mainAxisAlignment","START","crossAxisAlignment","$518015a6e3cc694d$export$f8ce731bdfd45dc7","initial","totalChildHeight","result","acc","max","$518015a6e3cc694d$export$5a1548308f4d4391","freeSpaceY","CENTER","END","SPACE_EVENLY","SPACE_BETWEEN","addYStart","addYCenter","addYEnd","addYSpaceEvenly","addYSpaceBetween","addY","offsetXStart","offsetXCenter","offsetXEnd","offsetX","childGeometry","$518015a6e3cc694d$export$9f45e883ef2b80c0","layout","nextZ","$8a99d960732a172f$var$transformPadding","padding","top","right","bottom","left","$8a99d960732a172f$export$34e0f9847d4c02dd","CONTAINER","$8a99d960732a172f$export$a4e80cd8d85917bb","$8a99d960732a172f$export$7c88ce694bad6320","fill","$8a99d960732a172f$export$6f2a7b3ebfc2cfa0","$9e4edab979495f0d$export$120ff0929b202a6d","ROW","$9e4edab979495f0d$export$4076779b9674714b","totalChildWidth","$9e4edab979495f0d$export$90e65e88c1393562","freeSpaceX","addXStart","addXCenter","addXEnd","addXSpaceEvenly","addXSpaceBetween","addX","offsetYStart","offsetYCenter","offsetYEnd","offsetY","$9e4edab979495f0d$export$1152b7e6303a2c68","$864b15efd9f5e1a7$export$33aff30b8aa0934e","SCENE","$864b15efd9f5e1a7$export$9e03d30774b30061","$864b15efd9f5e1a7$export$7a4266c2aa024d65","$864b15efd9f5e1a7$export$7b2ec4d82804e47f","entry","$d380360335f9e6c0$export$b008c3d2ea57ca56","$d380360335f9e6c0$export$218db93a2e8965d","$d380360335f9e6c0$export$13c8b19be38670b3","$2d5075f154be1094$export$6f093cfa640b7166","str","TEXT","font","family","$2d5075f154be1094$export$801f12fcd9ba2788","measurements","width1","widths","$2d5075f154be1094$var$vertices","$2d5075f154be1094$var$colors","$2d5075f154be1094$var$vertexIndices","$2d5075f154be1094$export$f543e72c4af89828","textLayout1","flat","$2d5075f154be1094$export$3d02b268fb89b14d","UIKind1","STACK","$e364cd7af35feef1$export$533b26079ad0b4b","reducer","accumulator","combine","$cce0295d6d688136$export$1be1fc439b849fdf","handlers","needed","$3d1ad3352b3daee3$export$1be1fc439b849fdf","lookup","$0c1fb5dcb73854b4$export$1be1fc439b849fdf","entryGeometry","newGeometry","$d33a6e3c77e8a82f$export$1be1fc439b849fdf","$8fb27619ef3752ba$export$59ff82fc918bd7e3","$8fb27619ef3752ba$export$1be1fc439b849fdf","$cbb8ce85e6a0780d$export$b3890eb0ae9dca99","clear","uiLayout","minWidth","minHeight","uiGeometry","$8fb27619ef3752ba$exports","draw","$2561bfce8bbd3fa5$export$128884f9a44a0f0c","ProgramKind1","$2561bfce8bbd3fa5$export$ce2766bf4a8721d3","constructor","window1","document1","canvas","gl1","program1","textures1","textMeasurementsCache","window","document","gl","program","textures","DATA","this","COLOR_BUFFER_BIT","attributes","texture","bindTexture","TEXTURE_2D","bindBuffer","ARRAY_BUFFER","buffer","bufferData","Float32Array","STATIC_DRAW","Uint8Array","ELEMENT_ARRAY_BUFFER","Uint16Array","drawElements","TRIANGLES","UNSIGNED_SHORT","count","drawArrays","LINES","getTextureMeasurements","dpr","get","createElement","ctx","getContext","rows","current","$2561bfce8bbd3fa5$var$nearestPowerOfTwo","cellSize","style","textAlign","textBaseline","fillStyle","clearRect","String","fromCharCode","metric","ceil","floor","fillText","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","$2561bfce8bbd3fa5$var$createTextMeasurements","newMeasurements","set","devicePixelRatio","indices","f","$2561bfce8bbd3fa5$var$mapString","charCodeAt","uniforms","uniformMatrix3fv","projection","viewport","_size","data","_cameras","location","createBuffer","vertexShader","vertexShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","$2561bfce8bbd3fa5$var$createVertexShader","fragmentShader","FRAGMENT_SHADER","$2561bfce8bbd3fa5$var$createFragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","ERROR","vertexInfoLog","getShaderInfoLog","fragmentInfoLog","useProgram","vertexArrayObject","createVertexArray","bindVertexArray","FLOAT","$2561bfce8bbd3fa5$var$bindVertices","$2561bfce8bbd3fa5$var$bindColors","bindAttribLocation","enableVertexAttribArray","vertexAttribPointer","$2561bfce8bbd3fa5$var$bindTextureCoordinates","vertexAttribIPointer","$2561bfce8bbd3fa5$var$bindCameraIndex","getUniformLocation","$13904534c2e00d0c$export$479aac53993fd71","clientX","clientY","pointerId","$863f011722aa81d7$export$8cc075c801fd6817","$863f011722aa81d7$export$af200dcf8b7cb5de","array","seperator","element","$863f011722aa81d7$export$f0aff9ee68de27f8","theme","$863f011722aa81d7$export$60c2cea27aefb32b","$863f011722aa81d7$export$3cbc1f9e6e82ea7","$863f011722aa81d7$export$bb70de462253a3c9","$863f011722aa81d7$export$5b0a3b587d4840d2","rowEntries","background","$863f011722aa81d7$export$26fbed5ffd120939","$863f011722aa81d7$export$a0bbe14c4282928","$863f011722aa81d7$export$b5eb6b87d37ec205","$863f011722aa81d7$export$d93574fa032128c2","$863f011722aa81d7$export$97dbacc68eebd98a","$863f011722aa81d7$export$67e5e8cc6531f853","$b4e14b6b8da86996$var$generateUUID","crypto","randomUUID","$b4e14b6b8da86996$var$success_or_error","view","update","requestAnimationFrame","setTimeout","renderer_or_error","$2561bfce8bbd3fa5$export$94781114c991ae1c","innerWidth","innerHeight","renderQueued","scheduleRender","newState","render1","dispatchEvents","event1","event2","appendChild","addEventListener","uuids","connection","Number","Add","Subtract","Multiply","Divide","Equal","Log","stacked","$863f011722aa81d7$export$ae58c3420da023e7","$b4e14b6b8da86996$var$dispatch","PointerEvent","prototype","getCoalescedEvents","e","preventDefault","passive","requestFullscreen"],"version":3,"file":"index.0e828e1e.js.map"}