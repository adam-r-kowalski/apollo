{"mappings":"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","sources":["src/alignment.ts","src/fuzzy_find.ts","src/linear_algebra/matrix3x3.ts","src/linear_algebra/vector3.ts","src/event.ts","src/padding.ts","src/renderer/pointer_down.ts","src/renderer/batch_geometry.ts","src/camera_stack.ts","src/reduce.ts","src/renderer/id_to_world_space.ts","src/renderer/connection_geometry.ts","src/renderer/render.ts","src/renderer/webgl2.ts","src/run.ts","src/ui/center.ts","src/ui/column.ts","src/ui/container.ts","src/ui/row.ts","src/ui/scene.ts","src/ui/stack.ts","src/ui/text.ts","src/index.ts"],"sourcesContent":["export enum MainAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END,\r\n    SPACE_EVENLY,\r\n    SPACE_BETWEEN\r\n}\r\n\r\nexport enum CrossAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END\r\n}","export interface FuzzyFind {\r\n    haystack: string\r\n    needle: string\r\n}\r\n\r\nexport const fuzzyFind = ({ haystack, needle }: FuzzyFind): boolean => {\r\n    let haystackIndex = 0\r\n    let needleIndex = 0\r\n    while (needleIndex < needle.length) {\r\n        const n = needle[needleIndex].toLowerCase()\r\n        while (haystackIndex < haystack.length && n !== haystack[haystackIndex].toLowerCase()) {\r\n            ++haystackIndex\r\n        }\r\n        if (haystackIndex === haystack.length) return false\r\n        ++needleIndex\r\n    }\r\n    return true\r\n}\r\n","import { Size } from \"../layout\"\r\nimport { Vector3 } from \"./vector3\"\r\n\r\nexport type Matrix3x3 = number[]\r\n\r\nexport const identity = (): Matrix3x3 => [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n]\r\n\r\nexport const projection = ({ width, height }: Size): Matrix3x3 => [\r\n    2 / width, 0, -1,\r\n    0, -2 / height, 1,\r\n    0, 0, 1\r\n]\r\n\r\nexport const translate = (x: number, y: number): Matrix3x3 => [\r\n    1, 0, x,\r\n    0, 1, y,\r\n    0, 0, 1\r\n]\r\n\r\nexport const scale = (x: number, y: number): Matrix3x3 => [\r\n    x, 0, 0,\r\n    0, y, 0,\r\n    0, 0, 1\r\n]\r\n\r\nexport const rotate = (radians: number): Matrix3x3 => {\r\n    const c = Math.cos(radians)\r\n    const s = Math.sin(radians)\r\n    return [\r\n        c, s, 0,\r\n        -s, c, 0,\r\n        0, 0, 1\r\n    ]\r\n}\r\n\r\nexport const multiplyMatrices = (...matrices: Matrix3x3[]) => {\r\n    const [head, ...tail] = matrices\r\n    return tail.reduce((a, b) => {\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return [\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ]\r\n    }, head)\r\n}\r\n\r\nexport const multiplyMatrixVector = (a: Matrix3x3, b: Vector3): Vector3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b1 = b[0]\r\n    const b2 = b[1]\r\n    const b3 = b[2]\r\n    const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n    const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n    const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n    return [c1, c2, c3]\r\n}\r\n\r\nexport const inverse = (a: Matrix3x3): Matrix3x3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b11 = a22 * a33 - a23 * a32\r\n    const b12 = a21 * a33 - a23 * a31\r\n    const b13 = a21 * a32 - a22 * a31\r\n    const b21 = a12 * a33 - a13 * a32\r\n    const b22 = a11 * a33 - a13 * a31\r\n    const b23 = a11 * a32 - a12 * a31\r\n    const b31 = a12 * a23 - a13 * a22\r\n    const b32 = a11 * a23 - a13 * a21\r\n    const b33 = a11 * a22 - a12 * a21\r\n    const det = a31 * b31 - a32 * b32 + a33 * b33\r\n    const idet = 1 / det\r\n    return [\r\n        idet * b11, idet * -b21, idet * b31,\r\n        idet * -b12, idet * b22, idet * -b32,\r\n        idet * b13, idet * -b23, idet * b33\r\n    ]\r\n}","export type Vector3 = number[]\r\n\r\nexport const length = ([a, b, c]: Vector3) =>\r\n    Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))","import { fuzzyFind } from \"./fuzzy_find\"\r\nimport { multiplyMatrices, multiplyMatrixVector, scale, translate } from \"./linear_algebra/matrix3x3\"\r\nimport { length } from \"./linear_algebra/vector3\"\r\nimport { UpdateResult } from \"./run\"\r\nimport { InputPath, OutputPath, State } from \"./state\"\r\nimport { Pointer } from \"./ui\"\r\n\r\nexport enum EventKind {\r\n    POINTER_MOVE,\r\n    POINTER_DOWN,\r\n    POINTER_UP,\r\n    CLICKED_NODE,\r\n    WHEEL,\r\n    CLICKED_INPUT,\r\n    CLICKED_OUTPUT,\r\n    DOUBLE_CLICK_TIMEOUT,\r\n    DOUBLE_CLICK,\r\n    KEYDOWN,\r\n    VIRTUAL_KEYDOWN\r\n}\r\n\r\nexport interface PointerMove {\r\n    kind: EventKind.POINTER_MOVE\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerDown {\r\n    kind: EventKind.POINTER_DOWN\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerUp {\r\n    kind: EventKind.POINTER_UP\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface ClickedNode {\r\n    kind: EventKind.CLICKED_NODE\r\n    index: number\r\n}\r\n\r\nexport interface Wheel {\r\n    kind: EventKind.WHEEL\r\n    x: number\r\n    y: number\r\n    deltaY: number\r\n}\r\n\r\nexport interface ClickedInput {\r\n    kind: EventKind.CLICKED_INPUT\r\n    inputPath: InputPath\r\n}\r\n\r\nexport interface ClickedOutput {\r\n    kind: EventKind.CLICKED_OUTPUT\r\n    outputPath: OutputPath\r\n}\r\n\r\nexport interface DoubleClickTimeout {\r\n    kind: EventKind.DOUBLE_CLICK_TIMEOUT\r\n}\r\n\r\nexport interface DoubleClick {\r\n    kind: EventKind.DOUBLE_CLICK\r\n}\r\n\r\nexport interface KeyDown {\r\n    kind: EventKind.KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport interface VirtualKeyDown {\r\n    kind: EventKind.VIRTUAL_KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport type Event =\r\n    | PointerMove\r\n    | PointerDown\r\n    | PointerUp\r\n    | ClickedNode\r\n    | Wheel\r\n    | ClickedInput\r\n    | ClickedOutput\r\n    | DoubleClickTimeout\r\n    | DoubleClick\r\n    | KeyDown\r\n    | VirtualKeyDown\r\n\r\n\r\nconst pointerDown = (state: State, event: PointerDown): UpdateResult<State, Event> => {\r\n    state.pointers.push(event.pointer)\r\n    if (state.pointers.length > 1) {\r\n        state.potentialDoubleClick = false\r\n        state.dragging = false\r\n        state.zooming = state.pointers.length === 2\r\n        return { state }\r\n    }\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n        return {\r\n            state,\r\n            dispatch: [{ kind: EventKind.DOUBLE_CLICK }]\r\n        }\r\n    }\r\n    state.dragging = true\r\n    state.potentialDoubleClick = true\r\n    return {\r\n        state,\r\n        schedule: [\r\n            { after: { milliseconds: 300 }, event: { kind: EventKind.DOUBLE_CLICK_TIMEOUT } }\r\n        ]\r\n    }\r\n}\r\n\r\nconst pointerUp = (state: State, event: PointerUp) => {\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    state.pointers.splice(index, 1)\r\n    if (state.pointers.length === 1) {\r\n        state.zooming = false\r\n        state.dragging = true\r\n        state.pointerDistance = 0\r\n    }\r\n    else if (state.pointers.length === 0) {\r\n        state.dragging = false\r\n        state.draggedNode = null\r\n        state.pointerDistance = 0\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst pointerMove = (state: State, event: PointerMove) => {\r\n    if (!state.dragging && !state.zooming) return { state, rerender: false }\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    const pointer = state.pointers[index]\r\n    state.pointers[index] = event.pointer\r\n    if (state.dragging) {\r\n        const dx = event.pointer.x - pointer.x\r\n        const dy = event.pointer.y - pointer.y\r\n        if (state.draggedNode !== null) {\r\n            const scaling = length(multiplyMatrixVector(state.camera, [0, 1, 0]))\r\n            const node = state.graph.nodes[state.draggedNode]\r\n            node.x += dx * scaling\r\n            node.y += dy * scaling\r\n        } else {\r\n            state.camera = multiplyMatrices(state.camera, translate(-dx, -dy))\r\n        }\r\n        return { state, render: true }\r\n    }\r\n    if (state.zooming) {\r\n        const [p0, p1] = [state.pointers[0], state.pointers[1]]\r\n        const [x1, y1] = [p0.x, p0.y]\r\n        const [x2, y2] = [p1.x, p1.y]\r\n        const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n        const previousDistance = state.pointerDistance\r\n        const previousCenter = state.pointerCenter\r\n        state.pointerDistance = distance\r\n        const x = (p0.x + p1.x) / 2\r\n        const y = (p0.y + p1.y) / 2\r\n        state.pointerCenter = [x, y]\r\n        if (previousDistance > 0) {\r\n            const move = translate(x, y)\r\n            const zoom = Math.pow(2, (previousDistance - distance) * 0.01)\r\n            const moveBack = translate(-x, -y)\r\n            const dx = x - previousCenter[0]\r\n            const dy = y - previousCenter[1]\r\n            state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack, translate(-dx, -dy))\r\n            return { state, render: true }\r\n        } else return { state }\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst clickedNode = (state: State, event: ClickedNode) => {\r\n    state.draggedNode = event.index\r\n    return { state, render: true }\r\n}\r\n\r\nconst wheel = (state: State, event: Wheel) => {\r\n    const move = translate(event.x, event.y)\r\n    const zoom = Math.pow(2, event.deltaY * 0.01)\r\n    const moveBack = translate(-event.x, -event.y)\r\n    state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack)\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedInput = (state: State, event: ClickedInput) => {\r\n    state.draggedNode = event.inputPath.nodeIndex\r\n    if (state.selectedOutput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: event.inputPath,\r\n            output: state.selectedOutput\r\n        })\r\n        {\r\n            const { nodeIndex, outputIndex } = state.selectedOutput\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n            output.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, inputIndex } = event.inputPath\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedOutput = null\r\n        state.draggedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedInput) {\r\n        const { nodeIndex, inputIndex } = state.selectedInput\r\n        state.graph.nodes[nodeIndex].inputs[inputIndex].selected = false\r\n    }\r\n    const { nodeIndex, inputIndex } = event.inputPath\r\n    state.graph.nodes[nodeIndex].inputs[inputIndex].selected = true\r\n    state.selectedInput = event.inputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedOutput = (state: State, event: ClickedOutput) => {\r\n    state.draggedNode = event.outputPath.nodeIndex\r\n    if (state.selectedInput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: state.selectedInput,\r\n            output: event.outputPath\r\n        })\r\n        {\r\n            const { nodeIndex, inputIndex } = state.selectedInput\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n            input.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, outputIndex } = event.outputPath\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedInput = null\r\n        state.draggedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedOutput) {\r\n        const { nodeIndex, outputIndex } = state.selectedOutput\r\n        state.graph.nodes[nodeIndex].outputs[outputIndex].selected = false\r\n    }\r\n    const { nodeIndex, outputIndex } = event.outputPath\r\n    state.graph.nodes[nodeIndex].outputs[outputIndex].selected = true\r\n    state.selectedOutput = event.outputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst doubleClickTimeout = (state: State, _: DoubleClickTimeout) => {\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst updateFinderOptions = (state: State): State => {\r\n    state.finder.options = Object.keys(state.operations)\r\n        .filter(item => fuzzyFind({ haystack: item, needle: state.finder.search }))\r\n        .slice(0, 5)\r\n    return state\r\n}\r\n\r\nconst doubleClick = (state: State, _: DoubleClick) => {\r\n    state.potentialDoubleClick = false\r\n    state.finder.show = true\r\n    return { state: updateFinderOptions(state), render: true }\r\n}\r\n\r\nconst keyDown = (state: State, { key }: KeyDown) => {\r\n    if (state.finder.show) {\r\n        switch (key) {\r\n            case 'Backspace':\r\n                state.finder.search = state.finder.search.slice(0, -1)\r\n                break\r\n            case 'Shift':\r\n            case 'Alt':\r\n            case 'Control':\r\n            case 'Meta':\r\n            case 'Tab':\r\n                break\r\n            case 'Enter':\r\n            case 'Escape':\r\n                state.finder.show = false\r\n                state.finder.search = ''\r\n                break\r\n            default:\r\n                state.finder.search += key\r\n                break\r\n        }\r\n        return { state: updateFinderOptions(state), render: true }\r\n    }\r\n    if (key == 'f') {\r\n        state.finder.show = true\r\n        return { state, render: true }\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst virtualKeyDown = (state: State, { key }: VirtualKeyDown) => {\r\n    if (state.finder.show) {\r\n        switch (key) {\r\n            case 'del':\r\n                state.finder.search = state.finder.search.slice(0, -1)\r\n                break\r\n            case 'sft':\r\n                break\r\n            case 'space':\r\n                state.finder.search += ' '\r\n                break\r\n            case 'ret':\r\n                state.finder.show = false\r\n                state.finder.search = ''\r\n                break\r\n            default:\r\n                state.finder.search += key\r\n                break\r\n        }\r\n        return { state: updateFinderOptions(state), render: true }\r\n    }\r\n    return { state }\r\n}\r\n\r\nexport const update = (state: State, event: Event): UpdateResult<State, Event> => {\r\n    switch (event.kind) {\r\n        case EventKind.POINTER_DOWN: return pointerDown(state, event)\r\n        case EventKind.POINTER_UP: return pointerUp(state, event)\r\n        case EventKind.POINTER_MOVE: return pointerMove(state, event)\r\n        case EventKind.CLICKED_NODE: return clickedNode(state, event)\r\n        case EventKind.WHEEL: return wheel(state, event)\r\n        case EventKind.CLICKED_INPUT: return clickedInput(state, event)\r\n        case EventKind.CLICKED_OUTPUT: return clickedOutput(state, event)\r\n        case EventKind.DOUBLE_CLICK_TIMEOUT: return doubleClickTimeout(state, event)\r\n        case EventKind.DOUBLE_CLICK: return doubleClick(state, event)\r\n        case EventKind.KEYDOWN: return keyDown(state, event)\r\n        case EventKind.VIRTUAL_KEYDOWN: return virtualKeyDown(state, event)\r\n    }\r\n}\r\n","export class Padding {\r\n    constructor(\r\n        readonly top: number,\r\n        readonly right: number,\r\n        readonly bottom: number,\r\n        readonly left: number\r\n    ) { }\r\n}\r\n\r\nexport const padding = (value: number) =>\r\n    new Padding(value, value, value, value)","import { Renderer } from \".\"\r\nimport { WorldSpace } from \"../geometry\"\r\nimport { Pointer } from \"../ui\"\r\n\r\nconst inWorldSpace = ({ x0, y0, x1, y1 }: WorldSpace, pointer: Pointer) =>\r\n    x0 <= pointer.x && pointer.x <= x1 &&\r\n    y0 <= pointer.y && pointer.y <= y1\r\n\r\nexport const pointerDown = <R extends Renderer>(renderer: R, pointer: Pointer): R => {\r\n    for (let i = renderer.clickHandlers.length; i > 0; --i) {\r\n        for (const { onClick, worldSpace } of renderer.clickHandlers[i - 1]) {\r\n            if (inWorldSpace(worldSpace, pointer)) {\r\n                onClick(pointer)\r\n                return renderer\r\n            }\r\n        }\r\n    }\r\n    return renderer\r\n}\r\n","import { Layers } from \"./render\"\r\n\r\nexport interface Batch {\r\n    vertices: number[]\r\n    vertexIndices: number[]\r\n    colors: number[]\r\n    textureIndex: number\r\n    textureCoordinates: number[]\r\n    cameraIndex: number[]\r\n}\r\n\r\nconst newBatch = (textureIndex: number): Batch => ({\r\n    vertices: [],\r\n    colors: [],\r\n    vertexIndices: [],\r\n    textureIndex,\r\n    textureCoordinates: [],\r\n    cameraIndex: []\r\n})\r\n\r\nexport const batchGeometry = (layers: Layers): Batch[] => {\r\n    const batches: Batch[] = []\r\n    let batch = newBatch(0)\r\n    for (const layer of layers) {\r\n        for (const [textureIndex, geometries] of layer) {\r\n            if (batch.textureIndex !== textureIndex) {\r\n                if (batch.vertices.length !== 0) batches.push(batch)\r\n                batch = newBatch(textureIndex)\r\n            }\r\n            for (const geometry of geometries) {\r\n                const offset = batch.vertices.length / 2\r\n                batch.vertices.push(...geometry.vertices)\r\n                batch.colors.push(...geometry.colors)\r\n                for (const index of geometry.vertexIndices) {\r\n                    batch.vertexIndices.push(index + offset)\r\n                }\r\n                batch.textureCoordinates.push(...geometry.textureCoordinates)\r\n                batch.cameraIndex.push(...geometry.cameraIndex)\r\n            }\r\n        }\r\n    }\r\n    if (batch.vertices.length !== 0) batches.push(batch)\r\n    return batches\r\n}","import { WorldSpace } from \"./geometry\"\r\nimport { identity, inverse, Matrix3x3, multiplyMatrixVector } from \"./linear_algebra/matrix3x3\"\r\nimport { Cameras } from \"./renderer/render\"\r\n\r\nexport type CameraIndex = number\r\n\r\nexport class CameraStack {\r\n    cameras: Cameras\r\n    stack: number[]\r\n    transform: Matrix3x3\r\n\r\n    constructor() {\r\n        const camera = identity()\r\n        this.cameras = [identity()]\r\n        this.stack = [0]\r\n        this.transform = inverse(camera)\r\n    }\r\n\r\n    pushCamera = (camera: Matrix3x3) => {\r\n        const index = this.cameras.length\r\n        this.cameras.push(camera)\r\n        this.stack.push(index)\r\n        this.transform = inverse(camera)\r\n    }\r\n\r\n    popCamera = () => {\r\n        this.stack.pop()\r\n        this.transform = inverse(this.cameras[this.activeCamera()])\r\n    }\r\n\r\n    activeCamera = () => this.stack.slice(-1)[0]\r\n\r\n    transformWorldSpace = (worldSpace: WorldSpace): WorldSpace => {\r\n        const [x0, y0, _0] = multiplyMatrixVector(this.transform, [worldSpace.x0, worldSpace.y0, 1])\r\n        const [x1, y1, _1] = multiplyMatrixVector(this.transform, [worldSpace.x1, worldSpace.y1, 1])\r\n        return { x0, y0, x1, y1 }\r\n    }\r\n}\r\n","import { Geometry } from \"./geometry\";\r\nimport { Layout } from \"./layout\";\r\nimport { Entry, UI } from \"./ui\";\r\n\r\nexport interface Reducer<T> {\r\n    initial: () => T\r\n    combine: (accumulator: T, entry: Entry) => T\r\n}\r\n\r\nexport const reduce = <T>(ui: UI, layout: Layout, geometry: Geometry, reducer: Reducer<T>): T => {\r\n    const accumulator = reducer.initial()\r\n    for (const entry of ui.traverse(layout, geometry, 0)) {\r\n        reducer.combine(accumulator, entry)\r\n    }\r\n    return accumulator\r\n}","import { WorldSpace } from \"../geometry\"\r\nimport { Reducer } from \"../reduce\"\r\nimport { Entry } from \"../ui\"\r\n\r\nexport type IdToWorldSpace = { [id: string]: WorldSpace }\r\n\r\nexport const buildIdToWorldSpace: Reducer<IdToWorldSpace> = {\r\n    initial: () => ({}),\r\n    combine: (lookup: IdToWorldSpace, entry: Entry) => {\r\n        if (!entry.ui.id) return lookup\r\n        lookup[entry.ui.id] = entry.geometry.worldSpace\r\n        return lookup\r\n    }\r\n}\r\n","import { WorldSpace } from \"../geometry\"\r\nimport { Connection } from \"../ui\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\n\r\nexport interface Lines {\r\n    vertices: number[]\r\n    colors: number[]\r\n}\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nfunction* cubicBezier(ts: number[], from: WorldSpace, to: WorldSpace): Generator<number> {\r\n    const p0x = (from.x0 + from.x1) / 2\r\n    const p0y = (from.y0 + from.y1) / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = (to.x0 + to.x1) / 2\r\n    const p3y = (to.y0 + to.y1) / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    let lastX = 0\r\n    let lastY = 0\r\n    let first = true\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (first) {\r\n            yield x\r\n            yield y\r\n            first = false\r\n        } else {\r\n            yield lastX\r\n            yield lastY\r\n        }\r\n        yield x\r\n        yield y\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n}\r\n\r\nexport const connectionGeometry = (connections: Connection[], idToWorldSpace: IdToWorldSpace): Lines => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const vertices: number[] = []\r\n    const colors: number[] = []\r\n    for (const { from, to, color } of connections) {\r\n        for (const p of cubicBezier(ts, idToWorldSpace[from], idToWorldSpace[to])) {\r\n            vertices.push(p)\r\n        }\r\n        const { red, green, blue, alpha } = color\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(red, green, blue, alpha)\r\n    }\r\n    return { vertices, colors }\r\n}","import { ClickHandlers, Renderer } from \".\"\r\nimport { batchGeometry } from \"./batch_geometry\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry } from \"../geometry\"\r\nimport { reduce, Reducer } from \"../reduce\"\r\nimport { Connection, Entry, UI } from \"../ui\"\r\nimport { buildIdToWorldSpace, IdToWorldSpace } from \"./id_to_world_space\"\r\nimport { connectionGeometry } from \"./connection_geometry\"\r\nimport { Matrix3x3 } from \"../linear_algebra/matrix3x3\"\r\n\r\nexport type Cameras = Matrix3x3[]\r\nexport type TextureIndex = number\r\nexport type Layer = Map<TextureIndex, Geometry[]>\r\nexport type Layers = Layer[]\r\n\r\ninterface Accumulator {\r\n    layers: Layers,\r\n    clickHandlers: ClickHandlers,\r\n    idToWorldSpace: IdToWorldSpace\r\n    connections: Connection[]\r\n}\r\n\r\nexport const layerGeometry: Reducer<Layers> = {\r\n    initial: () => [],\r\n    combine: (layers: Layers, entry: Entry) => {\r\n        if (entry.geometry.vertices.length == 0) return layers\r\n        const needed = entry.z - layers.length + 1\r\n        for (let i = 0; i < needed; ++i) layers.push(new Map())\r\n        const layer = layers[entry.z]\r\n        const geometry = (() => {\r\n            const geometry = layer.get(entry.geometry.textureIndex)\r\n            if (geometry) return geometry\r\n            const newGeometry: Geometry[] = []\r\n            layer.set(entry.geometry.textureIndex, newGeometry)\r\n            return newGeometry\r\n        })()\r\n        geometry.push(entry.geometry)\r\n        return layers\r\n    }\r\n}\r\n\r\nexport const gatherOnClickHandlers: Reducer<ClickHandlers> = {\r\n    initial: () => [],\r\n    combine: (handlers: ClickHandlers, entry: Entry) => {\r\n        if (!entry.ui.onClick) return handlers\r\n        const needed = entry.z - handlers.length + 1\r\n        for (let i = 0; i < needed; ++i) handlers.push([])\r\n        handlers[entry.z].push({\r\n            onClick: entry.ui.onClick,\r\n            worldSpace: entry.geometry.worldSpace\r\n        })\r\n        return handlers\r\n    }\r\n}\r\n\r\n\r\nexport const gatherConnections: Reducer<Connection[]> = {\r\n    initial: () => [],\r\n    combine: (connections: Connection[], entry: Entry) => {\r\n        if (!entry.ui.connections) return connections\r\n        connections.push(...entry.ui.connections)\r\n        return connections\r\n    }\r\n}\r\n\r\n\r\nexport const reducer: Reducer<Accumulator> = {\r\n    initial: () => ({\r\n        layers: layerGeometry.initial(),\r\n        clickHandlers: gatherOnClickHandlers.initial(),\r\n        idToWorldSpace: buildIdToWorldSpace.initial(),\r\n        connections: gatherConnections.initial()\r\n    }),\r\n    combine: (acc: Accumulator, entry: Entry) => {\r\n        return {\r\n            layers: layerGeometry.combine(acc.layers, entry),\r\n            clickHandlers: gatherOnClickHandlers.combine(acc.clickHandlers, entry),\r\n            idToWorldSpace: buildIdToWorldSpace.combine(acc.idToWorldSpace, entry),\r\n            connections: gatherConnections.combine(acc.connections, entry)\r\n        }\r\n    }\r\n}\r\n\r\nexport const render = <R extends Renderer>(renderer: R, ui: UI): R => {\r\n    const { width, height } = renderer.size\r\n    renderer.clear()\r\n    const constraints = {\r\n        minWidth: 0,\r\n        maxWidth: width,\r\n        minHeight: 0,\r\n        maxHeight: height\r\n    }\r\n    const layout = ui.layout(constraints, renderer.measureText)\r\n    const offsets = { x: 0, y: 0 }\r\n    const cameraStack = new CameraStack()\r\n    const geometry = ui.geometry(layout, offsets, cameraStack)\r\n    const { layers, clickHandlers, connections, idToWorldSpace } = reduce(ui, layout, geometry, reducer)\r\n    const batches = batchGeometry(layers)\r\n    const lines = connectionGeometry(connections, idToWorldSpace)\r\n    renderer.cameras = cameraStack.cameras\r\n    renderer.clickHandlers = clickHandlers\r\n    for (const batch of batches) renderer.draw(batch)\r\n    if (lines.vertices.length) renderer.drawLines(lines)\r\n    return renderer\r\n}\r\n","import { ClickHandlers } from \".\";\r\nimport { Batch } from \"./batch_geometry\";\r\nimport { Size } from \"../layout\";\r\nimport { Font, TextMeasurements } from \"../ui\";\r\nimport { Lines } from \"./connection_geometry\";\r\nimport { Matrix3x3, projection } from \"../linear_algebra/matrix3x3\";\r\nimport { Document, WebGL2Context, Buffer, UniformLocation, Shader, Program, Canvas, Texture, Window } from \"./dom\";\r\n\r\ninterface Attribute {\r\n    location: number\r\n    buffer: Buffer\r\n}\r\n\r\ninterface Attributes {\r\n    vertices: Attribute\r\n    vertexIndices: Buffer\r\n    colors: Attribute\r\n    textureCoordinates: Attribute\r\n    cameraIndex: Attribute\r\n}\r\n\r\ninterface Uniforms {\r\n    projection: UniformLocation\r\n    texture: UniformLocation\r\n    cameras: UniformLocation\r\n}\r\n\r\ninterface ProgramData {\r\n    vertexShader: Shader\r\n    fragmentShader: Shader\r\n    program: Program\r\n    attributes: Attributes\r\n    uniforms: Uniforms\r\n}\r\n\r\ntype DevicePixelRatio = number\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\nconst createTextMeasurements = (document: Document, gl: WebGL2Context, font: Font, dpr: DevicePixelRatio) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(font.size * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * dpr\r\n    canvas.height = size * dpr\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(dpr, dpr)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = `${font.size}px ${font.family}`\r\n    ctx.fillStyle = 'white'\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const height = font.size\r\n    const widths: number[] = []\r\n    const textureCoordinates: number[][] = []\r\n    for (let i = 0; i < totalCells; ++i) {\r\n        const c = String.fromCharCode(i)\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        widths.push(width)\r\n        const x0 = x / size\r\n        const x1 = (x + width) / size\r\n        const y0 = y / size\r\n        const y1 = (y + height) / size\r\n        textureCoordinates.push([\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        ])\r\n    }\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas\r\n    )\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return { widths, textureCoordinates, texture }\r\n}\r\n\r\nconst mapString = <T>(str: string, f: (c: string, i: number) => T): Array<T> => {\r\n    let result = []\r\n    for (let i = 0; i < str.length; ++i) {\r\n        result.push(f(str[i], i))\r\n    }\r\n    return result\r\n}\r\n\r\nexport class WebGL2Renderer {\r\n    _size: Size\r\n    _cameras: Matrix3x3[]\r\n\r\n    constructor(\r\n        public window: Window,\r\n        public document: Document,\r\n        public canvas: Canvas,\r\n        public gl: WebGL2Context,\r\n        public program: ProgramData,\r\n        public textures: Texture[],\r\n        public textMeasurementsCache: Map<string, TextMeasurements>,\r\n        public clickHandlers: ClickHandlers,\r\n    ) { }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    set size(size: Size) {\r\n        const { gl, program, window } = this\r\n        const { uniforms } = program\r\n        const { canvas } = gl\r\n        gl.uniformMatrix3fv(uniforms.projection, /*transpose*/true, projection(size))\r\n        canvas.width = size.width * window.devicePixelRatio\r\n        canvas.height = size.height * window.devicePixelRatio\r\n        canvas.style.width = `${size.width}px`\r\n        canvas.style.height = `${size.height}px`\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this._size = size\r\n    }\r\n\r\n    get size() { return this._size }\r\n\r\n    set cameras(cameras: Matrix3x3[]) {\r\n        const { gl, program } = this\r\n        const { uniforms } = program\r\n        const data: number[] = []\r\n        for (const camera of cameras) data.push(...camera)\r\n        gl.uniformMatrix3fv(uniforms.cameras, /*transpose*/true, data)\r\n        this._cameras = cameras\r\n    }\r\n\r\n    get cameras() { return this._cameras }\r\n\r\n    draw = ({ vertices, colors, vertexIndices, textureCoordinates, textureIndex, cameraIndex }: Batch) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        const texture = textures[textureIndex]\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndex), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.vertexIndices)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors }: Lines) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        const texture = textures[0]\r\n        const count = vertices.length / 2\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(Array(count * 2).fill(0)), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(Array(count).fill(0)), gl.STATIC_DRAW)\r\n        gl.drawArrays(gl.LINES, /*first*/0, count)\r\n    }\r\n\r\n    getTextureMeasurements = (font: Font, dpr: DevicePixelRatio) => {\r\n        const { document, gl } = this\r\n        const key = `${dpr} ${font.size} ${font.family}`\r\n        const measurements = this.textMeasurementsCache.get(key)\r\n        if (measurements) return measurements\r\n        const { texture, widths, textureCoordinates } = createTextMeasurements(document, gl, font, dpr)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newMeasurements = { widths, textureIndex, textureCoordinates }\r\n        this.textMeasurementsCache.set(key, newMeasurements)\r\n        return newMeasurements\r\n    }\r\n\r\n    measureText = (font: Font, str: string) => {\r\n        const { window } = this\r\n        const dpr = window.devicePixelRatio\r\n        const { widths, textureIndex, textureCoordinates } = this.getTextureMeasurements(font, dpr)\r\n        const indices = mapString(str, c => c.charCodeAt(0))\r\n        return {\r\n            widths: indices.map(i => widths[i]),\r\n            textureIndex,\r\n            textureCoordinates: indices.map(i => textureCoordinates[i]),\r\n        }\r\n    }\r\n}\r\n\r\nconst createVertexShader = (gl: WebGL2Context, attributes: Attributes): Shader => {\r\n    const { vertices, colors, textureCoordinates, cameraIndex } = attributes\r\n    const vertexShaderSource = `#version 300 es\r\n  uniform mat3 u_projection;\r\n  uniform mat3 u_cameras[8];\r\n\r\n  layout(location = ${vertices.location}) in vec2 a_vertex;\r\n  layout(location = ${colors.location}) in vec4 a_color;\r\n  layout(location = ${textureCoordinates.location}) in vec2 a_textureCoordinates;\r\n  layout(location = ${cameraIndex.location}) in uint a_cameraIndex;\r\n\r\n  out vec4 v_color;\r\n  out vec2 v_textureCoordinates;\r\n\r\n  void main() {\r\n    mat3 camera = u_cameras[a_cameraIndex];\r\n    mat3 transform = u_projection * inverse(camera);\r\n    gl_Position = vec4((transform * vec3(a_vertex, 1)).xy, 0, 1);\r\n    v_color = a_color / 255.0;\r\n    v_textureCoordinates = a_textureCoordinates;\r\n  }\r\n  `\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n    gl.shaderSource(vertexShader, vertexShaderSource)\r\n    gl.compileShader(vertexShader)\r\n    return vertexShader\r\n}\r\n\r\nconst createFragmentShader = (gl: WebGL2Context): Shader => {\r\n    const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec4 v_color;\r\n  in vec2 v_textureCoordinates;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  void main() {\r\n    fragColor = texture(u_texture, v_textureCoordinates) * v_color;\r\n  }\r\n  `\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n    gl.compileShader(fragmentShader)\r\n    return fragmentShader\r\n}\r\n\r\nconst bindVertices = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_vertex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindColors = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_color')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindTextureCoordinates = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_textureCoordinates')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindCameraIndex = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_cameraIndex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribIPointer(\r\n        location,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst createProgram = (gl: WebGL2Context): ProgramData => {\r\n    const attributes: Attributes = {\r\n        vertices: {\r\n            location: 0,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        colors: {\r\n            location: 1,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        textureCoordinates: {\r\n            location: 2,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        cameraIndex: {\r\n            location: 3,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        vertexIndices: gl.createBuffer()!\r\n    }\r\n    const vertexShader = createVertexShader(gl, attributes)\r\n    const fragmentShader = createFragmentShader(gl)\r\n    const program = gl.createProgram()!\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        console.log(gl.getShaderInfoLog(vertexShader))\r\n        console.log(gl.getShaderInfoLog(fragmentShader))\r\n    }\r\n    gl.useProgram(program)\r\n    const vertexArrayObject = gl.createVertexArray()!\r\n    gl.bindVertexArray(vertexArrayObject)\r\n    bindVertices(gl, program, attributes.vertices)\r\n    bindColors(gl, program, attributes.colors)\r\n    bindTextureCoordinates(gl, program, attributes.textureCoordinates)\r\n    bindCameraIndex(gl, program, attributes.cameraIndex)\r\n    const uniforms: Uniforms = {\r\n        projection: gl.getUniformLocation(program, 'u_projection')!,\r\n        texture: gl.getUniformLocation(program, 'u_texture')!,\r\n        cameras: gl.getUniformLocation(program, 'u_cameras')!\r\n    }\r\n    return {\r\n        vertexShader,\r\n        fragmentShader,\r\n        program,\r\n        attributes,\r\n        uniforms\r\n    }\r\n}\r\n\r\ninterface Parameters {\r\n    width: number\r\n    height: number\r\n    document: Document\r\n    window: Window\r\n}\r\n\r\nexport const webGL2Renderer = ({ width, height, document, window }: Parameters) => {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.style.touchAction = 'none'\r\n    const gl = canvas.getContext('webgl2')!\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n    gl.depthMask(false)\r\n    gl.activeTexture(gl.TEXTURE0)\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n    gl.clearColor(0, 0, 0, 1)\r\n    const program = createProgram(gl)\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255])\r\n    )\r\n    const renderer = new WebGL2Renderer(window, document, canvas, gl, program, [texture], new Map(), [])\r\n    renderer.size = { width, height }\r\n    return renderer\r\n}","import { pointerDown } from \"./renderer/pointer_down\"\r\nimport { render } from \"./renderer/render\"\r\nimport { webGL2Renderer } from \"./renderer/webgl2\"\r\nimport { Pointer, UI } from \"./ui\"\r\n\r\nexport const transformPointer = (p: PointerEvent): Pointer => ({\r\n    x: p.clientX,\r\n    y: p.clientY,\r\n    id: p.pointerId,\r\n})\r\n\r\nexport type Dispatch<Event> = (event: Event) => void\r\n\r\ntype View<State, Event> = (dispatch: Dispatch<Event>, state: State) => UI\r\n\r\ninterface Milliseconds {\r\n    milliseconds: number\r\n}\r\n\r\ninterface Scheduled<Event> {\r\n    after: Milliseconds\r\n    event: Event\r\n}\r\n\r\nexport interface UpdateResult<State, Event> {\r\n    state: State\r\n    render?: boolean\r\n    schedule?: Scheduled<Event>[]\r\n    dispatch?: Event[]\r\n}\r\n\r\ntype Update<State, Event> = (state: State, event: Event) => UpdateResult<State, Event>\r\n\r\nexport const run = <State, Event>(state: State, view: View<State, Event>, update: Update<State, Event>): Dispatch<Event> => {\r\n    let renderer = webGL2Renderer({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        window,\r\n        document\r\n    })\r\n    let renderQueued = false\r\n    const scheduleRender = () => {\r\n        if (!renderQueued) {\r\n            renderQueued = true\r\n            requestAnimationFrame(() => {\r\n                renderer = render(renderer, view(dispatch, state))\r\n                renderQueued = false\r\n            })\r\n        }\r\n    }\r\n    const dispatch = (event: Event) => {\r\n        const { state: newState, render, schedule, dispatch: dispatchEvents } = update(state, event)\r\n        state = newState\r\n        if (render) scheduleRender()\r\n        for (const { after, event } of schedule ?? []) {\r\n            const { milliseconds } = after\r\n            setTimeout(() => dispatch(event), milliseconds)\r\n        }\r\n        for (const event of dispatchEvents ?? []) dispatch(event)\r\n    }\r\n    document.body.appendChild(renderer.canvas as HTMLCanvasElement)\r\n    document.addEventListener(\"pointerdown\", p => {\r\n        renderer = pointerDown(renderer, transformPointer(p))\r\n    })\r\n    window.addEventListener(\"resize\", () => {\r\n        renderer.size = { width: window.innerWidth, height: window.innerHeight }\r\n        scheduleRender()\r\n    })\r\n    scheduleRender()\r\n    return dispatch\r\n}\r\n","import { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\nimport { Entry, MeasureText, UI } from \"../ui\"\r\n\r\nexport class CenterLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly child: Layout\r\n    ) { }\r\n}\r\n\r\nexport const centerLayout = (size: Size, child: Layout) =>\r\n    new CenterLayout(size, child)\r\n\r\nexport class CenterGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly child: Geometry\r\n    ) { }\r\n}\r\n\r\nexport const centerGeometry = (worldSpace: WorldSpace, child: Geometry) =>\r\n    new CenterGeometry(worldSpace, 0, [], [], [], [], [], child)\r\n\r\nexport class Center {\r\n    constructor(readonly child: UI) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const layout = this.child.layout(constraints, measureText)\r\n        const width = constraints.maxWidth\r\n        const height = constraints.maxHeight\r\n        return centerLayout({ width, height }, layout)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height,\r\n        })\r\n        const childLayout = (layout as CenterLayout).child\r\n        const childOffset = {\r\n            x: offset.x + layout.size.width / 2 - childLayout.size.width / 2,\r\n            y: offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n        }\r\n        const childGeometry = this.child.geometry(childLayout, childOffset, cameraStack)\r\n        return centerGeometry(worldSpace, childGeometry)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childLayout = (layout as CenterLayout).child\r\n        const childGeometry = (geometry as CenterGeometry).child\r\n        yield { ui: this, layout, geometry, z }\r\n        yield* this.child.traverse(childLayout, childGeometry, z + 1)\r\n    }\r\n}\r\n\r\nexport const center = (child: UI): Center =>\r\n    new Center(child)","import { Entry, MeasureText, UI } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"../alignment\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class ColumnLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly totalChildHeight: number,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const columnLayout = (size: Size, totalChildHeight: number, children: Layout[]) =>\r\n    new ColumnLayout(size, totalChildHeight, children)\r\n\r\nexport class ColumnGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const columnGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new ColumnGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Column {\r\n    constructor(\r\n        readonly mainAxisAlignment: MainAxisAlignment,\r\n        readonly crossAxisAlignment: CrossAxisAlignment,\r\n        readonly children: UI[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const initialChildren: Layout[] = []\r\n        const initial = {\r\n            children: initialChildren,\r\n            width: 0,\r\n            totalChildHeight: 0\r\n        }\r\n        const result = this.children.reduce((acc, child) => {\r\n            const layout = child.layout(constraints, measureText)\r\n            acc.children.push(layout)\r\n            acc.totalChildHeight += layout.size.height\r\n            acc.width = Math.max(acc.width, layout.size.width)\r\n            return acc\r\n        }, initial)\r\n        const { children, width, totalChildHeight } = result\r\n        const height = this.mainAxisAlignment == MainAxisAlignment.START ? totalChildHeight : constraints.maxHeight\r\n        return columnLayout({ width, height }, totalChildHeight, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const columnLayout = (layout as ColumnLayout)\r\n        const initialChildren: Geometry[] = []\r\n        const freeSpaceY = layout.size.height - columnLayout.totalChildHeight\r\n        const initial = {\r\n            children: initialChildren,\r\n            y: (() => {\r\n                switch (this.mainAxisAlignment) {\r\n                    case MainAxisAlignment.START: return offset.y\r\n                    case MainAxisAlignment.CENTER: return offset.y + freeSpaceY / 2\r\n                    case MainAxisAlignment.END: return offset.y + freeSpaceY\r\n                    case MainAxisAlignment.SPACE_EVENLY: return offset.y + freeSpaceY / (this.children.length + 1)\r\n                    case MainAxisAlignment.SPACE_BETWEEN: return offset.y\r\n                }\r\n            })(),\r\n        }\r\n        const addYStart = (childLayout: Layout) => childLayout.size.height\r\n        const addYCenter = (childLayout: Layout) => childLayout.size.height\r\n        const addYEnd = (childLayout: Layout) => childLayout.size.height\r\n        const addYSpaceEvenly = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (this.children.length + 1)\r\n        const addYSpaceBetween = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (this.children.length - 1)\r\n        const addY = (() => {\r\n            switch (this.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return addYStart\r\n                case MainAxisAlignment.CENTER: return addYCenter\r\n                case MainAxisAlignment.END: return addYEnd\r\n                case MainAxisAlignment.SPACE_EVENLY: return addYSpaceEvenly\r\n                case MainAxisAlignment.SPACE_BETWEEN: return addYSpaceBetween\r\n            }\r\n        })()\r\n        const offsetXStart = (_: Layout) => offset.x\r\n        const offsetXCenter = (childLayout: Layout) => offset.x + layout.size.width / 2 - childLayout.size.width / 2\r\n        const offsetXEnd = (childLayout: Layout) => offset.x + layout.size.width - childLayout.size.width\r\n        const offsetX = (() => {\r\n            switch (this.crossAxisAlignment) {\r\n                case CrossAxisAlignment.START: return offsetXStart\r\n                case CrossAxisAlignment.CENTER: return offsetXCenter\r\n                case CrossAxisAlignment.END: return offsetXEnd\r\n            }\r\n        })()\r\n        const result = this.children.reduce((acc, child, i) => {\r\n            const childLayout = columnLayout.children[i]\r\n            const childOffset = { x: offsetX(childLayout), y: acc.y }\r\n            const childGeometry = child.geometry(childLayout, childOffset, cameraStack)\r\n            acc.children.push(childGeometry)\r\n            acc.y += addY(childLayout)\r\n            return acc\r\n        }, initial)\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        })\r\n        return columnGeometry(worldSpace, result.children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as ColumnLayout).children\r\n        const childrenGeometry = (geometry as ColumnGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        const nextZ = z + 1\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            yield* child.traverse(childrenLayout[i], childrenGeometry[i], nextZ)\r\n            i += 1\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\ntype Overload = {\r\n    (children: UI[]): Column\r\n    (properties: Properties, children: UI[]): Column\r\n}\r\n\r\nexport const column: Overload = (...args: any[]): Column => {\r\n    const [properties, children] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return new Column(\r\n        properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    )\r\n}","import { CameraStack } from \"../camera_stack\"\r\nimport { Color } from \"../color\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\nimport { Padding, padding as paddingAll } from \"../padding\"\r\nimport { Entry, Id, MeasureText, OnClick, UI } from \"../ui\"\r\n\r\nexport class ContainerLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly child?: Layout\r\n    ) { }\r\n}\r\n\r\nexport const containerLayout = (size: Size, child?: Layout) =>\r\n    new ContainerLayout(size, child)\r\n\r\nexport class ContainerGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly child?: Geometry\r\n    ) { }\r\n}\r\n\r\ninterface GeometryData {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex?: number\r\n    readonly textureCoordinates?: number[]\r\n    readonly colors?: number[]\r\n    readonly vertices?: number[]\r\n    readonly vertexIndices?: number[]\r\n    readonly cameraIndex?: number[]\r\n}\r\n\r\nexport const containerGeometry = (data: GeometryData, child?: Geometry) => {\r\n    const vertices = data.vertices ?? []\r\n    return new ContainerGeometry(\r\n        data.worldSpace,\r\n        data.textureIndex ?? 0,\r\n        data.textureCoordinates ?? Array.from<number>({ length: vertices.length }).fill(0),\r\n        data.colors ?? [],\r\n        vertices,\r\n        data.vertexIndices ?? [],\r\n        data.cameraIndex ?? [],\r\n        child\r\n    )\r\n}\r\n\r\nexport class Container {\r\n    constructor(\r\n        readonly padding: Padding,\r\n        readonly width?: number,\r\n        readonly height?: number,\r\n        readonly x?: number,\r\n        readonly y?: number,\r\n        readonly color?: Color,\r\n        readonly onClick?: OnClick,\r\n        readonly id?: Id,\r\n        readonly child?: UI\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const { left, top, right, bottom } = this.padding\r\n        if (this.child) {\r\n            const layout = this.child.layout(constraints, measureText)\r\n            const width = this.width ?? layout.size.width + left + right\r\n            const height = this.height ?? layout.size.height + top + bottom\r\n            return containerLayout({ width, height }, layout)\r\n        }\r\n        const width = (() => {\r\n            if (this.width) return this.width + left + right\r\n            return constraints.maxWidth\r\n        })()\r\n        const height = (() => {\r\n            if (this.height) return this.height + top + bottom\r\n            return constraints.maxHeight\r\n        })()\r\n        return containerLayout({ width, height })\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const x0 = offset.x + (this.x ?? 0)\r\n        const x1 = x0 + layout.size.width\r\n        const y0 = offset.y + (this.y ?? 0)\r\n        const y1 = y0 + layout.size.height\r\n        const worldSpace = cameraStack.transformWorldSpace({ x0, x1, y0, y1 })\r\n        const data = (() => {\r\n            if (this.color) {\r\n                const { red, green, blue, alpha } = this.color\r\n                return {\r\n                    worldSpace,\r\n                    vertices: [\r\n                        x0, y0,\r\n                        x0, y1,\r\n                        x1, y0,\r\n                        x1, y1,\r\n                    ],\r\n                    colors: [\r\n                        red, green, blue, alpha,\r\n                        red, green, blue, alpha,\r\n                        red, green, blue, alpha,\r\n                        red, green, blue, alpha,\r\n                    ],\r\n                    vertexIndices: [\r\n                        0, 1, 2,\r\n                        1, 2, 3\r\n                    ],\r\n                    cameraIndex: Array(4).fill(cameraStack.activeCamera())\r\n                }\r\n            }\r\n            return {\r\n                worldSpace,\r\n                vertices: [],\r\n                colors: [],\r\n                vertexIndices: [],\r\n                cameraIndex: [],\r\n            }\r\n        })()\r\n        if (this.child) {\r\n            const childLayout = (layout as ContainerLayout).child!\r\n            const childOffset = {\r\n                x: x0 + this.padding.left,\r\n                y: y0 + this.padding.top\r\n            }\r\n            const childGeometry = this.child.geometry(childLayout, childOffset, cameraStack)\r\n            return containerGeometry(data, childGeometry)\r\n        }\r\n        return containerGeometry(data)\r\n    }\r\n\r\n    * traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        yield { ui: this, layout, geometry, z }\r\n        if (this.child) {\r\n            const childLayout = (layout as ContainerLayout).child!\r\n            const childGeometry = (geometry as ContainerGeometry).child!\r\n            yield* this.child.traverse(childLayout, childGeometry, z + 1)\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly padding?: Padding\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly onClick?: OnClick\r\n    readonly id?: Id\r\n}\r\n\r\nexport const container = ({ padding, width, height, color, x, y, onClick, id }: Properties, child?: UI): Container =>\r\n    new Container(\r\n        padding ?? paddingAll(0),\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        color,\r\n        onClick,\r\n        id,\r\n        child\r\n    )","import { Entry, MeasureText, UI } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"../alignment\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class RowLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly totalChildWidth: number,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const rowLayout = (size: Size, totalChildWidth: number, children: Layout[]) =>\r\n    new RowLayout(size, totalChildWidth, children)\r\n\r\nexport class RowGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const rowGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new RowGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Row {\r\n    constructor(\r\n        readonly mainAxisAlignment: MainAxisAlignment,\r\n        readonly crossAxisAlignment: CrossAxisAlignment,\r\n        readonly children: UI[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const initialChildren: Layout[] = []\r\n        const initial = {\r\n            children: initialChildren,\r\n            totalChildWidth: 0,\r\n            height: 0\r\n        }\r\n        const result = this.children.reduce((acc, child) => {\r\n            const layout = child.layout(constraints, measureText)\r\n            acc.children.push(layout)\r\n            acc.totalChildWidth += layout.size.width\r\n            acc.height = Math.max(acc.height, layout.size.height)\r\n            return acc\r\n        }, initial)\r\n        const { children, totalChildWidth, height } = result\r\n        const width = this.mainAxisAlignment == MainAxisAlignment.START ? totalChildWidth : constraints.maxWidth\r\n        return rowLayout({ width, height }, totalChildWidth, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const rowLayout = (layout as RowLayout)\r\n        const initialChildren: Geometry[] = []\r\n        const freeSpaceX = layout.size.width - rowLayout.totalChildWidth\r\n        const initial = {\r\n            children: initialChildren,\r\n            x: (() => {\r\n                switch (this.mainAxisAlignment) {\r\n                    case MainAxisAlignment.START: return offset.x\r\n                    case MainAxisAlignment.CENTER: return offset.x + freeSpaceX / 2\r\n                    case MainAxisAlignment.END: return offset.x + freeSpaceX\r\n                    case MainAxisAlignment.SPACE_EVENLY: return offset.x + freeSpaceX / (this.children.length + 1)\r\n                    case MainAxisAlignment.SPACE_BETWEEN: return offset.x\r\n                }\r\n            })(),\r\n        }\r\n        const addXStart = (childLayout: Layout) => childLayout.size.width\r\n        const addXCenter = (childLayout: Layout) => childLayout.size.width\r\n        const addXEnd = (childLayout: Layout) => childLayout.size.width\r\n        const addXSpaceEvenly = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (this.children.length + 1)\r\n        const addXSpaceBetween = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (this.children.length - 1)\r\n        const addX = (() => {\r\n            switch (this.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return addXStart\r\n                case MainAxisAlignment.CENTER: return addXCenter\r\n                case MainAxisAlignment.END: return addXEnd\r\n                case MainAxisAlignment.SPACE_EVENLY: return addXSpaceEvenly\r\n                case MainAxisAlignment.SPACE_BETWEEN: return addXSpaceBetween\r\n            }\r\n        })()\r\n        const offsetYStart = (_: Layout) => offset.y\r\n        const offsetYCenter = (childLayout: Layout) => offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n        const offsetYEnd = (childLayout: Layout) => offset.y + layout.size.height - childLayout.size.height\r\n        const offsetY = (() => {\r\n            switch (this.crossAxisAlignment) {\r\n                case CrossAxisAlignment.START: return offsetYStart\r\n                case CrossAxisAlignment.CENTER: return offsetYCenter\r\n                case CrossAxisAlignment.END: return offsetYEnd\r\n            }\r\n        })()\r\n        const result = this.children.reduce((acc, child, i) => {\r\n            const childLayout = rowLayout.children[i]\r\n            const childOffset = { x: acc.x, y: offsetY(childLayout) }\r\n            const childGeometry = child.geometry(childLayout, childOffset, cameraStack)\r\n            acc.children.push(childGeometry)\r\n            acc.x += addX(childLayout)\r\n            return acc\r\n        }, initial)\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height,\r\n        })\r\n        return rowGeometry(worldSpace, result.children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as RowLayout).children\r\n        const childrenGeometry = (geometry as RowGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        const nextZ = z + 1\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            yield* child.traverse(childrenLayout[i], childrenGeometry[i], nextZ)\r\n            i += 1\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\ntype Overload = {\r\n    (children: UI[]): Row\r\n    (properties: Properties, children: UI[]): Row\r\n}\r\n\r\nexport const row: Overload = (...args: any[]): Row => {\r\n    const [properties, children] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return new Row(\r\n        properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    )\r\n}","import { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\nimport { Matrix3x3 } from \"../linear_algebra/matrix3x3\"\r\nimport { Connection, Entry, MeasureText, UI } from \"../ui\"\r\n\r\nexport class SceneLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const sceneLayout = (size: Size, children: Layout[]) =>\r\n    new SceneLayout(size, children)\r\n\r\nexport class SceneGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const sceneGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new SceneGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Scene {\r\n    constructor(\r\n        readonly camera: Matrix3x3,\r\n        readonly children: UI[],\r\n        readonly connections: Connection[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const children = this.children.map(c => c.layout(constraints, measureText))\r\n        const width = constraints.maxWidth\r\n        const height = constraints.maxHeight\r\n        return sceneLayout({ width, height }, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        })\r\n        const childrenLayout = (layout as SceneLayout).children\r\n        cameraStack.pushCamera(this.camera)\r\n        const children = this.children.map((c, i) => c.geometry(childrenLayout[i], offset, cameraStack))\r\n        cameraStack.popCamera()\r\n        return sceneGeometry(worldSpace, children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as SceneLayout).children\r\n        const childrenGeometry = (geometry as SceneGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            for (const entry of child.traverse(childrenLayout[i], childrenGeometry[i], z)) {\r\n                yield entry\r\n                z = Math.max(z, entry.z)\r\n            }\r\n            i++\r\n            z++\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    camera: Matrix3x3\r\n    children: UI[]\r\n    connections?: Connection[]\r\n}\r\n\r\nexport const scene = (properties: Properties): Scene =>\r\n    new Scene(properties.camera, properties.children, properties.connections ?? [])","import { Entry, MeasureText, UI } from \".\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class StackLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const stackLayout = (size: Size, children: Layout[]) =>\r\n    new StackLayout(size, children)\r\n\r\nexport class StackGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const stackGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new StackGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Stack {\r\n    constructor(readonly children: UI[]) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const children = this.children.map(c => c.layout(constraints, measureText))\r\n        const width = constraints.maxWidth\r\n        const height = constraints.maxHeight\r\n        return stackLayout({ width, height }, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const stackLayout = (layout as StackLayout)\r\n        const children = this.children.map((c, i) => c.geometry(stackLayout.children[i], offset, cameraStack))\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height,\r\n        })\r\n        return stackGeometry(worldSpace, children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as StackLayout).children\r\n        const childrenGeometry = (geometry as StackGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            for (const entry of child.traverse(childrenLayout[i], childrenGeometry[i], z)) {\r\n                yield entry\r\n                z = Math.max(z, entry.z)\r\n            }\r\n            i += 1\r\n            z += 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const stack = (children: UI[]): Stack =>\r\n    new Stack(children)","import { Entry, Font, MeasureText, TextMeasurements } from \".\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Color } from \"../color\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class TextLayout {\r\n    constructor(\r\n        readonly measurements: TextMeasurements,\r\n        readonly size: Size\r\n    ) { }\r\n}\r\n\r\nexport const textLayout = (measurements: TextMeasurements, size: Size) =>\r\n    new TextLayout(measurements, size)\r\n\r\n\r\nexport class TextGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n    ) { }\r\n}\r\n\r\ninterface GeometryData {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly colors: number[]\r\n    readonly vertices: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n}\r\n\r\nconst vertices = (widths: number[], height: number, offset: Offset) => {\r\n    const result = []\r\n    let offsetX = offset.x\r\n    const y0 = offset.y\r\n    const y1 = offset.y + height\r\n    for (const width of widths) {\r\n        const x0 = offsetX\r\n        const x1 = offsetX + width\r\n        result.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        )\r\n        offsetX += width\r\n    }\r\n    return result\r\n}\r\n\r\nconst colors = (n: number, { red, green, blue, alpha }: Color) => {\r\n    const result = []\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n        )\r\n    }\r\n    return result\r\n}\r\n\r\nconst vertexIndices = (n: number) => {\r\n    const result = []\r\n    let offset = 0\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            offset, offset + 1, offset + 2,\r\n            offset + 1, offset + 2, offset + 3\r\n        )\r\n        offset += 4\r\n    }\r\n    return result\r\n}\r\n\r\nexport const textGeometry = (data: GeometryData) =>\r\n    new TextGeometry(\r\n        data.worldSpace,\r\n        data.textureIndex,\r\n        data.textureCoordinates,\r\n        data.colors,\r\n        data.vertices,\r\n        data.vertexIndices,\r\n        data.cameraIndex,\r\n    )\r\n\r\nexport class Text {\r\n    constructor(\r\n        readonly font: Font,\r\n        readonly color: Color,\r\n        readonly str: string\r\n    ) { }\r\n\r\n    layout(_: Constraints, measureText: MeasureText) {\r\n        const { font, str } = this\r\n        const measurements = measureText(font, str)\r\n        const width = measurements.widths.reduce((acc, width) => acc + width)\r\n        const size = { width, height: font.size }\r\n        return textLayout(measurements, size)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const textLayout = layout as TextLayout\r\n        const { measurements } = textLayout\r\n        const { textureIndex, textureCoordinates, widths } = measurements\r\n        return textGeometry({\r\n            worldSpace: cameraStack.transformWorldSpace({\r\n                x0: offset.x,\r\n                y0: offset.y,\r\n                x1: offset.x + layout.size.width,\r\n                y1: offset.y + layout.size.height\r\n            }),\r\n            textureIndex,\r\n            textureCoordinates: textureCoordinates.flat(),\r\n            colors: colors(widths.length, this.color),\r\n            vertices: vertices(widths, this.font.size, offset),\r\n            vertexIndices: vertexIndices(widths.length),\r\n            cameraIndex: Array(widths.length * 4).fill(cameraStack.activeCamera())\r\n        })\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        yield { ui: this, layout, geometry, z }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly font?: string\r\n    readonly size?: number\r\n    readonly color?: Color\r\n}\r\n\r\ntype Overload = {\r\n    (str: String): Text\r\n    (properties: Properties, str: String): Text\r\n}\r\n\r\nexport const text: Overload = (...args: any[]): Text => {\r\n    const [properties, str] = (() =>\r\n        typeof args[0] == 'string' ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    const font = {\r\n        family: properties.font ?? \"monospace\",\r\n        size: properties.size ?? 14\r\n    }\r\n    return new Text(\r\n        font,\r\n        properties.color ?? { red: 255, green: 255, blue: 255, alpha: 255 },\r\n        str\r\n    )\r\n}","import { CrossAxisAlignment, MainAxisAlignment } from \"./alignment\"\r\nimport { Event, EventKind, update } from \"./event\"\r\nimport { identity } from \"./linear_algebra/matrix3x3\"\r\nimport { padding } from \"./padding\"\r\nimport { Dispatch, run, transformPointer } from \"./run\"\r\nimport { Finder, Input, Node, Output, State, Theme } from \"./state\"\r\nimport { Connection, UI } from \"./ui\"\r\nimport { center } from \"./ui/center\"\r\nimport { column } from \"./ui/column\"\r\nimport { container } from \"./ui/container\"\r\nimport { row } from \"./ui/row\"\r\nimport { scene } from \"./ui/scene\"\r\nimport { stack } from \"./ui/stack\"\r\nimport { text } from \"./ui/text\"\r\n\r\nconst spacer = (size: number) =>\r\n    container({ width: size, height: size })\r\n\r\nconst intersperse = <T>(array: T[], seperator: T): T[] => {\r\n    const result = [array[0]]\r\n    for (const element of array.slice(1)) {\r\n        result.push(seperator, element)\r\n    }\r\n    return result\r\n}\r\n\r\nconst inputUi = (theme: Theme, { name, selected }: Input, nodeIndex: number, inputIndex: number): UI =>\r\n    container({\r\n        onClick: () => dispatch({\r\n            kind: EventKind.CLICKED_INPUT,\r\n            inputPath: { nodeIndex: nodeIndex, inputIndex: inputIndex }\r\n        })\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            container({\r\n                id: `input ${nodeIndex} ${inputIndex}`,\r\n                width: 14,\r\n                height: 14,\r\n                color: selected ? theme.selectedInput : theme.input,\r\n            }),\r\n            spacer(4),\r\n            text(name)\r\n        ])\r\n    )\r\n\r\nconst inputsUi = (theme: Theme, inputs: Input[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            inputs.map((input, inputIndex) => inputUi(theme, input, nodeIndex, inputIndex)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\nconst outputUi = (theme: Theme, { name, selected }: Output, nodeIndex: number, outputIndex: number): UI =>\r\n    container({\r\n        onClick: () => dispatch({\r\n            kind: EventKind.CLICKED_OUTPUT,\r\n            outputPath: { nodeIndex: nodeIndex, outputIndex: outputIndex }\r\n        })\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            container({\r\n                id: `output ${nodeIndex} ${outputIndex}`,\r\n                width: 14,\r\n                height: 14,\r\n                color: selected ? theme.selectedInput : theme.input,\r\n            }),\r\n        ])\r\n    )\r\n\r\n\r\nconst outputsUi = (theme: Theme, outputs: Output[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            outputs.map((output, outputIndex) => outputUi(theme, output, nodeIndex, outputIndex)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\nconst nodeUi = (dispatch: Dispatch<Event>, theme: Theme, { name, x, y, inputs, outputs }: Node, index: number) => {\r\n    const rowEntries: UI[] = []\r\n    if (inputs.length) rowEntries.push(inputsUi(theme, inputs, index))\r\n    if (inputs.length && outputs.length) rowEntries.push(spacer(15))\r\n    if (outputs.length) rowEntries.push(outputsUi(theme, outputs, index))\r\n    return container({\r\n        color: theme.node,\r\n        padding: padding(4),\r\n        x, y,\r\n        onClick: () => dispatch({\r\n            kind: EventKind.CLICKED_NODE,\r\n            index: index\r\n        })\r\n    },\r\n        column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            row(rowEntries)\r\n        ])\r\n    )\r\n}\r\n\r\nconst finder = ({ search, options }: Finder, theme: Theme) =>\r\n    center(\r\n        container({ color: theme.node, padding: padding(4) },\r\n            column([\r\n                container({ color: theme.background, width: 300, padding: padding(4) },\r\n                    text({ color: theme.input, size: 24 }, search.length ? search : \"Search ...\")),\r\n                container({ width: 10, height: 10 }),\r\n                ...options.map(option => container({ padding: padding(4) }, text(option)))\r\n            ])\r\n        )\r\n    )\r\n\r\nconst virtualKey = (dispatch: Dispatch<Event>, key: string) =>\r\n    container({\r\n        padding: padding(4),\r\n        onClick: () => dispatch({\r\n            kind: EventKind.VIRTUAL_KEYDOWN,\r\n            key\r\n        })\r\n    }, text(key))\r\n\r\nconst virtualKeys = (dispatch: Dispatch<Event>, keys: string[]) =>\r\n    row(keys.map(c => virtualKey(dispatch, c)))\r\n\r\nconst virtualKeyboard = (dispatch: Dispatch<Event>, theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.SPACE_BETWEEN }, [\r\n            container({ padding: padding(4), color: theme.node },\r\n                column([\r\n                    virtualKeys(dispatch, ['1', '2', '3', '4', '5']),\r\n                    virtualKeys(dispatch, ['q', 'w', 'e', 'r', 't']),\r\n                    virtualKeys(dispatch, ['a', 's', 'd', 'f', 'g']),\r\n                    virtualKeys(dispatch, ['z', 'x', 'c', 'v']),\r\n                    virtualKeys(dispatch, ['sft', 'space']),\r\n                ])\r\n            ),\r\n            container({ padding: padding(4), color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(dispatch, ['6', '7', '8', '9', '0']),\r\n                    virtualKeys(dispatch, ['y', 'u', 'i', 'o', 'p']),\r\n                    virtualKeys(dispatch, ['h', 'j', 'k', 'l']),\r\n                    virtualKeys(dispatch, ['b', 'n', 'm', 'del']),\r\n                    virtualKeys(dispatch, ['space', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\n\r\nconst view = (dispatch: Dispatch<Event>, state: State) => {\r\n    if (!state.finder.show) {\r\n        const nodes: UI[] = []\r\n        state.graph.nodes.forEach((node, i) => {\r\n            if (i !== state.draggedNode) nodes.push(nodeUi(dispatch, state.theme, node, i))\r\n        })\r\n        if (state.draggedNode !== null) {\r\n            const i = state.draggedNode\r\n            nodes.push(nodeUi(dispatch, state.theme, state.graph.nodes[i], i))\r\n        }\r\n        const connections: Connection[] = state.graph.edges.map(({ input, output }) => ({\r\n            from: `output ${output.nodeIndex} ${output.outputIndex}`,\r\n            to: `input ${input.nodeIndex} ${input.inputIndex}`,\r\n            color: state.theme.connection\r\n        }))\r\n        return stack([\r\n            container({ color: state.theme.background }),\r\n            scene({ camera: state.camera, children: nodes, connections }),\r\n        ])\r\n    }\r\n    return stack([\r\n        container({ color: state.theme.background }),\r\n        finder(state.finder, state.theme),\r\n        virtualKeyboard(dispatch, state.theme)\r\n    ])\r\n}\r\n\r\nconst initialState: State = {\r\n    graph: {\r\n        nodes: [\r\n            {\r\n                name: \"Source\",\r\n                inputs: [],\r\n                outputs: [\r\n                    { name: \"Out 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"Out 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                x: 7,\r\n                y: 15\r\n            },\r\n            {\r\n                name: \"Transform\",\r\n                inputs: [\r\n                    { name: \"In 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"In 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                outputs: [\r\n                    { name: \"Out 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"Out 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                x: window.innerWidth / 2 - 70,\r\n                y: 50\r\n            },\r\n            {\r\n                name: \"Sink\",\r\n                inputs: [\r\n                    { name: \"In 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"In 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                outputs: [],\r\n                x: window.innerWidth - 70,\r\n                y: 15\r\n            },\r\n        ],\r\n        edges: []\r\n    },\r\n    zooming: false,\r\n    dragging: false,\r\n    draggedNode: null,\r\n    pointers: [],\r\n    pointerDistance: 0,\r\n    pointerCenter: [0, 0],\r\n    camera: identity(),\r\n    selectedOutput: null,\r\n    selectedInput: null,\r\n    theme: {\r\n        background: { red: 2, green: 22, blue: 39, alpha: 255 },\r\n        node: { red: 41, green: 95, blue: 120, alpha: 255 },\r\n        input: { red: 188, green: 240, blue: 192, alpha: 255 },\r\n        selectedInput: { red: 175, green: 122, blue: 208, alpha: 255 },\r\n        connection: { red: 255, green: 255, blue: 255, alpha: 255 },\r\n    },\r\n    potentialDoubleClick: false,\r\n    finder: {\r\n        search: '',\r\n        options: [],\r\n        show: false\r\n    },\r\n    operations: {\r\n        \"Add\": {\r\n            name: \"Add\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Subtract\": {\r\n            name: \"Subtract\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Multiply\": {\r\n            name: \"Multiply\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Divide\": {\r\n            name: \"Divide\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Equal\": {\r\n            name: \"Equal\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Less Than\": {\r\n            name: \"Less Than\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Less Than Or Equal\": {\r\n            name: \"Less Than Or Equal\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        }\r\n    }\r\n}\r\n\r\nconst dispatch = run(initialState, view, update)\r\n\r\nif (typeof PointerEvent.prototype.getCoalescedEvents === 'function') {\r\n    document.addEventListener('pointermove', (e) => {\r\n        e.getCoalescedEvents().forEach(p => {\r\n            dispatch({\r\n                kind: EventKind.POINTER_MOVE,\r\n                pointer: transformPointer(p)\r\n            })\r\n        })\r\n    })\r\n} else {\r\n    document.addEventListener('pointermove', p =>\r\n        dispatch({\r\n            kind: EventKind.POINTER_MOVE,\r\n            pointer: transformPointer(p)\r\n        })\r\n    )\r\n}\r\n\r\ndocument.addEventListener(\"pointerdown\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_DOWN,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener(\"pointerup\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_UP,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener('wheel', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.WHEEL,\r\n        x: e.clientX,\r\n        y: e.clientY,\r\n        deltaY: e.deltaY,\r\n    })\r\n}, { passive: false })\r\n\r\ndocument.addEventListener('contextmenu', e => {\r\n    e.preventDefault()\r\n})\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    document.body.requestFullscreen()\r\n})\r\n\r\ndocument.addEventListener('keydown', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.KEYDOWN,\r\n        key: e.key\r\n    })\r\n})"],"names":["$38d7a2dac5bc7fa9$export$6595504a60e1f77c","MainAxisAlignment1","$38d7a2dac5bc7fa9$export$66a3248d846611ce","CrossAxisAlignment1","$f4c0df53f29f413e$export$fad298d038a96a64","haystack","needle","haystackIndex","needleIndex","length","n","toLowerCase","$2a9d6d4b688c9d90$export$b74061472fe7c07","width","height","$2a9d6d4b688c9d90$export$d73ee8ef04f5226a","x","y","$2a9d6d4b688c9d90$export$dcdf75081b88279d","$2a9d6d4b688c9d90$export$84b43e5e8429f175","matrices","head","tail","reduce","a","b","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","$2a9d6d4b688c9d90$export$dbb85424dca880d0","b1","b2","b3","$2a9d6d4b688c9d90$export$70ae2c07e401031b","idet","$9a57707492d0f60d$export$f24224f1c91d8156","c","Math","sqrt","pow","$d7336fab2a6e7c56$export$50508d7849040d51","EventKind1","$d7336fab2a6e7c56$var$pointerMove","state","event","dragging","zooming","rerender","index","pointers","findIndex","p","id","pointer","dx","dy","draggedNode","scaling","camera","node","graph","nodes","render","p0","p1","x1","y1","x2","y2","distance","previousDistance","pointerDistance","previousCenter","pointerCenter","move","zoom","moveBack","$d7336fab2a6e7c56$var$updateFinderOptions","finder","options","Object","keys","operations","filter","item","search","slice","$810e59d520bce11e$export$8ee6ea94b5aedb49","constructor","top","right","bottom","left","$810e59d520bce11e$export$6f98e8eaf0be1996","value","$f97aa2d16f86c383$var$inWorldSpace","x0","y0","$f97aa2d16f86c383$export$e6e29dfeb5ef19c1","renderer","i","clickHandlers","onClick","worldSpace","$db98e7c147af88a3$var$newBatch","textureIndex","vertices","colors","vertexIndices","textureCoordinates","cameraIndex","$db98e7c147af88a3$export$1e96939139b396da","layers","batches","batch","layer","geometries","push","geometry","offset","$14955c3b2c9570b5$export$e6fddfd45b239a42","this","cameras","stack","transform","pushCamera","popCamera","pop","activeCamera","transformWorldSpace","_0","_1","$cecff29ae76c43d7$export$533b26079ad0b4b","ui","layout","reducer","accumulator","initial","entry","traverse","combine","$c7f5b399ef6aea66$export$390ef945b5a425a7","lookup","$45d6bbdb80ff139b$var$cubicBezier","ts","from","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","first","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$45d6bbdb80ff139b$export$48a436e09c0b8a4d","connections","idToWorldSpace","start","stop","num","step","Array","_","$45d6bbdb80ff139b$var$linspace","color","red","green","blue","alpha","samples","$f0ab672d0c96c5dc$export$8c1d7deec90f08c1","needed","z","Map","get","newGeometry","set","$f0ab672d0c96c5dc$export$707dc0d5406a403a","handlers","$f0ab672d0c96c5dc$export$1c1147d11a715c65","$f0ab672d0c96c5dc$export$1650419e431d3ba3","acc","$f0ab672d0c96c5dc$export$b3890eb0ae9dca99","size","clear","constraints","minWidth","maxWidth","minHeight","maxHeight","measureText","cameraStack","lines","draw","drawLines","$30cee85f95a8e397$export$ce2766bf4a8721d3","window1","document1","canvas","gl1","program1","textures1","textMeasurementsCache","window","document","gl","program","textures","COLOR_BUFFER_BIT","attributes","texture","bindTexture","TEXTURE_2D","bindBuffer","ARRAY_BUFFER","buffer","bufferData","Float32Array","STATIC_DRAW","Uint8Array","ELEMENT_ARRAY_BUFFER","Uint16Array","drawElements","TRIANGLES","UNSIGNED_SHORT","count","fill","drawArrays","LINES","getTextureMeasurements","font","dpr","key","family","measurements","widths","createElement","ctx","getContext","rows","current","$30cee85f95a8e397$var$nearestPowerOfTwo","cellSize","style","scale","textAlign","textBaseline","fillStyle","clearRect","String","fromCharCode","metric","ceil","floor","fillText","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","$30cee85f95a8e397$var$createTextMeasurements","newMeasurements","str","devicePixelRatio","indices","f","result","$30cee85f95a8e397$var$mapString","charCodeAt","map","uniforms","uniformMatrix3fv","projection","viewport","_size","data","_cameras","location","createBuffer","vertexShader","vertexShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","$30cee85f95a8e397$var$createVertexShader","fragmentShader","FRAGMENT_SHADER","$30cee85f95a8e397$var$createFragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","log","getShaderInfoLog","useProgram","vertexArrayObject","createVertexArray","bindVertexArray","FLOAT","$30cee85f95a8e397$var$bindVertices","$30cee85f95a8e397$var$bindColors","bindAttribLocation","enableVertexAttribArray","vertexAttribPointer","$30cee85f95a8e397$var$bindTextureCoordinates","vertexAttribIPointer","getUniformLocation","$6119d70cc28f8b94$export$479aac53993fd71","clientX","clientY","pointerId","$fd89ce3675dee463$export$35a4c8543d37ef8a","child","$fd89ce3675dee463$export$7b1e9ca9e29f9a5d","$fd89ce3675dee463$export$1f54913ccc4368b1","childLayout","childOffset","$fd89ce3675dee463$export$efb2657d225c129a","childGeometry","$518015a6e3cc694d$export$c7e5bac7049eee2a","totalChildHeight","children","$518015a6e3cc694d$export$dfd18615cd7e86d6","$518015a6e3cc694d$export$816b5d811295e6bc","mainAxisAlignment","crossAxisAlignment","max","$518015a6e3cc694d$export$f8ce731bdfd45dc7","START","columnLayout1","freeSpaceY","CENTER","END","SPACE_EVENLY","SPACE_BETWEEN","addYStart","addYCenter","addYEnd","addYSpaceEvenly","addYSpaceBetween","addY","offsetXStart","offsetXCenter","offsetXEnd","offsetX","$518015a6e3cc694d$export$5a1548308f4d4391","childrenLayout","childrenGeometry","nextZ","$518015a6e3cc694d$export$4e0c71f277ca26b3","args","properties","$8a99d960732a172f$export$26c271df922a3d3c","$8a99d960732a172f$export$a4e80cd8d85917bb","$8a99d960732a172f$export$76c47790527e6c8a","$8a99d960732a172f$export$7c88ce694bad6320","$8a99d960732a172f$export$42a852a2b6b56249","padding","$8a99d960732a172f$export$34e0f9847d4c02dd","$9e4edab979495f0d$export$593b1ed5b05b470","totalChildWidth","$9e4edab979495f0d$export$aef74122d3baefd6","$9e4edab979495f0d$export$b59bdbef9ce70de2","$9e4edab979495f0d$export$4076779b9674714b","rowLayout1","freeSpaceX","addXStart","addXCenter","addXEnd","addXSpaceEvenly","addXSpaceBetween","addX","offsetYStart","offsetYCenter","offsetYEnd","offsetY","$9e4edab979495f0d$export$90e65e88c1393562","$9e4edab979495f0d$export$120ff0929b202a6d","$864b15efd9f5e1a7$export$183888ffeb127955","$864b15efd9f5e1a7$export$cbdc2ca6cb1fbaf1","$864b15efd9f5e1a7$export$38af1803e3442a7f","$864b15efd9f5e1a7$export$9e03d30774b30061","$864b15efd9f5e1a7$export$7a4266c2aa024d65","$d380360335f9e6c0$export$4a33896fea5f6057","$d380360335f9e6c0$export$288eb08f379bb85f","$d380360335f9e6c0$export$694e0d28c7ffc90c","$d380360335f9e6c0$export$b008c3d2ea57ca56","stackLayout1","$d380360335f9e6c0$export$218db93a2e8965d","$d380360335f9e6c0$export$a57ab32f40f83ea9","$2d5075f154be1094$export$211e101f90b3ed3","$2d5075f154be1094$export$684b774b4473ba5f","colors1","vertices1","vertexIndices1","$2d5075f154be1094$var$vertices","$2d5075f154be1094$var$colors","$2d5075f154be1094$var$vertexIndices","$2d5075f154be1094$export$5f1af8db9871e1d6","width1","$2d5075f154be1094$export$801f12fcd9ba2788","textLayout1","flat","$2d5075f154be1094$export$6f093cfa640b7166","$b4e14b6b8da86996$var$spacer","$b4e14b6b8da86996$var$intersperse","array","seperator","element","$b4e14b6b8da86996$var$inputsUi","theme","inputs","nodeIndex","input","inputIndex","name","selected","$b4e14b6b8da86996$var$dispatch","kind","CLICKED_INPUT","inputPath","selectedInput","$b4e14b6b8da86996$var$inputUi","$b4e14b6b8da86996$var$outputsUi","outputs","output","outputIndex","CLICKED_OUTPUT","outputPath","$b4e14b6b8da86996$var$outputUi","$b4e14b6b8da86996$var$nodeUi","dispatch1","rowEntries","CLICKED_NODE","$b4e14b6b8da86996$var$finder","background","option","$b4e14b6b8da86996$var$virtualKeys","dispatch3","$b4e14b6b8da86996$var$virtualKey","dispatch2","VIRTUAL_KEYDOWN","view","update","$30cee85f95a8e397$export$94781114c991ae1c","innerWidth","innerHeight","renderQueued","scheduleRender","requestAnimationFrame","dispatch","newState","render1","schedule","dispatchEvents","after","event1","milliseconds","setTimeout","event2","body","appendChild","addEventListener","edgeIndices","edges","selectedOutput","connection","potentialDoubleClick","show","Add","Subtract","Multiply","Divide","Equal","dispatch5","forEach","dispatch4","POINTER_DOWN","DOUBLE_CLICK","DOUBLE_CLICK_TIMEOUT","$d7336fab2a6e7c56$var$pointerDown","POINTER_UP","splice","$d7336fab2a6e7c56$var$pointerUp","POINTER_MOVE","$d7336fab2a6e7c56$var$clickedNode","WHEEL","deltaY","$d7336fab2a6e7c56$var$wheel","edgeIndex","$d7336fab2a6e7c56$var$clickedInput","$d7336fab2a6e7c56$var$clickedOutput","$d7336fab2a6e7c56$var$doubleClickTimeout","$d7336fab2a6e7c56$var$doubleClick","KEYDOWN","$d7336fab2a6e7c56$var$keyDown","$d7336fab2a6e7c56$var$virtualKeyDown","PointerEvent","prototype","getCoalescedEvents","e","preventDefault","passive","requestFullscreen"],"version":3,"file":"index.7bd57e02.js.map"}