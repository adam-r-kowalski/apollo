{"mappings":"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","sources":["src/ui/alignment.ts","src/fuzzy_find.ts","src/linear_algebra/matrix3x3.ts","src/linear_algebra/vector3.ts","src/state.ts","src/event.ts","src/ui/pointer_down.ts","src/ui/batch_geometry.ts","src/ui/camera_stack.ts","src/ui/center.ts","src/ui/column.ts","src/ui/container.ts","src/ui/row.ts","src/ui/scene.ts","src/ui/stack.ts","src/ui/text.ts","src/ui/index.ts","src/ui/reduce.ts","src/ui/gather_on_click_handlers.ts","src/ui/id_to_world_space.ts","src/ui/layer_geometry.ts","src/ui/gather_connections.ts","src/ui/reducer.ts","src/ui/connection_geometry.ts","src/ui/render.ts","src/ui/webgl2.ts","src/ui/run.ts","src/index.ts"],"sourcesContent":["export enum MainAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END,\r\n    SPACE_EVENLY,\r\n    SPACE_BETWEEN\r\n}\r\n\r\nexport enum CrossAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END\r\n}","export interface FuzzyFind {\r\n    haystack: string\r\n    needle: string\r\n}\r\n\r\nexport const fuzzyFind = ({ haystack, needle }: FuzzyFind): boolean => {\r\n    let haystackIndex = 0\r\n    let needleIndex = 0\r\n    while (needleIndex < needle.length) {\r\n        const n = needle[needleIndex].toLowerCase()\r\n        while (haystackIndex < haystack.length && n !== haystack[haystackIndex].toLowerCase()) {\r\n            ++haystackIndex\r\n        }\r\n        if (haystackIndex === haystack.length) return false\r\n        ++needleIndex\r\n    }\r\n    return true\r\n}\r\n","import { Size } from \"../ui\"\r\nimport { Vector3 } from \"./vector3\"\r\n\r\nexport type Matrix3x3 = number[]\r\n\r\nexport const identity = (): Matrix3x3 => [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n]\r\n\r\nexport const projection = ({ width, height }: Size): Matrix3x3 => [\r\n    2 / width, 0, -1,\r\n    0, -2 / height, 1,\r\n    0, 0, 1\r\n]\r\n\r\nexport const translate = (x: number, y: number): Matrix3x3 => [\r\n    1, 0, x,\r\n    0, 1, y,\r\n    0, 0, 1\r\n]\r\n\r\nexport const scale = (x: number, y: number): Matrix3x3 => [\r\n    x, 0, 0,\r\n    0, y, 0,\r\n    0, 0, 1\r\n]\r\n\r\nexport const rotate = (radians: number): Matrix3x3 => {\r\n    const c = Math.cos(radians)\r\n    const s = Math.sin(radians)\r\n    return [\r\n        c, s, 0,\r\n        -s, c, 0,\r\n        0, 0, 1\r\n    ]\r\n}\r\n\r\nexport const multiplyMatrices = (...matrices: Matrix3x3[]) => {\r\n    const [head, ...tail] = matrices\r\n    return tail.reduce((a, b) => {\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return [\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ]\r\n    }, head)\r\n}\r\n\r\nexport const multiplyMatrixVector = (a: Matrix3x3, b: Vector3): Vector3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b1 = b[0]\r\n    const b2 = b[1]\r\n    const b3 = b[2]\r\n    const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n    const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n    const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n    return [c1, c2, c3]\r\n}\r\n\r\nexport const inverse = (a: Matrix3x3): Matrix3x3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b11 = a22 * a33 - a23 * a32\r\n    const b12 = a21 * a33 - a23 * a31\r\n    const b13 = a21 * a32 - a22 * a31\r\n    const b21 = a12 * a33 - a13 * a32\r\n    const b22 = a11 * a33 - a13 * a31\r\n    const b23 = a11 * a32 - a12 * a31\r\n    const b31 = a12 * a23 - a13 * a22\r\n    const b32 = a11 * a23 - a13 * a21\r\n    const b33 = a11 * a22 - a12 * a21\r\n    const det = a31 * b31 - a32 * b32 + a33 * b33\r\n    const idet = 1 / det\r\n    return [\r\n        idet * b11, idet * -b21, idet * b31,\r\n        idet * -b12, idet * b22, idet * -b32,\r\n        idet * b13, idet * -b23, idet * b33\r\n    ]\r\n}","export type Vector3 = number[]\r\n\r\nexport const length = ([a, b, c]: Vector3) =>\r\n    Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))","import { Matrix3x3 } from \"./linear_algebra/matrix3x3\"\r\nimport { Pointer, Color } from \"./ui\"\r\n\r\nexport interface InputPath {\r\n    nodeIndex: number\r\n    inputIndex: number\r\n}\r\n\r\nexport interface OutputPath {\r\n    nodeIndex: number\r\n    outputIndex: number\r\n}\r\n\r\nexport interface Input {\r\n    name: string\r\n    selected: boolean\r\n    edgeIndices: number[]\r\n}\r\n\r\nexport interface Output {\r\n    name: string\r\n    selected: boolean\r\n    edgeIndices: number[]\r\n}\r\n\r\nexport interface Body {\r\n    value: number\r\n    editing: boolean\r\n}\r\n\r\nexport interface Node {\r\n    name: string\r\n    inputs: Input[]\r\n    body?: Body\r\n    outputs: Output[]\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport interface Edge {\r\n    input: InputPath\r\n    output: OutputPath\r\n}\r\n\r\nexport interface Graph {\r\n    nodes: Node[]\r\n    edges: Edge[]\r\n}\r\n\r\nexport interface Theme {\r\n    background: Color\r\n    node: Color\r\n    input: Color\r\n    selectedInput: Color\r\n    connection: Color\r\n}\r\n\r\nexport interface Finder {\r\n    search: string\r\n    show: boolean\r\n    options: string[]\r\n}\r\n\r\nexport interface Operation {\r\n    name: string\r\n    inputs: string[]\r\n    body?: number\r\n    outputs: string[]\r\n}\r\n\r\nexport type Operations = { [name: string]: Operation }\r\n\r\nexport interface ScreenCoordinates {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport enum VirtualKeyboardKind {\r\n    ALPHABETIC,\r\n    NUMERIC\r\n}\r\n\r\nexport interface VirtualKeyboard {\r\n    show: boolean\r\n    kind: VirtualKeyboardKind\r\n}\r\n\r\nexport enum InputTargetKind {\r\n    FINDER,\r\n    NUMBER,\r\n    NONE\r\n}\r\n\r\nexport interface FinderInputTarget { kind: InputTargetKind.FINDER }\r\n\r\nexport interface NumberInputTarget {\r\n    kind: InputTargetKind.NUMBER,\r\n    nodeIndex: number\r\n}\r\n\r\nexport interface NoInputTarget {\r\n    kind: InputTargetKind.NONE,\r\n}\r\n\r\nexport type InputTarget =\r\n    | FinderInputTarget\r\n    | NumberInputTarget\r\n    | NoInputTarget\r\n\r\nexport interface State {\r\n    graph: Graph\r\n    zooming: boolean\r\n    dragging: boolean\r\n    draggedNode: number | null\r\n    pointers: Pointer[]\r\n    pointerDistance: number\r\n    pointerCenter: [number, number]\r\n    selectedOutput: OutputPath | null\r\n    selectedInput: InputPath | null\r\n    potentialDoubleClick: boolean\r\n    nodePlacementLocation: ScreenCoordinates\r\n    finder: Finder\r\n    virtualKeyboard: VirtualKeyboard\r\n    inputTarget: InputTarget\r\n    camera: Matrix3x3\r\n    operations: Operations\r\n    theme: Theme\r\n}\r\n","import { fuzzyFind } from \"./fuzzy_find\"\r\nimport { multiplyMatrices, multiplyMatrixVector, scale, translate } from \"./linear_algebra/matrix3x3\"\r\nimport { length } from \"./linear_algebra/vector3\"\r\nimport { UpdateResult } from \"./ui/run\"\r\nimport { InputPath, InputTargetKind, OutputPath, State, VirtualKeyboardKind } from \"./state\"\r\nimport { Pointer } from \"./ui\"\r\n\r\nexport enum EventKind {\r\n    POINTER_MOVE,\r\n    POINTER_DOWN,\r\n    POINTER_UP,\r\n    CLICKED_NODE,\r\n    WHEEL,\r\n    CLICKED_INPUT,\r\n    CLICKED_OUTPUT,\r\n    DOUBLE_CLICK_TIMEOUT,\r\n    DOUBLE_CLICK,\r\n    KEYDOWN,\r\n    VIRTUAL_KEYDOWN,\r\n    CLICKED_FINDER_OPTION,\r\n    CLICKED_NUMBER,\r\n    CLICKED_BACKGROUND\r\n}\r\n\r\nexport interface PointerMove {\r\n    kind: EventKind.POINTER_MOVE\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerDown {\r\n    kind: EventKind.POINTER_DOWN\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerUp {\r\n    kind: EventKind.POINTER_UP\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface ClickedNode {\r\n    kind: EventKind.CLICKED_NODE\r\n    index: number\r\n}\r\n\r\nexport interface Wheel {\r\n    kind: EventKind.WHEEL\r\n    x: number\r\n    y: number\r\n    deltaY: number\r\n}\r\n\r\nexport interface ClickedInput {\r\n    kind: EventKind.CLICKED_INPUT\r\n    inputPath: InputPath\r\n}\r\n\r\nexport interface ClickedOutput {\r\n    kind: EventKind.CLICKED_OUTPUT\r\n    outputPath: OutputPath\r\n}\r\n\r\nexport interface DoubleClickTimeout {\r\n    kind: EventKind.DOUBLE_CLICK_TIMEOUT\r\n}\r\n\r\nexport interface DoubleClick {\r\n    kind: EventKind.DOUBLE_CLICK\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface KeyDown {\r\n    kind: EventKind.KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport interface VirtualKeyDown {\r\n    kind: EventKind.VIRTUAL_KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport interface ClickedFinderOption {\r\n    kind: EventKind.CLICKED_FINDER_OPTION\r\n    option: string\r\n}\r\n\r\nexport interface ClickedNumber {\r\n    kind: EventKind.CLICKED_NUMBER,\r\n    nodeIndex: number\r\n}\r\n\r\nexport interface ClickedBackground {\r\n    kind: EventKind.CLICKED_BACKGROUND,\r\n}\r\n\r\nexport type AppEvent =\r\n    | PointerMove\r\n    | PointerDown\r\n    | PointerUp\r\n    | ClickedNode\r\n    | Wheel\r\n    | ClickedInput\r\n    | ClickedOutput\r\n    | DoubleClickTimeout\r\n    | DoubleClick\r\n    | KeyDown\r\n    | VirtualKeyDown\r\n    | ClickedFinderOption\r\n    | ClickedNumber\r\n    | ClickedBackground\r\n\r\n\r\nconst pointerDown = (state: State, event: PointerDown): UpdateResult<State, AppEvent> => {\r\n    if (state.inputTarget.kind !== InputTargetKind.NONE) return { state }\r\n    state.pointers.push(event.pointer)\r\n    if (state.pointers.length > 1) {\r\n        state.potentialDoubleClick = false\r\n        state.dragging = false\r\n        state.zooming = state.pointers.length === 2\r\n        return { state }\r\n    }\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n        return {\r\n            state,\r\n            dispatch: [{ kind: EventKind.DOUBLE_CLICK, pointer: event.pointer }]\r\n        }\r\n    }\r\n    state.dragging = true\r\n    state.potentialDoubleClick = true\r\n    return {\r\n        state,\r\n        schedule: [\r\n            { after: { milliseconds: 300 }, event: { kind: EventKind.DOUBLE_CLICK_TIMEOUT } }\r\n        ]\r\n    }\r\n}\r\n\r\nconst pointerUp = (state: State, event: PointerUp) => {\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    state.pointers.splice(index, 1)\r\n    if (state.pointers.length === 1) {\r\n        state.zooming = false\r\n        state.dragging = true\r\n        state.pointerDistance = 0\r\n    }\r\n    else if (state.pointers.length === 0) {\r\n        state.dragging = false\r\n        state.draggedNode = null\r\n        state.pointerDistance = 0\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst pointerMove = (state: State, event: PointerMove) => {\r\n    if (!state.dragging && !state.zooming) {\r\n        if (!state.finder.show) {\r\n            state.nodePlacementLocation = { x: event.pointer.x, y: event.pointer.y }\r\n        }\r\n        return { state, rerender: false }\r\n    }\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    const pointer = state.pointers[index]\r\n    state.pointers[index] = event.pointer\r\n    if (state.dragging) {\r\n        const dx = event.pointer.x - pointer.x\r\n        const dy = event.pointer.y - pointer.y\r\n        if (state.draggedNode !== null) {\r\n            const scaling = length(multiplyMatrixVector(state.camera, [0, 1, 0]))\r\n            const node = state.graph.nodes[state.draggedNode]\r\n            node.x += dx * scaling\r\n            node.y += dy * scaling\r\n        } else {\r\n            state.camera = multiplyMatrices(state.camera, translate(-dx, -dy))\r\n        }\r\n        return { state, render: true }\r\n    }\r\n    if (state.zooming) {\r\n        const [p0, p1] = [state.pointers[0], state.pointers[1]]\r\n        const [x1, y1] = [p0.x, p0.y]\r\n        const [x2, y2] = [p1.x, p1.y]\r\n        const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n        const previousDistance = state.pointerDistance\r\n        const previousCenter = state.pointerCenter\r\n        state.pointerDistance = distance\r\n        const x = (p0.x + p1.x) / 2\r\n        const y = (p0.y + p1.y) / 2\r\n        state.pointerCenter = [x, y]\r\n        if (previousDistance > 0) {\r\n            const move = translate(x, y)\r\n            const zoom = Math.pow(2, (previousDistance - distance) * 0.01)\r\n            const moveBack = translate(-x, -y)\r\n            const dx = x - previousCenter[0]\r\n            const dy = y - previousCenter[1]\r\n            state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack, translate(-dx, -dy))\r\n            return { state, render: true }\r\n        } else return { state }\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst clickedNode = (state: State, event: ClickedNode) => {\r\n    state.draggedNode = event.index\r\n    return { state, render: true }\r\n}\r\n\r\nconst wheel = (state: State, event: Wheel) => {\r\n    const move = translate(event.x, event.y)\r\n    const zoom = Math.pow(2, event.deltaY * 0.01)\r\n    const moveBack = translate(-event.x, -event.y)\r\n    state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack)\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedInput = (state: State, event: ClickedInput) => {\r\n    state.draggedNode = event.inputPath.nodeIndex\r\n    if (state.selectedOutput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: event.inputPath,\r\n            output: state.selectedOutput\r\n        })\r\n        {\r\n            const { nodeIndex, outputIndex } = state.selectedOutput\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n            output.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, inputIndex } = event.inputPath\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedOutput = null\r\n        state.draggedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedInput) {\r\n        const { nodeIndex, inputIndex } = state.selectedInput\r\n        state.graph.nodes[nodeIndex].inputs[inputIndex].selected = false\r\n    }\r\n    const { nodeIndex, inputIndex } = event.inputPath\r\n    state.graph.nodes[nodeIndex].inputs[inputIndex].selected = true\r\n    state.selectedInput = event.inputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedOutput = (state: State, event: ClickedOutput) => {\r\n    state.draggedNode = event.outputPath.nodeIndex\r\n    if (state.selectedInput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: state.selectedInput,\r\n            output: event.outputPath\r\n        })\r\n        {\r\n            const { nodeIndex, inputIndex } = state.selectedInput\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n            input.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, outputIndex } = event.outputPath\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedInput = null\r\n        state.draggedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedOutput) {\r\n        const { nodeIndex, outputIndex } = state.selectedOutput\r\n        state.graph.nodes[nodeIndex].outputs[outputIndex].selected = false\r\n    }\r\n    const { nodeIndex, outputIndex } = event.outputPath\r\n    state.graph.nodes[nodeIndex].outputs[outputIndex].selected = true\r\n    state.selectedOutput = event.outputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst doubleClickTimeout = (state: State, _: DoubleClickTimeout) => {\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst updateFinderOptions = (state: State): State => {\r\n    state.finder.options = Object.keys(state.operations)\r\n        .filter(item => fuzzyFind({ haystack: item, needle: state.finder.search }))\r\n    return state\r\n}\r\n\r\nexport const openFinder = (state: State) => {\r\n    state.finder.show = true\r\n    state.finder.search = ''\r\n    state.virtualKeyboard = {\r\n        show: true,\r\n        kind: VirtualKeyboardKind.ALPHABETIC\r\n    }\r\n    state.inputTarget = { kind: InputTargetKind.FINDER }\r\n    state.potentialDoubleClick = false\r\n    state = updateFinderOptions(state)\r\n    return state\r\n}\r\n\r\n\r\nconst doubleClick = (state: State, { pointer }: DoubleClick) => {\r\n    state = openFinder(state)\r\n    state.nodePlacementLocation = { x: pointer.x, y: pointer.y }\r\n    return { state: state, render: true }\r\n}\r\n\r\n\r\nconst closeFinder = (state: State) => {\r\n    state.finder.show = false\r\n    state.finder.search = ''\r\n    state.virtualKeyboard.show = false\r\n    state.inputTarget = { kind: InputTargetKind.NONE }\r\n    return state\r\n}\r\n\r\nconst insertOperationFromFinder = (state: State, name: string): State => {\r\n    state = closeFinder(state)\r\n    const operation = state.operations[name]\r\n    const [x, y, _] = multiplyMatrixVector(state.camera, [state.nodePlacementLocation.x, state.nodePlacementLocation.y, 1])\r\n    state.graph.nodes.push({\r\n        name,\r\n        inputs: operation.inputs.map(input => ({\r\n            name: input,\r\n            selected: false,\r\n            edgeIndices: []\r\n        })),\r\n        outputs: operation.outputs.map(output => ({\r\n            name: output,\r\n            selected: false,\r\n            edgeIndices: []\r\n        })),\r\n        x,\r\n        y,\r\n        body: operation.body !== undefined ? {\r\n            value: operation.body,\r\n            editing: false\r\n        } : undefined\r\n    })\r\n    console.log(state)\r\n    return state\r\n}\r\n\r\nconst keyDown = (state: State, { key }: KeyDown) => {\r\n    switch (state.inputTarget.kind) {\r\n        case InputTargetKind.FINDER:\r\n            switch (key) {\r\n                case 'Backspace':\r\n                    state.finder.search = state.finder.search.slice(0, -1)\r\n                    break\r\n                case 'Shift':\r\n                case 'Alt':\r\n                case 'Control':\r\n                case 'Meta':\r\n                case 'Tab':\r\n                    break\r\n                case 'Enter':\r\n                    if (state.finder.options.length > 0) {\r\n                        const name = state.finder.options[0]\r\n                        state = insertOperationFromFinder(state, name)\r\n                    } else {\r\n                        state = closeFinder(state)\r\n                    }\r\n                    break\r\n                case 'Escape':\r\n                    state = closeFinder(state)\r\n                    break\r\n                default:\r\n                    state.finder.search += key\r\n                    break\r\n            }\r\n            return { state: updateFinderOptions(state), render: true }\r\n        case InputTargetKind.NUMBER:\r\n            const node = state.graph.nodes[state.inputTarget.nodeIndex]\r\n            let value = node.body!.value.toString()\r\n            switch (key) {\r\n                case 'Backspace':\r\n                    let newValue = value.slice(0, -1)\r\n                    if (newValue === '') newValue = '0'\r\n                    node.body!.value = parseFloat(newValue)\r\n                    return { state, render: true }\r\n                case '1':\r\n                case '2':\r\n                case '3':\r\n                case '4':\r\n                case '5':\r\n                case '6':\r\n                case '7':\r\n                case '8':\r\n                case '9':\r\n                case '0':\r\n                case '.':\r\n                    value += key\r\n                    node.body!.value = parseFloat(value)\r\n                    return { state, render: true }\r\n                case 'Enter':\r\n                    node.body!.editing = false\r\n                    state.virtualKeyboard = {\r\n                        show: false,\r\n                        kind: VirtualKeyboardKind.ALPHABETIC\r\n                    }\r\n                    state.inputTarget = {\r\n                        kind: InputTargetKind.NONE\r\n                    }\r\n                    return { state, render: true }\r\n                default:\r\n                    return { state }\r\n            }\r\n        case InputTargetKind.NONE:\r\n            if (key == 'f') {\r\n                return { state: openFinder(state), render: true }\r\n            }\r\n            return { state }\r\n    }\r\n}\r\n\r\nconst virtualKeyDown = (state: State, { key }: VirtualKeyDown) => {\r\n    switch (state.inputTarget.kind) {\r\n        case InputTargetKind.FINDER:\r\n            switch (key) {\r\n                case 'del':\r\n                    state.finder.search = state.finder.search.slice(0, -1)\r\n                    break\r\n                case 'sft':\r\n                    break\r\n                case 'space':\r\n                    state.finder.search += ' '\r\n                    break\r\n                case 'ret':\r\n                    if (state.finder.options.length > 0) {\r\n                        const name = state.finder.options[0]\r\n                        state = insertOperationFromFinder(state, name)\r\n                    } else {\r\n                        state = closeFinder(state)\r\n                    }\r\n                    break\r\n                default:\r\n                    state.finder.search += key\r\n                    break\r\n            }\r\n            return { state: updateFinderOptions(state), render: true }\r\n        case InputTargetKind.NUMBER:\r\n            const node = state.graph.nodes[state.inputTarget.nodeIndex]\r\n            let value = node.body!.value.toString()\r\n            switch (key) {\r\n                case 'del':\r\n                    let newValue = value.slice(0, -1)\r\n                    if (newValue === '') newValue = '0'\r\n                    node.body!.value = parseFloat(newValue)\r\n                    return { state, render: true }\r\n                case '1':\r\n                case '2':\r\n                case '3':\r\n                case '4':\r\n                case '5':\r\n                case '6':\r\n                case '7':\r\n                case '8':\r\n                case '9':\r\n                case '0':\r\n                case '.':\r\n                    value += key\r\n                    node.body!.value = parseFloat(value)\r\n                    return { state, render: true }\r\n                case 'ret':\r\n                    node.body!.editing = false\r\n                    state.virtualKeyboard = {\r\n                        show: false,\r\n                        kind: VirtualKeyboardKind.ALPHABETIC\r\n                    }\r\n                    state.inputTarget = {\r\n                        kind: InputTargetKind.NONE\r\n                    }\r\n                    return { state, render: true }\r\n                default:\r\n                    return { state }\r\n            }\r\n        case InputTargetKind.NONE:\r\n            return { state }\r\n    }\r\n}\r\n\r\nconst clickedFinderOption = (state: State, { option }: ClickedFinderOption) => ({\r\n    state: insertOperationFromFinder(state, option),\r\n    render: true\r\n})\r\n\r\nconst clickedNumber = (state: State, { nodeIndex }: ClickedNumber) => {\r\n    if (state.inputTarget.kind === InputTargetKind.NUMBER) {\r\n        state.graph.nodes[state.inputTarget.nodeIndex].body!.editing = false\r\n    }\r\n    state = closeFinder(state)\r\n    state.virtualKeyboard = {\r\n        show: true,\r\n        kind: VirtualKeyboardKind.NUMERIC\r\n    }\r\n    state.inputTarget = {\r\n        kind: InputTargetKind.NUMBER,\r\n        nodeIndex\r\n    }\r\n    state.graph.nodes[nodeIndex].body!.editing = true\r\n    return {\r\n        state,\r\n        render: true\r\n    }\r\n}\r\n\r\nconst clickedBackground = (state: State) => {\r\n    if (state.inputTarget.kind === InputTargetKind.NUMBER) {\r\n        state.graph.nodes[state.inputTarget.nodeIndex].body!.editing = false\r\n    }\r\n    return {\r\n        state: closeFinder(state),\r\n        render: true\r\n    }\r\n}\r\n\r\nexport const update = (state: State, event: AppEvent): UpdateResult<State, AppEvent> => {\r\n    switch (event.kind) {\r\n        case EventKind.POINTER_DOWN: return pointerDown(state, event)\r\n        case EventKind.POINTER_UP: return pointerUp(state, event)\r\n        case EventKind.POINTER_MOVE: return pointerMove(state, event)\r\n        case EventKind.CLICKED_NODE: return clickedNode(state, event)\r\n        case EventKind.WHEEL: return wheel(state, event)\r\n        case EventKind.CLICKED_INPUT: return clickedInput(state, event)\r\n        case EventKind.CLICKED_OUTPUT: return clickedOutput(state, event)\r\n        case EventKind.DOUBLE_CLICK_TIMEOUT: return doubleClickTimeout(state, event)\r\n        case EventKind.DOUBLE_CLICK: return doubleClick(state, event)\r\n        case EventKind.KEYDOWN: return keyDown(state, event)\r\n        case EventKind.VIRTUAL_KEYDOWN: return virtualKeyDown(state, event)\r\n        case EventKind.CLICKED_FINDER_OPTION: return clickedFinderOption(state, event)\r\n        case EventKind.CLICKED_NUMBER: return clickedNumber(state, event)\r\n        case EventKind.CLICKED_BACKGROUND: return clickedBackground(state)\r\n    }\r\n}\r\n","import { Renderer, Pointer, WorldSpace } from \".\"\r\n\r\nconst inWorldSpace = ({ x0, y0, x1, y1 }: WorldSpace, pointer: Pointer) =>\r\n    x0 <= pointer.x && pointer.x <= x1 &&\r\n    y0 <= pointer.y && pointer.y <= y1\r\n\r\nexport const pointerDown = <AppEvent, R extends Renderer<AppEvent>>(renderer: R, pointer: Pointer): R => {\r\n    for (let i = renderer.clickHandlers.length; i > 0; --i) {\r\n        for (const { onClick, worldSpace } of renderer.clickHandlers[i - 1]) {\r\n            if (inWorldSpace(worldSpace, pointer)) {\r\n                renderer.dispatch(onClick)\r\n                return renderer\r\n            }\r\n        }\r\n    }\r\n    return renderer\r\n}\r\n","import { Layers } from \"./layer_geometry\"\r\n\r\nexport interface Batch {\r\n    vertices: number[]\r\n    vertexIndices: number[]\r\n    colors: number[]\r\n    textureIndex: number\r\n    textureCoordinates: number[]\r\n    cameraIndex: number[]\r\n}\r\n\r\nconst newBatch = (textureIndex: number): Batch => ({\r\n    vertices: [],\r\n    colors: [],\r\n    vertexIndices: [],\r\n    textureIndex,\r\n    textureCoordinates: [],\r\n    cameraIndex: []\r\n})\r\n\r\nexport const batchGeometry = (layers: Layers): Batch[] => {\r\n    const batches: Batch[] = []\r\n    let batch = newBatch(0)\r\n    let batchTextureIndex = batch.textureIndex.toString()\r\n    for (const layer of layers) {\r\n        for (const [textureIndex, geometries] of Object.entries(layer)) {\r\n            if (batchTextureIndex !== textureIndex) {\r\n                if (batch.vertices.length !== 0) batches.push(batch)\r\n                batch = newBatch(parseInt(textureIndex))\r\n                batchTextureIndex = textureIndex\r\n            }\r\n            for (const geometry of geometries) {\r\n                const offset = batch.vertices.length / 2\r\n                batch.vertices.push(...geometry.vertices)\r\n                batch.colors.push(...geometry.colors)\r\n                for (const index of geometry.vertexIndices) {\r\n                    batch.vertexIndices.push(index + offset)\r\n                }\r\n                batch.textureCoordinates.push(...geometry.textureCoordinates)\r\n                batch.cameraIndex.push(...geometry.cameraIndex)\r\n            }\r\n        }\r\n    }\r\n    if (batch.vertices.length !== 0) batches.push(batch)\r\n    return batches\r\n}","import { WorldSpace } from \".\"\r\nimport { identity, inverse, Matrix3x3, multiplyMatrixVector } from \"../linear_algebra/matrix3x3\"\r\n\r\nexport interface CameraStack {\r\n    cameras: Matrix3x3[]\r\n    stack: number[]\r\n    transform: Matrix3x3\r\n}\r\n\r\nexport const initCameraStack = (): CameraStack => {\r\n    const camera = identity()\r\n    return {\r\n        cameras: [identity()],\r\n        stack: [0],\r\n        transform: inverse(camera)\r\n    }\r\n}\r\n\r\nexport const pushCamera = (cameraStack: CameraStack, camera: Matrix3x3): void => {\r\n    const index = cameraStack.cameras.length\r\n    cameraStack.cameras.push(camera)\r\n    cameraStack.stack.push(index)\r\n    cameraStack.transform = inverse(camera)\r\n}\r\n\r\nexport const activeCamera = (cameraStack: CameraStack): number => cameraStack.stack.slice(-1)[0]\r\n\r\nexport const popCamera = (cameraStack: CameraStack): void => {\r\n    cameraStack.stack.pop()\r\n    cameraStack.transform = inverse(cameraStack.cameras[activeCamera(cameraStack)])\r\n}\r\n\r\nexport const transformWorldSpace = (cameraStack: CameraStack, worldSpace: WorldSpace): WorldSpace => {\r\n    const [x0, y0, _0] = multiplyMatrixVector(cameraStack.transform, [worldSpace.x0, worldSpace.y0, 1])\r\n    const [x1, y1, _1] = multiplyMatrixVector(cameraStack.transform, [worldSpace.x1, worldSpace.y1, 1])\r\n    return { x0, y0, x1, y1 }\r\n}\r\n","import { Constraints, Entry, Geometry, geometry, layout, Layout, MeasureText, Offset, Size, UI, UIKind, WorldSpace, traverse } from \".\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface CenterLayout {\r\n    readonly size: Size\r\n    readonly child: Layout\r\n}\r\n\r\nexport interface CenterGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly child: Geometry\r\n}\r\n\r\nexport interface Center<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.CENTER\r\n    readonly child: UI<AppEvent>\r\n}\r\n\r\nexport const center = <AppEvent>(child: UI<AppEvent>): Center<AppEvent> => {\r\n    return {\r\n        kind: UIKind.CENTER,\r\n        child\r\n    }\r\n}\r\n\r\nexport const centerLayout = <AppEvent>(ui: Center<AppEvent>, constraints: Constraints, measureText: MeasureText): CenterLayout => {\r\n    const childLayout = layout(ui.child, constraints, measureText)\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, child: childLayout }\r\n}\r\n\r\nexport const centerGeometry = <AppEvent>(ui: Center<AppEvent>, layout: CenterLayout, offset: Offset, cameraStack: CameraStack): CenterGeometry => {\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    const childLayout = layout.child\r\n    const childOffset = {\r\n        x: offset.x + layout.size.width / 2 - childLayout.size.width / 2,\r\n        y: offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n    }\r\n    const childGeometry = geometry(ui.child, childLayout, childOffset, cameraStack)\r\n    return {\r\n        worldSpace,\r\n        child: childGeometry\r\n    }\r\n}\r\n\r\nexport function* centerTraverse<AppEvent>(ui: Center<AppEvent>, layout: CenterLayout, geometry: CenterGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield* traverse(ui.child, layout.child, geometry.child, z + 1)\r\n}","import { Constraints, Entry, geometry, Geometry, Layout, layout, MeasureText, Offset, Size, traverse, UI, UIKind, WorldSpace } from \".\"\r\nimport { MainAxisAlignment, CrossAxisAlignment } from \"./alignment\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface ColumnLayout {\r\n    readonly size: Size\r\n    readonly totalChildHeight: number\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface ColumnGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Column<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.COLUMN,\r\n    readonly mainAxisAlignment: MainAxisAlignment\r\n    readonly crossAxisAlignment: CrossAxisAlignment\r\n    readonly children: UI<AppEvent>[]\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\nexport function column<AppEvent>(children: UI<AppEvent>[]): Column<AppEvent>\r\nexport function column<AppEvent>(properties: Properties, children: UI<AppEvent>[]): Column<AppEvent>\r\nexport function column<AppEvent>(...args: any[]): Column<AppEvent> {\r\n    const [properties, children]: [Properties, UI<AppEvent>[]] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.COLUMN,\r\n        mainAxisAlignment: properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        crossAxisAlignment: properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    }\r\n}\r\n\r\nexport const columnLayout = <AppEvent>(ui: Column<AppEvent>, constraints: Constraints, measureText: MeasureText): ColumnLayout => {\r\n    const initialChildren: Layout[] = []\r\n    const initial = {\r\n        children: initialChildren,\r\n        width: 0,\r\n        totalChildHeight: 0\r\n    }\r\n    const result = ui.children.reduce((acc, child) => {\r\n        const childLayout = layout(child, constraints, measureText)\r\n        acc.children.push(childLayout)\r\n        acc.totalChildHeight += childLayout.size.height\r\n        acc.width = Math.max(acc.width, childLayout.size.width)\r\n        return acc\r\n    }, initial)\r\n    const { children, width, totalChildHeight } = result\r\n    const height = ui.mainAxisAlignment == MainAxisAlignment.START ? totalChildHeight : constraints.maxHeight\r\n    return {\r\n        size: { width, height },\r\n        totalChildHeight,\r\n        children\r\n    }\r\n}\r\n\r\nexport const columnGeometry = <AppEvent>(ui: Column<AppEvent>, layout: ColumnLayout, offset: Offset, cameraStack: CameraStack): ColumnGeometry => {\r\n    const initialChildren: Geometry[] = []\r\n    const freeSpaceY = layout.size.height - layout.totalChildHeight\r\n    const initial = {\r\n        children: initialChildren,\r\n        y: (() => {\r\n            switch (ui.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return offset.y\r\n                case MainAxisAlignment.CENTER: return offset.y + freeSpaceY / 2\r\n                case MainAxisAlignment.END: return offset.y + freeSpaceY\r\n                case MainAxisAlignment.SPACE_EVENLY: return offset.y + freeSpaceY / (ui.children.length + 1)\r\n                case MainAxisAlignment.SPACE_BETWEEN: return offset.y\r\n            }\r\n        })(),\r\n    }\r\n    const addYStart = (childLayout: Layout) => childLayout.size.height\r\n    const addYCenter = (childLayout: Layout) => childLayout.size.height\r\n    const addYEnd = (childLayout: Layout) => childLayout.size.height\r\n    const addYSpaceEvenly = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (ui.children.length + 1)\r\n    const addYSpaceBetween = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (ui.children.length - 1)\r\n    const addY = (() => {\r\n        switch (ui.mainAxisAlignment) {\r\n            case MainAxisAlignment.START: return addYStart\r\n            case MainAxisAlignment.CENTER: return addYCenter\r\n            case MainAxisAlignment.END: return addYEnd\r\n            case MainAxisAlignment.SPACE_EVENLY: return addYSpaceEvenly\r\n            case MainAxisAlignment.SPACE_BETWEEN: return addYSpaceBetween\r\n        }\r\n    })()\r\n    const offsetXStart = (_: Layout) => offset.x\r\n    const offsetXCenter = (childLayout: Layout) => offset.x + layout.size.width / 2 - childLayout.size.width / 2\r\n    const offsetXEnd = (childLayout: Layout) => offset.x + layout.size.width - childLayout.size.width\r\n    const offsetX = (() => {\r\n        switch (ui.crossAxisAlignment) {\r\n            case CrossAxisAlignment.START: return offsetXStart\r\n            case CrossAxisAlignment.CENTER: return offsetXCenter\r\n            case CrossAxisAlignment.END: return offsetXEnd\r\n        }\r\n    })()\r\n    const result = ui.children.reduce((acc, child, i) => {\r\n        const childLayout = layout.children[i]\r\n        const childOffset = { x: offsetX(childLayout), y: acc.y }\r\n        const childGeometry = geometry(child, childLayout, childOffset, cameraStack)\r\n        acc.children.push(childGeometry)\r\n        acc.y += addY(childLayout)\r\n        return acc\r\n    }, initial)\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height\r\n    })\r\n    return { worldSpace, children: result.children }\r\n}\r\n\r\nexport function* columnTraverse<AppEvent>(ui: Column<AppEvent>, layout: ColumnLayout, geometry: ColumnGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    const nextZ = z + 1\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        yield* traverse(child, layout.children[i], geometry.children[i], nextZ)\r\n        i += 1\r\n    }\r\n}","import { UI, Size, Layout, Constraints, MeasureText, UIKind, layout, Color, Offset, WorldSpace, Geometry, geometry, Entry, traverse, } from '.'\r\nimport { CameraStack, transformWorldSpace, activeCamera } from './camera_stack'\r\n\r\nexport interface ContainerLayout {\r\n    readonly size: Size\r\n    readonly child?: Layout\r\n}\r\n\r\nexport interface ContainerGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly vertices: number[]\r\n    readonly colors: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly child?: Geometry\r\n}\r\n\r\nexport interface Padding {\r\n    readonly top: number\r\n    readonly right: number\r\n    readonly bottom: number\r\n    readonly left: number\r\n}\r\n\r\nexport interface Container<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.CONTAINER,\r\n    readonly padding: Padding\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly child?: UI<AppEvent>\r\n}\r\n\r\ninterface Properties<AppEvent> {\r\n    readonly padding?: number\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly onClick?: AppEvent\r\n    readonly id?: string\r\n}\r\n\r\nconst transformPadding = (padding?: number): Padding => {\r\n    if (padding) return { top: padding, right: padding, bottom: padding, left: padding }\r\n    return { top: 0, right: 0, bottom: 0, left: 0 }\r\n}\r\n\r\nexport const container = <AppEvent>({ padding, width, height, color, x, y, onClick, id }: Properties<AppEvent>, child?: UI<AppEvent>): Container<AppEvent> => {\r\n    return {\r\n        kind: UIKind.CONTAINER,\r\n        padding: transformPadding(padding),\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        color,\r\n        onClick,\r\n        id,\r\n        child\r\n    }\r\n}\r\n\r\nexport const containerLayout = <AppEvent>(ui: Container<AppEvent>, constraints: Constraints, measureText: MeasureText): ContainerLayout => {\r\n    const { top, right, bottom, left } = ui.padding\r\n    if (ui.child) {\r\n        const childLayout = layout(ui.child, constraints, measureText)\r\n        const width = ui.width ?? childLayout.size.width + left + right\r\n        const height = ui.height ?? childLayout.size.height + top + bottom\r\n        return {\r\n            size: { width, height },\r\n            child: childLayout\r\n        }\r\n    }\r\n    const width = (() => {\r\n        if (ui.width) return ui.width + left + right\r\n        return constraints.maxWidth\r\n    })()\r\n    const height = (() => {\r\n        if (ui.height) return ui.height + top + bottom\r\n        return constraints.maxHeight\r\n    })()\r\n    return { size: { width, height } }\r\n}\r\n\r\nexport const containerGeometry = <AppEvent>(ui: Container<AppEvent>, layout: ContainerLayout, offset: Offset, cameraStack: CameraStack): ContainerGeometry => {\r\n    const x0 = offset.x + (ui.x ?? 0)\r\n    const x1 = x0 + layout.size.width\r\n    const y0 = offset.y + (ui.y ?? 0)\r\n    const y1 = y0 + layout.size.height\r\n    const worldSpace = transformWorldSpace(cameraStack, { x0, x1, y0, y1 })\r\n    const childGeometry = (() => {\r\n        if (ui.child) {\r\n            const childLayout = layout.child!\r\n            const childOffset = {\r\n                x: x0 + ui.padding.left,\r\n                y: y0 + ui.padding.top\r\n            }\r\n            return geometry(ui.child, childLayout, childOffset, cameraStack)\r\n        }\r\n        return undefined\r\n    })()\r\n    if (ui.color) {\r\n        const { red, green, blue, alpha } = ui.color\r\n        return {\r\n            worldSpace,\r\n            vertices: [\r\n                x0, y0,\r\n                x0, y1,\r\n                x1, y0,\r\n                x1, y1,\r\n            ],\r\n            colors: [\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n            ],\r\n            vertexIndices: [\r\n                0, 1, 2,\r\n                1, 2, 3\r\n            ],\r\n            cameraIndex: Array(4).fill(activeCamera(cameraStack)),\r\n            textureIndex: 0,\r\n            textureCoordinates: Array(8).fill(0),\r\n            child: childGeometry\r\n        }\r\n    }\r\n    return {\r\n        worldSpace,\r\n        vertices: [],\r\n        colors: [],\r\n        vertexIndices: [],\r\n        cameraIndex: [],\r\n        textureIndex: 0,\r\n        textureCoordinates: [],\r\n        child: childGeometry\r\n    }\r\n}\r\n\r\nexport function* containerTraverse<AppEvent>(ui: Container<AppEvent>, layout: ContainerLayout, geometry: ContainerGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    if (ui.child) {\r\n        const childLayout = layout.child!\r\n        const childGeometry = geometry.child!\r\n        yield* traverse(ui.child, childLayout, childGeometry, z + 1)\r\n    }\r\n}","import { Constraints, Layout, MeasureText, Size, UI, UIKind, layout, Geometry, Offset, geometry, WorldSpace, Entry, traverse } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"./alignment\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface RowLayout {\r\n    readonly size: Size\r\n    readonly totalChildWidth: number\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface RowGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Row<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.ROW,\r\n    readonly mainAxisAlignment: MainAxisAlignment\r\n    readonly crossAxisAlignment: CrossAxisAlignment\r\n    readonly children: UI<AppEvent>[]\r\n}\r\n\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\nexport function row<AppEvent>(children: UI<AppEvent>[]): Row<AppEvent>\r\nexport function row<AppEvent>(properties: Properties, children: UI<AppEvent>[]): Row<AppEvent>\r\nexport function row<AppEvent>(...args: any[]): Row<AppEvent> {\r\n    const [properties, children]: [Properties, UI<AppEvent>[]] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.ROW,\r\n        mainAxisAlignment: properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        crossAxisAlignment: properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    }\r\n}\r\n\r\nexport const rowLayout = <AppEvent>(ui: Row<AppEvent>, constraints: Constraints, measureText: MeasureText): RowLayout => {\r\n    const initialChildren: Layout[] = []\r\n    const initial = {\r\n        children: initialChildren,\r\n        totalChildWidth: 0,\r\n        height: 0\r\n    }\r\n    const result = ui.children.reduce((acc, child) => {\r\n        const childLayout = layout(child, constraints, measureText)\r\n        acc.children.push(childLayout)\r\n        acc.totalChildWidth += childLayout.size.width\r\n        acc.height = Math.max(acc.height, childLayout.size.height)\r\n        return acc\r\n    }, initial)\r\n    const { children, totalChildWidth, height } = result\r\n    const width = ui.mainAxisAlignment == MainAxisAlignment.START ? totalChildWidth : constraints.maxWidth\r\n    return { size: { width, height }, totalChildWidth, children }\r\n}\r\n\r\nexport const rowGeometry = <AppEvent>(ui: Row<AppEvent>, layout: RowLayout, offset: Offset, cameraStack: CameraStack): RowGeometry => {\r\n    const initialChildren: Geometry[] = []\r\n    const freeSpaceX = layout.size.width - layout.totalChildWidth\r\n    const initial = {\r\n        children: initialChildren,\r\n        x: (() => {\r\n            switch (ui.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return offset.x\r\n                case MainAxisAlignment.CENTER: return offset.x + freeSpaceX / 2\r\n                case MainAxisAlignment.END: return offset.x + freeSpaceX\r\n                case MainAxisAlignment.SPACE_EVENLY: return offset.x + freeSpaceX / (ui.children.length + 1)\r\n                case MainAxisAlignment.SPACE_BETWEEN: return offset.x\r\n            }\r\n        })(),\r\n    }\r\n    const addXStart = (childLayout: Layout) => childLayout.size.width\r\n    const addXCenter = (childLayout: Layout) => childLayout.size.width\r\n    const addXEnd = (childLayout: Layout) => childLayout.size.width\r\n    const addXSpaceEvenly = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (ui.children.length + 1)\r\n    const addXSpaceBetween = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (ui.children.length - 1)\r\n    const addX = (() => {\r\n        switch (ui.mainAxisAlignment) {\r\n            case MainAxisAlignment.START: return addXStart\r\n            case MainAxisAlignment.CENTER: return addXCenter\r\n            case MainAxisAlignment.END: return addXEnd\r\n            case MainAxisAlignment.SPACE_EVENLY: return addXSpaceEvenly\r\n            case MainAxisAlignment.SPACE_BETWEEN: return addXSpaceBetween\r\n        }\r\n    })()\r\n    const offsetYStart = (_: Layout) => offset.y\r\n    const offsetYCenter = (childLayout: Layout) => offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n    const offsetYEnd = (childLayout: Layout) => offset.y + layout.size.height - childLayout.size.height\r\n    const offsetY = (() => {\r\n        switch (ui.crossAxisAlignment) {\r\n            case CrossAxisAlignment.START: return offsetYStart\r\n            case CrossAxisAlignment.CENTER: return offsetYCenter\r\n            case CrossAxisAlignment.END: return offsetYEnd\r\n        }\r\n    })()\r\n    const result = ui.children.reduce((acc, child, i) => {\r\n        const childLayout = layout.children[i]\r\n        const childOffset = { x: acc.x, y: offsetY(childLayout) }\r\n        const childGeometry = geometry(child, childLayout, childOffset, cameraStack)\r\n        acc.children.push(childGeometry)\r\n        acc.x += addX(childLayout)\r\n        return acc\r\n    }, initial)\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    return { worldSpace, children: result.children }\r\n}\r\n\r\nexport function* rowTraverse<AppEvent>(ui: Row<AppEvent>, layout: RowLayout, geometry: RowGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    const nextZ = z + 1\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        yield* traverse(child, layout.children[i], geometry.children[i], nextZ)\r\n        i += 1\r\n    }\r\n}","import { Connection, Constraints, Entry, geometry, Geometry, layout, Layout, MeasureText, Offset, Size, traverse, UI, UIKind, WorldSpace } from \".\"\r\nimport { Matrix3x3 } from \"../linear_algebra/matrix3x3\"\r\nimport { CameraStack, popCamera, pushCamera, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface SceneLayout {\r\n    readonly size: Size\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface SceneGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Scene<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.SCENE\r\n    readonly camera: Matrix3x3\r\n    readonly children: UI<AppEvent>[]\r\n    readonly connections: Connection[]\r\n}\r\n\r\nexport interface Properties<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly camera: Matrix3x3\r\n    readonly children: UI<AppEvent>[]\r\n    readonly connections?: Connection[]\r\n}\r\n\r\nexport const scene = <AppEvent>({ id, onClick, camera, children, connections }: Properties<AppEvent>): Scene<AppEvent> => ({\r\n    id, onClick, kind: UIKind.SCENE, camera, children, connections: connections ?? []\r\n})\r\n\r\nexport const sceneLayout = <AppEvent>(ui: Scene<AppEvent>, constraints: Constraints, measureText: MeasureText): SceneLayout => {\r\n    const children = ui.children.map(c => layout(c, constraints, measureText))\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, children }\r\n}\r\n\r\nexport const sceneGeometry = <AppEvent>(ui: Scene<AppEvent>, layout: SceneLayout, offset: Offset, cameraStack: CameraStack): SceneGeometry => {\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height\r\n    })\r\n    pushCamera(cameraStack, ui.camera)\r\n    const children = ui.children.map((c, i) => geometry(c, layout.children[i], offset, cameraStack))\r\n    popCamera(cameraStack)\r\n    return { worldSpace, children }\r\n}\r\n\r\nexport function* sceneTraverse<AppEvent>(ui: Scene<AppEvent>, layout: SceneLayout, geometry: SceneGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        for (const entry of traverse(child, layout.children[i], geometry.children[i], z)) {\r\n            yield entry\r\n            z = Math.max(z, entry.z)\r\n        }\r\n        i++\r\n        z++\r\n    }\r\n}\r\n","import { Constraints, Geometry, layout, Layout, MeasureText, Offset, Size, UI, UIKind, WorldSpace, geometry, Entry, traverse } from \".\";\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\";\r\n\r\nexport interface StackLayout {\r\n    readonly size: Size\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface StackGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Stack<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    kind: UIKind.STACK\r\n    children: UI<AppEvent>[]\r\n}\r\n\r\nexport const stack = <AppEvent>(children: UI<AppEvent>[]): Stack<AppEvent> => ({\r\n    kind: UIKind.STACK,\r\n    children\r\n})\r\n\r\nexport const stackLayout = <AppEvent>(ui: Stack<AppEvent>, constraints: Constraints, measureText: MeasureText): StackLayout => {\r\n    const children = ui.children.map(c => layout(c, constraints, measureText))\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, children }\r\n}\r\n\r\nexport const stackGeometry = <AppEvent>(ui: Stack<AppEvent>, layout: StackLayout, offset: Offset, cameraStack: CameraStack): StackGeometry => {\r\n    const children = ui.children.map((c, i) => geometry(c, layout.children[i], offset, cameraStack))\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    return { worldSpace, children }\r\n}\r\n\r\nexport function* stackTraverse<AppEvent>(ui: Stack<AppEvent>, layout: StackLayout, geometry: StackGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        for (const entry of traverse(child, layout.children[i], geometry.children[i], z)) {\r\n            yield entry\r\n            z = Math.max(z, entry.z)\r\n        }\r\n        i += 1\r\n        z += 1\r\n    }\r\n}","import { Color, Constraints, Entry, Font, MeasureText, Offset, Size, TextMeasurements, UIKind, WorldSpace } from \".\";\r\nimport { activeCamera, CameraStack, transformWorldSpace } from \"./camera_stack\";\r\n\r\nexport interface TextLayout {\r\n    readonly measurements: TextMeasurements\r\n    readonly size: Size\r\n}\r\n\r\nexport interface TextGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly colors: number[]\r\n    readonly vertices: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n}\r\n\r\nexport interface Text<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.TEXT\r\n    readonly font: Font\r\n    readonly color: Color\r\n    readonly str: string\r\n}\r\n\r\ninterface Properties {\r\n    readonly font?: string\r\n    readonly size?: number\r\n    readonly color?: Color\r\n}\r\n\r\nexport function text<AppEvent>(str: string): Text<AppEvent>\r\nexport function text<AppEvent>(properties: Properties, str: string): Text<AppEvent>\r\nexport function text<AppEvent>(...args: any[]): Text<AppEvent> {\r\n    const [properties, str]: [Properties, string] = (() =>\r\n        typeof args[0] == 'string' ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.TEXT,\r\n        font: {\r\n            family: properties.font ?? \"monospace\",\r\n            size: properties.size ?? 14\r\n        },\r\n        color: properties.color ?? { red: 255, green: 255, blue: 255, alpha: 255 },\r\n        str\r\n    }\r\n}\r\n\r\nexport const textLayout = <AppEvent>({ font, str }: Text<AppEvent>, _: Constraints, measureText: MeasureText): TextLayout => {\r\n    const measurements = measureText(font, str)\r\n    const width = measurements.widths.reduce((acc, width) => acc + width)\r\n    const size = { width, height: font.size }\r\n    return { measurements, size }\r\n}\r\n\r\nconst vertices = (widths: number[], height: number, offset: Offset) => {\r\n    const result = []\r\n    let offsetX = offset.x\r\n    const y0 = offset.y\r\n    const y1 = offset.y + height\r\n    for (const width of widths) {\r\n        const x0 = offsetX\r\n        const x1 = offsetX + width\r\n        result.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        )\r\n        offsetX += width\r\n    }\r\n    return result\r\n}\r\n\r\nconst colors = (n: number, { red, green, blue, alpha }: Color) => {\r\n    const result = []\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n        )\r\n    }\r\n    return result\r\n}\r\n\r\nconst vertexIndices = (n: number) => {\r\n    const result = []\r\n    let offset = 0\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            offset, offset + 1, offset + 2,\r\n            offset + 1, offset + 2, offset + 3\r\n        )\r\n        offset += 4\r\n    }\r\n    return result\r\n}\r\n\r\nexport const textGeometry = <AppEvent>(ui: Text<AppEvent>, layout: TextLayout, offset: Offset, cameraStack: CameraStack): TextGeometry => {\r\n    const textLayout = layout as TextLayout\r\n    const { measurements } = textLayout\r\n    const { textureIndex, textureCoordinates, widths } = measurements\r\n    return {\r\n        worldSpace: transformWorldSpace(cameraStack, {\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        }),\r\n        textureIndex,\r\n        textureCoordinates: textureCoordinates.flat(),\r\n        colors: colors(widths.length, ui.color),\r\n        vertices: vertices(widths, ui.font.size, offset),\r\n        vertexIndices: vertexIndices(widths.length),\r\n        cameraIndex: Array(widths.length * 4).fill(activeCamera(cameraStack))\r\n    }\r\n}\r\n\r\nexport function* textTraverse<AppEvent>(ui: Text<AppEvent>, layout: TextLayout, geometry: TextGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n}","import { Center, CenterLayout, centerLayout, CenterGeometry, centerGeometry, centerTraverse } from './center'\r\nimport { Column, ColumnLayout, columnLayout, ColumnGeometry, columnGeometry, columnTraverse } from './column'\r\nimport { Container, ContainerLayout, containerLayout, ContainerGeometry, containerGeometry, containerTraverse } from './container'\r\nimport { Row, RowLayout, rowLayout, RowGeometry, rowGeometry, rowTraverse } from './row'\r\nimport { Scene, SceneLayout, sceneLayout, SceneGeometry, sceneGeometry, sceneTraverse } from './scene'\r\nimport { Stack, StackLayout, stackLayout, StackGeometry, stackGeometry, stackTraverse } from './stack'\r\nimport { Text, TextLayout, textLayout, TextGeometry, textGeometry, textTraverse } from './text'\r\nimport { CameraStack } from './camera_stack'\r\nimport { Matrix3x3 } from '../linear_algebra/matrix3x3'\r\nimport { Batch } from './batch_geometry'\r\nimport { ClickHandlers } from './gather_on_click_handlers'\r\nimport { Lines } from './connection_geometry'\r\n\r\nexport { center } from './center'\r\nexport { column } from './column'\r\nexport { container } from './container'\r\nexport { row } from './row'\r\nexport { scene } from './scene'\r\nexport { stack } from './stack'\r\nexport { text } from './text'\r\n\r\nexport enum UIKind {\r\n    CENTER,\r\n    COLUMN,\r\n    CONTAINER,\r\n    ROW,\r\n    SCENE,\r\n    STACK,\r\n    TEXT,\r\n}\r\n\r\nexport type UI<AppEvent> =\r\n    | Center<AppEvent>\r\n    | Column<AppEvent>\r\n    | Container<AppEvent>\r\n    | Row<AppEvent>\r\n    | Scene<AppEvent>\r\n    | Stack<AppEvent>\r\n    | Text<AppEvent>\r\n\r\nexport interface Color {\r\n    red: number\r\n    green: number\r\n    blue: number\r\n    alpha: number\r\n}\r\n\r\nexport interface Size {\r\n    readonly width: number\r\n    readonly height: number\r\n}\r\n\r\nexport interface Constraints {\r\n    readonly minWidth: number\r\n    readonly maxWidth: number\r\n    readonly minHeight: number\r\n    readonly maxHeight: number\r\n}\r\n\r\nexport type Layout =\r\n    | CenterLayout\r\n    | ColumnLayout\r\n    | ContainerLayout\r\n    | RowLayout\r\n    | SceneLayout\r\n    | StackLayout\r\n    | TextLayout\r\n\r\nexport interface Font {\r\n    readonly family: string\r\n    readonly size: number\r\n}\r\n\r\nexport interface TextMeasurements {\r\n    readonly widths: number[]\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[][]\r\n}\r\n\r\nexport type MeasureText = (font: Font, str: string) => TextMeasurements\r\n\r\nexport const layout = <AppEvent>(ui: UI<AppEvent>, constraints: Constraints, measureText: MeasureText): Layout => {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            return centerLayout(ui, constraints, measureText)\r\n        case UIKind.COLUMN:\r\n            return columnLayout(ui, constraints, measureText)\r\n        case UIKind.CONTAINER:\r\n            return containerLayout(ui, constraints, measureText)\r\n        case UIKind.ROW:\r\n            return rowLayout(ui, constraints, measureText)\r\n        case UIKind.SCENE:\r\n            return sceneLayout(ui, constraints, measureText)\r\n        case UIKind.STACK:\r\n            return stackLayout(ui, constraints, measureText)\r\n        case UIKind.TEXT:\r\n            return textLayout(ui, constraints, measureText)\r\n    }\r\n}\r\n\r\nexport interface Offset {\r\n    readonly x: number\r\n    readonly y: number\r\n}\r\n\r\nexport interface WorldSpace {\r\n    readonly x0: number\r\n    readonly y0: number\r\n    readonly x1: number\r\n    readonly y1: number\r\n}\r\n\r\nexport type Geometry =\r\n    | CenterGeometry\r\n    | ColumnGeometry\r\n    | ContainerGeometry\r\n    | RowGeometry\r\n    | SceneGeometry\r\n    | StackGeometry\r\n    | TextGeometry\r\n\r\nexport const geometry = <AppEvent>(ui: UI<AppEvent>, layout: Layout, offset: Offset, cameraStack: CameraStack): Geometry => {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            return centerGeometry(ui, layout as CenterLayout, offset, cameraStack)\r\n        case UIKind.COLUMN:\r\n            return columnGeometry(ui, layout as ColumnLayout, offset, cameraStack)\r\n        case UIKind.CONTAINER:\r\n            return containerGeometry(ui, layout as ContainerLayout, offset, cameraStack)\r\n        case UIKind.ROW:\r\n            return rowGeometry(ui, layout as RowLayout, offset, cameraStack)\r\n        case UIKind.SCENE:\r\n            return sceneGeometry(ui, layout as SceneLayout, offset, cameraStack)\r\n        case UIKind.STACK:\r\n            return stackGeometry(ui, layout as StackLayout, offset, cameraStack)\r\n        case UIKind.TEXT:\r\n            return textGeometry(ui, layout as TextLayout, offset, cameraStack)\r\n    }\r\n}\r\n\r\nexport interface Entry<AppEvent> {\r\n    readonly ui: UI<AppEvent>\r\n    readonly layout: Layout\r\n    readonly geometry: Geometry\r\n    readonly z: number\r\n}\r\n\r\nexport function* traverse<AppEvent>(ui: UI<AppEvent>, layout: Layout, geometry: Geometry, z: number): Generator<Entry<AppEvent>> {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            yield* centerTraverse(ui, layout as CenterLayout, geometry as CenterGeometry, z)\r\n            break\r\n        case UIKind.COLUMN:\r\n            yield* columnTraverse(ui, layout as ColumnLayout, geometry as ColumnGeometry, z)\r\n            break\r\n        case UIKind.CONTAINER:\r\n            yield* containerTraverse(ui, layout as ContainerLayout, geometry as ContainerGeometry, z)\r\n            break\r\n        case UIKind.ROW:\r\n            yield* rowTraverse(ui, layout as RowLayout, geometry as RowGeometry, z)\r\n            break\r\n        case UIKind.SCENE:\r\n            yield* sceneTraverse(ui, layout as SceneLayout, geometry as SceneGeometry, z)\r\n            break\r\n        case UIKind.STACK:\r\n            yield* stackTraverse(ui, layout as StackLayout, geometry as StackGeometry, z)\r\n            break\r\n        case UIKind.TEXT:\r\n            yield* textTraverse(ui, layout as TextLayout, geometry as TextGeometry, z)\r\n            break\r\n    }\r\n}\r\n\r\nexport interface Connection {\r\n    from: string\r\n    to: string\r\n    color: Color\r\n}\r\n\r\nexport interface Renderer<AppEvent> {\r\n    size: Size\r\n    cameras: Matrix3x3[]\r\n    clickHandlers: ClickHandlers<AppEvent>\r\n    clear: () => void\r\n    draw: (batch: Batch) => void\r\n    drawLines: (lines: Lines) => void\r\n    measureText: MeasureText\r\n    dispatch: (event: AppEvent) => void\r\n}\r\n\r\nexport interface Pointer {\r\n    x: number\r\n    y: number\r\n    id: number\r\n}","import { UI, Geometry, Layout, Entry, traverse } from \".\";\r\n\r\nexport interface Reducer<AppEvent, T> {\r\n    initial: () => T\r\n    combine: (accumulator: T, entry: Entry<AppEvent>) => T\r\n}\r\n\r\nexport const reduce = <AppEvent, T>(ui: UI<AppEvent>, layout: Layout, geometry: Geometry, reducer: Reducer<AppEvent, T>): T => {\r\n    const accumulator = reducer.initial()\r\n    for (const entry of traverse(ui, layout, geometry, 0)) {\r\n        reducer.combine(accumulator, entry)\r\n    }\r\n    return accumulator\r\n}","import { Entry, WorldSpace } from \".\"\r\n\r\nexport interface ClickHandler<AppEvent> {\r\n    onClick: AppEvent\r\n    worldSpace: WorldSpace\r\n}\r\n\r\nexport type ClickHandlers<AppEvent> = ClickHandler<AppEvent>[][]\r\n\r\nexport const initial = <AppEvent>(): ClickHandlers<AppEvent> => []\r\n\r\nexport const combine = <AppEvent>(handlers: ClickHandlers<AppEvent>, entry: Entry<AppEvent>): ClickHandlers<AppEvent> => {\r\n    if (entry.ui.onClick === undefined) return handlers\r\n    const needed = entry.z - handlers.length + 1\r\n    for (let i = 0; i < needed; ++i) handlers.push([])\r\n    handlers[entry.z].push({\r\n        onClick: entry.ui.onClick,\r\n        worldSpace: entry.geometry.worldSpace\r\n    })\r\n    return handlers\r\n}\r\n","import { Entry, WorldSpace } from \".\"\r\n\r\nexport type IdToWorldSpace = { [id: string]: WorldSpace }\r\n\r\nexport const initial = (): IdToWorldSpace => ({})\r\n\r\nexport const combine = <AppEvent>(lookup: IdToWorldSpace, entry: Entry<AppEvent>): IdToWorldSpace => {\r\n    if (!entry.ui.id) return lookup\r\n    lookup[entry.ui.id] = entry.geometry.worldSpace\r\n    return lookup\r\n}","import { Entry, UIKind } from \".\"\r\nimport { ContainerGeometry } from \"./container\"\r\nimport { TextGeometry } from \"./text\"\r\n\r\ntype Geometry = ContainerGeometry | TextGeometry\r\nexport type Layer = { [textureIndex: number]: Geometry[] }\r\nexport type Layers = Layer[]\r\n\r\nexport const initial = (): Layers => []\r\n\r\nexport const combine = <AppEvent>(layers: Layers, entry: Entry<AppEvent>): Layers => {\r\n    switch (entry.ui.kind) {\r\n        case UIKind.CONTAINER:\r\n        case UIKind.TEXT:\r\n            const entryGeometry = entry.geometry as Geometry\r\n            if (entryGeometry.vertices.length == 0) return layers\r\n            const needed = entry.z - layers.length + 1\r\n            for (let i = 0; i < needed; ++i) layers.push({})\r\n            const layer = layers[entry.z]\r\n            const geometry = (() => {\r\n                const geometry = layer[entryGeometry.textureIndex]\r\n                if (geometry) return geometry\r\n                const newGeometry: Geometry[] = []\r\n                layer[entryGeometry.textureIndex] = newGeometry\r\n                return newGeometry\r\n            })()\r\n            geometry.push(entryGeometry)\r\n            return layers\r\n        default:\r\n            return layers\r\n    }\r\n}\r\n","import { Entry, Connection, UIKind } from \".\"\r\n\r\nexport const initial = (): Connection[] => []\r\n\r\nexport const combine = <AppEvent>(connections: Connection[], entry: Entry<AppEvent>): Connection[] => {\r\n    if (entry.ui.kind == UIKind.SCENE) {\r\n        connections.push(...entry.ui.connections)\r\n    }\r\n    return connections\r\n}\r\n","import { Connection, Entry } from \".\"\r\nimport { ClickHandlers } from \"./gather_on_click_handlers\"\r\nimport * as gatherOnClickHandlers from \"./gather_on_click_handlers\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\nimport * as buildIdToWorldSpace from \"./id_to_world_space\"\r\nimport { Layers } from \"./layer_geometry\"\r\nimport * as layerGeometry from \"./layer_geometry\"\r\nimport * as gatherConnections from \"./gather_connections\"\r\n\r\nexport interface Accumulator<AppEvent> {\r\n    layers: Layers,\r\n    clickHandlers: ClickHandlers<AppEvent>,\r\n    idToWorldSpace: IdToWorldSpace\r\n    connections: Connection[]\r\n}\r\n\r\nexport const initial = <AppEvent>(): Accumulator<AppEvent> => ({\r\n    layers: layerGeometry.initial(),\r\n    clickHandlers: gatherOnClickHandlers.initial(),\r\n    idToWorldSpace: buildIdToWorldSpace.initial(),\r\n    connections: gatherConnections.initial()\r\n})\r\n\r\nexport const combine = <AppEvent>(acc: Accumulator<AppEvent>, entry: Entry<AppEvent>): Accumulator<AppEvent> => ({\r\n    layers: layerGeometry.combine(acc.layers, entry),\r\n    clickHandlers: gatherOnClickHandlers.combine(acc.clickHandlers, entry),\r\n    idToWorldSpace: buildIdToWorldSpace.combine(acc.idToWorldSpace, entry),\r\n    connections: gatherConnections.combine(acc.connections, entry)\r\n})\r\n","import { Connection, WorldSpace } from \".\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\n\r\nexport interface Lines {\r\n    vertices: number[]\r\n    colors: number[]\r\n}\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nfunction* cubicBezier(ts: number[], from: WorldSpace, to: WorldSpace): Generator<number> {\r\n    const p0x = (from.x0 + from.x1) / 2\r\n    const p0y = (from.y0 + from.y1) / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = (to.x0 + to.x1) / 2\r\n    const p3y = (to.y0 + to.y1) / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    let lastX = 0\r\n    let lastY = 0\r\n    let first = true\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (first) {\r\n            yield x\r\n            yield y\r\n            first = false\r\n        } else {\r\n            yield lastX\r\n            yield lastY\r\n        }\r\n        yield x\r\n        yield y\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n}\r\n\r\nexport const connectionGeometry = (connections: Connection[], idToWorldSpace: IdToWorldSpace): Lines => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const vertices: number[] = []\r\n    const colors: number[] = []\r\n    for (const { from, to, color } of connections) {\r\n        for (const p of cubicBezier(ts, idToWorldSpace[from], idToWorldSpace[to])) {\r\n            vertices.push(p)\r\n        }\r\n        const { red, green, blue, alpha } = color\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(red, green, blue, alpha)\r\n    }\r\n    return { vertices, colors }\r\n}","import { batchGeometry } from \"./batch_geometry\"\r\nimport { initCameraStack } from \"./camera_stack\"\r\nimport { reduce } from \"./reduce\"\r\nimport { UI, layout, geometry, Renderer } from \".\"\r\nimport * as reducer from './reducer'\r\nimport { Accumulator } from './reducer'\r\nimport { connectionGeometry } from \"./connection_geometry\"\r\n\r\nexport const render = <AppEvent, R extends Renderer<AppEvent>>(renderer: R, ui: UI<AppEvent>): R => {\r\n    const { width, height } = renderer.size\r\n    renderer.clear()\r\n    const constraints = {\r\n        minWidth: 0,\r\n        maxWidth: width,\r\n        minHeight: 0,\r\n        maxHeight: height\r\n    }\r\n    const uiLayout = layout(ui, constraints, renderer.measureText)\r\n    const offsets = { x: 0, y: 0 }\r\n    const cameraStack = initCameraStack()\r\n    const uiGeometry = geometry(ui, uiLayout, offsets, cameraStack)\r\n    const { layers, clickHandlers, connections, idToWorldSpace } = reduce<AppEvent, Accumulator<AppEvent>>(ui, uiLayout, uiGeometry, reducer)\r\n    const batches = batchGeometry(layers)\r\n    const lines = connectionGeometry(connections, idToWorldSpace)\r\n    renderer.cameras = cameraStack.cameras\r\n    renderer.clickHandlers = clickHandlers\r\n    for (const batch of batches) renderer.draw(batch)\r\n    if (lines.vertices.length) renderer.drawLines(lines)\r\n    return renderer\r\n}\r\n","import { Batch } from \"./batch_geometry\";\r\nimport { Font, TextMeasurements, Size } from \".\";\r\nimport { Lines } from \"./connection_geometry\";\r\nimport { Matrix3x3, projection } from \"../linear_algebra/matrix3x3\";\r\nimport { Document, WebGL2Context, Buffer, UniformLocation, Shader, Program, Canvas, Texture, Window } from \"./dom\";\r\nimport { ClickHandlers } from \"./gather_on_click_handlers\";\r\n\r\ninterface Attribute {\r\n    location: number\r\n    buffer: Buffer\r\n}\r\n\r\ninterface Attributes {\r\n    vertices: Attribute\r\n    vertexIndices: Buffer\r\n    colors: Attribute\r\n    textureCoordinates: Attribute\r\n    cameraIndex: Attribute\r\n}\r\n\r\ninterface Uniforms {\r\n    projection: UniformLocation\r\n    texture: UniformLocation\r\n    cameras: UniformLocation\r\n}\r\n\r\ninterface ProgramData {\r\n    vertexShader: Shader\r\n    fragmentShader: Shader\r\n    program: Program\r\n    attributes: Attributes\r\n    uniforms: Uniforms\r\n}\r\n\r\ntype DevicePixelRatio = number\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\nconst createTextMeasurements = (document: Document, gl: WebGL2Context, font: Font, dpr: DevicePixelRatio) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(font.size * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * dpr\r\n    canvas.height = size * dpr\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(dpr, dpr)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = `${font.size}px ${font.family}`\r\n    ctx.fillStyle = 'white'\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const height = font.size\r\n    const widths: number[] = []\r\n    const textureCoordinates: number[][] = []\r\n    for (let i = 0; i < totalCells; ++i) {\r\n        const c = String.fromCharCode(i)\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        widths.push(width)\r\n        const x0 = x / size\r\n        const x1 = (x + width) / size\r\n        const y0 = y / size\r\n        const y1 = (y + height) / size\r\n        textureCoordinates.push([\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        ])\r\n    }\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas\r\n    )\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return { widths, textureCoordinates, texture }\r\n}\r\n\r\nconst mapString = <T>(str: string, f: (c: string, i: number) => T): Array<T> => {\r\n    let result = []\r\n    for (let i = 0; i < str.length; ++i) {\r\n        result.push(f(str[i], i))\r\n    }\r\n    return result\r\n}\r\n\r\nexport class WebGL2Renderer<AppEvent> {\r\n    _size: Size\r\n    _cameras: Matrix3x3[]\r\n\r\n    constructor(\r\n        public window: Window,\r\n        public document: Document,\r\n        public canvas: Canvas,\r\n        public gl: WebGL2Context,\r\n        public program: ProgramData,\r\n        public textures: Texture[],\r\n        public textMeasurementsCache: Map<string, TextMeasurements>,\r\n        public clickHandlers: ClickHandlers<AppEvent>,\r\n        public dispatch: (event: AppEvent) => void\r\n    ) { }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    set size(size: Size) {\r\n        const { gl, program, window } = this\r\n        const { uniforms } = program\r\n        const { canvas } = gl\r\n        gl.uniformMatrix3fv(uniforms.projection, /*transpose*/true, projection(size))\r\n        canvas.width = size.width * window.devicePixelRatio\r\n        canvas.height = size.height * window.devicePixelRatio\r\n        canvas.style.width = `${size.width}px`\r\n        canvas.style.height = `${size.height}px`\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this._size = size\r\n    }\r\n\r\n    get size() { return this._size }\r\n\r\n    set cameras(cameras: Matrix3x3[]) {\r\n        const { gl, program } = this\r\n        const { uniforms } = program\r\n        const data: number[] = []\r\n        for (const camera of cameras) data.push(...camera)\r\n        gl.uniformMatrix3fv(uniforms.cameras, /*transpose*/true, data)\r\n        this._cameras = cameras\r\n    }\r\n\r\n    get cameras() { return this._cameras }\r\n\r\n    draw = ({ vertices, colors, vertexIndices, textureCoordinates, textureIndex, cameraIndex }: Batch) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        const texture = textures[textureIndex]\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndex), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.vertexIndices)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors }: Lines) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        const texture = textures[0]\r\n        const count = vertices.length / 2\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(Array(count * 2).fill(0)), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(Array(count).fill(0)), gl.STATIC_DRAW)\r\n        gl.drawArrays(gl.LINES, /*first*/0, count)\r\n    }\r\n\r\n    getTextureMeasurements = (font: Font, dpr: DevicePixelRatio) => {\r\n        const { document, gl } = this\r\n        const key = `${dpr} ${font.size} ${font.family}`\r\n        const measurements = this.textMeasurementsCache.get(key)\r\n        if (measurements) return measurements\r\n        const { texture, widths, textureCoordinates } = createTextMeasurements(document, gl, font, dpr)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newMeasurements = { widths, textureIndex, textureCoordinates }\r\n        this.textMeasurementsCache.set(key, newMeasurements)\r\n        return newMeasurements\r\n    }\r\n\r\n    measureText = (font: Font, str: string) => {\r\n        const { window } = this\r\n        const dpr = window.devicePixelRatio\r\n        const { widths, textureIndex, textureCoordinates } = this.getTextureMeasurements(font, dpr)\r\n        const indices = mapString(str, c => c.charCodeAt(0))\r\n        return {\r\n            widths: indices.map(i => widths[i]),\r\n            textureIndex,\r\n            textureCoordinates: indices.map(i => textureCoordinates[i]),\r\n        }\r\n    }\r\n}\r\n\r\nconst createVertexShader = (gl: WebGL2Context, attributes: Attributes): Shader => {\r\n    const { vertices, colors, textureCoordinates, cameraIndex } = attributes\r\n    const vertexShaderSource = `#version 300 es\r\n  uniform mat3 u_projection;\r\n  uniform mat3 u_cameras[8];\r\n\r\n  layout(location = ${vertices.location}) in vec2 a_vertex;\r\n  layout(location = ${colors.location}) in vec4 a_color;\r\n  layout(location = ${textureCoordinates.location}) in vec2 a_textureCoordinates;\r\n  layout(location = ${cameraIndex.location}) in uint a_cameraIndex;\r\n\r\n  out vec4 v_color;\r\n  out vec2 v_textureCoordinates;\r\n\r\n  void main() {\r\n    mat3 camera = u_cameras[a_cameraIndex];\r\n    mat3 transform = u_projection * inverse(camera);\r\n    gl_Position = vec4((transform * vec3(a_vertex, 1)).xy, 0, 1);\r\n    v_color = a_color / 255.0;\r\n    v_textureCoordinates = a_textureCoordinates;\r\n  }\r\n  `\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n    gl.shaderSource(vertexShader, vertexShaderSource)\r\n    gl.compileShader(vertexShader)\r\n    return vertexShader\r\n}\r\n\r\nconst createFragmentShader = (gl: WebGL2Context): Shader => {\r\n    const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec4 v_color;\r\n  in vec2 v_textureCoordinates;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  void main() {\r\n    fragColor = texture(u_texture, v_textureCoordinates) * v_color;\r\n  }\r\n  `\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n    gl.compileShader(fragmentShader)\r\n    return fragmentShader\r\n}\r\n\r\nconst bindVertices = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_vertex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindColors = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_color')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindTextureCoordinates = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_textureCoordinates')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindCameraIndex = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_cameraIndex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribIPointer(\r\n        location,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst createProgram = (gl: WebGL2Context): ProgramData => {\r\n    const attributes: Attributes = {\r\n        vertices: {\r\n            location: 0,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        colors: {\r\n            location: 1,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        textureCoordinates: {\r\n            location: 2,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        cameraIndex: {\r\n            location: 3,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        vertexIndices: gl.createBuffer()!\r\n    }\r\n    const vertexShader = createVertexShader(gl, attributes)\r\n    const fragmentShader = createFragmentShader(gl)\r\n    const program = gl.createProgram()!\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        console.log(gl.getShaderInfoLog(vertexShader))\r\n        console.log(gl.getShaderInfoLog(fragmentShader))\r\n    }\r\n    gl.useProgram(program)\r\n    const vertexArrayObject = gl.createVertexArray()!\r\n    gl.bindVertexArray(vertexArrayObject)\r\n    bindVertices(gl, program, attributes.vertices)\r\n    bindColors(gl, program, attributes.colors)\r\n    bindTextureCoordinates(gl, program, attributes.textureCoordinates)\r\n    bindCameraIndex(gl, program, attributes.cameraIndex)\r\n    const uniforms: Uniforms = {\r\n        projection: gl.getUniformLocation(program, 'u_projection')!,\r\n        texture: gl.getUniformLocation(program, 'u_texture')!,\r\n        cameras: gl.getUniformLocation(program, 'u_cameras')!\r\n    }\r\n    return {\r\n        vertexShader,\r\n        fragmentShader,\r\n        program,\r\n        attributes,\r\n        uniforms\r\n    }\r\n}\r\n\r\ninterface Parameters<AppEvent> {\r\n    width: number\r\n    height: number\r\n    document: Document\r\n    window: Window\r\n    dispatch?: (event: AppEvent) => void\r\n}\r\n\r\nexport const webGL2Renderer = <AppEvent>({ width, height, document, window, dispatch }: Parameters<AppEvent>): WebGL2Renderer<AppEvent> => {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.style.touchAction = 'none'\r\n    const gl = canvas.getContext('webgl2')!\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n    gl.depthMask(false)\r\n    gl.activeTexture(gl.TEXTURE0)\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n    gl.clearColor(0, 0, 0, 1)\r\n    const program = createProgram(gl)\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255])\r\n    )\r\n    const renderer = new WebGL2Renderer<AppEvent>(\r\n        window,\r\n        document,\r\n        canvas,\r\n        gl,\r\n        program,\r\n        [texture],\r\n        new Map(),\r\n        [],\r\n        dispatch ?? (() => { })\r\n    )\r\n    renderer.size = { width, height }\r\n    return renderer\r\n}","import { pointerDown } from \"./pointer_down\"\r\nimport { render } from \"./render\"\r\nimport { WebGL2Renderer, webGL2Renderer } from \"./webgl2\"\r\nimport { Pointer, UI } from \".\"\r\n\r\nexport const transformPointer = (p: PointerEvent): Pointer => ({\r\n    x: p.clientX,\r\n    y: p.clientY,\r\n    id: p.pointerId,\r\n})\r\n\r\nexport type Dispatch<AppEvent> = (event: AppEvent) => void\r\n\r\ntype View<State, AppEvent> = (state: State) => UI<AppEvent>\r\n\r\ninterface Milliseconds {\r\n    milliseconds: number\r\n}\r\n\r\ninterface Scheduled<AppEvent> {\r\n    after: Milliseconds\r\n    event: AppEvent\r\n}\r\n\r\nexport interface UpdateResult<State, AppEvent> {\r\n    state: State\r\n    render?: boolean\r\n    schedule?: Scheduled<AppEvent>[]\r\n    dispatch?: AppEvent[]\r\n}\r\n\r\ntype Update<State, AppEvent> = (state: State, event: AppEvent) => UpdateResult<State, AppEvent>\r\n\r\nexport const run = <State, AppEvent>(state: State, view: View<State, AppEvent>, update: Update<State, AppEvent>): Dispatch<AppEvent> => {\r\n    let renderer = webGL2Renderer<AppEvent>({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        window,\r\n        document,\r\n    })\r\n    let renderQueued = false\r\n    const scheduleRender = () => {\r\n        if (!renderQueued) {\r\n            renderQueued = true\r\n            requestAnimationFrame(() => {\r\n                renderer = render(renderer, view(state))\r\n                renderQueued = false\r\n            })\r\n        }\r\n    }\r\n    const dispatch = (event: AppEvent) => {\r\n        const { state: newState, render, schedule, dispatch: dispatchEvents } = update(state, event)\r\n        state = newState\r\n        if (render) scheduleRender()\r\n        for (const { after, event } of schedule ?? []) {\r\n            const { milliseconds } = after\r\n            setTimeout(() => dispatch(event), milliseconds)\r\n        }\r\n        for (const event of dispatchEvents ?? []) dispatch(event)\r\n    }\r\n    renderer.dispatch = dispatch\r\n    document.body.appendChild(renderer.canvas as HTMLCanvasElement)\r\n    document.addEventListener(\"pointerdown\", p => {\r\n        renderer = pointerDown<AppEvent, WebGL2Renderer<AppEvent>>(renderer, transformPointer(p))\r\n    })\r\n    window.addEventListener(\"resize\", () => {\r\n        renderer.size = { width: window.innerWidth, height: window.innerHeight }\r\n        scheduleRender()\r\n    })\r\n    scheduleRender()\r\n    return dispatch\r\n}\r\n","import { CrossAxisAlignment, MainAxisAlignment } from \"./ui/alignment\"\r\nimport { AppEvent, EventKind, update } from \"./event\"\r\nimport { identity } from \"./linear_algebra/matrix3x3\"\r\nimport { run, transformPointer } from \"./ui/run\"\r\nimport { Body, Finder, Input, InputTargetKind, Node, Output, State, Theme, VirtualKeyboardKind } from \"./state\"\r\nimport { text, stack, scene, row, container, column, Connection, UI } from './ui'\r\n\r\nconst spacer = (size: number): UI<AppEvent> =>\r\n    container({ width: size, height: size })\r\n\r\nconst intersperse = <T>(array: T[], seperator: T): T[] => {\r\n    const result = [array[0]]\r\n    for (const element of array.slice(1)) {\r\n        result.push(seperator, element)\r\n    }\r\n    return result\r\n}\r\n\r\nconst inputUi = (theme: Theme, { name, selected }: Input, nodeIndex: number, inputIndex: number): UI<AppEvent> =>\r\n    container({\r\n        onClick: {\r\n            kind: EventKind.CLICKED_INPUT,\r\n            inputPath: { nodeIndex: nodeIndex, inputIndex: inputIndex }\r\n        }\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            container({\r\n                id: `input ${nodeIndex} ${inputIndex}`,\r\n                width: 14,\r\n                height: 14,\r\n                color: selected ? theme.selectedInput : theme.input,\r\n            }),\r\n            spacer(4),\r\n            text(name)\r\n        ])\r\n    )\r\n\r\nconst inputsUi = (theme: Theme, inputs: Input[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            inputs.map((input, inputIndex) => inputUi(theme, input, nodeIndex, inputIndex)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\nconst outputUi = (theme: Theme, { name, selected }: Output, nodeIndex: number, outputIndex: number): UI<AppEvent> =>\r\n    container({\r\n        onClick: {\r\n            kind: EventKind.CLICKED_OUTPUT,\r\n            outputPath: { nodeIndex: nodeIndex, outputIndex: outputIndex }\r\n        }\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            container({\r\n                id: `output ${nodeIndex} ${outputIndex}`,\r\n                width: 14,\r\n                height: 14,\r\n                color: selected ? theme.selectedInput : theme.input,\r\n            }),\r\n        ])\r\n    )\r\n\r\n\r\nconst outputsUi = (theme: Theme, outputs: Output[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            outputs.map((output, outputIndex) => outputUi(theme, output, nodeIndex, outputIndex)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\nconst numberUi = (theme: Theme, body: Body, nodeIndex: number): UI<AppEvent> =>\r\n    container({\r\n        color: body.editing ? theme.selectedInput : theme.background,\r\n        padding: 5,\r\n        onClick: {\r\n            kind: EventKind.CLICKED_NUMBER,\r\n            nodeIndex\r\n        }\r\n    },\r\n        text(body.value.toString()))\r\n\r\nconst nodeUi = (theme: Theme, { name, x, y, inputs, body, outputs }: Node, index: number): UI<AppEvent> => {\r\n    const rowEntries: UI<AppEvent>[] = []\r\n    if (inputs.length) rowEntries.push(inputsUi(theme, inputs, index))\r\n    if (inputs.length && outputs.length) rowEntries.push(spacer(15))\r\n    if (body !== undefined) rowEntries.push(numberUi(theme, body, index), spacer(15))\r\n    if (outputs.length) rowEntries.push(outputsUi(theme, outputs, index))\r\n    return container(\r\n        {\r\n            color: theme.node,\r\n            padding: 4,\r\n            x, y,\r\n            onClick: {\r\n                kind: EventKind.CLICKED_NODE,\r\n                index: index\r\n            }\r\n        },\r\n        column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            row(rowEntries)\r\n        ])\r\n    )\r\n}\r\n\r\nconst finder = ({ search, options }: Finder, theme: Theme): UI<AppEvent> =>\r\n    column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n        container({ height: 10 }),\r\n        container({ color: theme.node, padding: 4 },\r\n            column([\r\n                container({ color: theme.background, width: 300, padding: 4 },\r\n                    text({ color: theme.input, size: 24 }, search.length ? search : \"Search ...\")),\r\n                container({ width: 10, height: 10 }),\r\n                ...options.map((option, i) =>\r\n                    container<AppEvent>({\r\n                        padding: 4,\r\n                        onClick: {\r\n                            kind: EventKind.CLICKED_FINDER_OPTION,\r\n                            option\r\n                        }\r\n                    },\r\n                        text({\r\n                            size: 18,\r\n                            color: i == 0 ? theme.input : { red: 255, green: 255, blue: 255, alpha: 255 }\r\n                        }, option)\r\n                    )\r\n                )\r\n            ])\r\n        )\r\n    ])\r\n\r\nconst virtualKey = (key: string): UI<AppEvent> =>\r\n    container({\r\n        padding: 10,\r\n        onClick: {\r\n            kind: EventKind.VIRTUAL_KEYDOWN,\r\n            key\r\n        }\r\n    }, text({ size: 24 }, key))\r\n\r\nconst virtualKeys = (keys: string[]) =>\r\n    row(keys.map(c => virtualKey(c)))\r\n\r\nconst alphabeticVirtualKeyboard = (theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.SPACE_BETWEEN }, [\r\n            container({ padding: 4, color: theme.node },\r\n                column([\r\n                    virtualKeys(['1', '2', '3', '4', '5']),\r\n                    virtualKeys(['q', 'w', 'e', 'r', 't']),\r\n                    virtualKeys(['a', 's', 'd', 'f', 'g']),\r\n                    virtualKeys(['z', 'x', 'c', 'v']),\r\n                    virtualKeys(['sft', 'space']),\r\n                ])\r\n            ),\r\n            container({ padding: 4, color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(['6', '7', '8', '9', '0']),\r\n                    virtualKeys(['y', 'u', 'i', 'o', 'p']),\r\n                    virtualKeys(['h', 'j', 'k', 'l']),\r\n                    virtualKeys(['b', 'n', 'm', 'del']),\r\n                    virtualKeys(['space', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\nconst numericVirtualKeyboard = (theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n            container({ padding: 4, color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(['1', '2', '3', '4']),\r\n                    virtualKeys(['5', '6', '7', '8']),\r\n                    virtualKeys(['9', '0', 'del']),\r\n                    virtualKeys(['.', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\nconst virtualKeyboard = (theme: Theme, kind: VirtualKeyboardKind) => {\r\n    switch (kind) {\r\n        case VirtualKeyboardKind.ALPHABETIC: return alphabeticVirtualKeyboard(theme)\r\n        case VirtualKeyboardKind.NUMERIC: return numericVirtualKeyboard(theme)\r\n    }\r\n}\r\n\r\n\r\nconst view = (state: State): UI<AppEvent> => {\r\n    const nodes: UI<AppEvent>[] = []\r\n    state.graph.nodes.forEach((node, i) => {\r\n        if (i !== state.draggedNode) nodes.push(nodeUi(state.theme, node, i))\r\n    })\r\n    if (state.draggedNode !== null) {\r\n        const i = state.draggedNode\r\n        nodes.push(nodeUi(state.theme, state.graph.nodes[i], i))\r\n    }\r\n    const connections: Connection[] = state.graph.edges.map(({ input, output }) => ({\r\n        from: `output ${output.nodeIndex} ${output.outputIndex}`,\r\n        to: `input ${input.nodeIndex} ${input.inputIndex}`,\r\n        color: state.theme.connection\r\n    }))\r\n    const stacked: UI<AppEvent>[] = [\r\n        container({ color: state.theme.background, onClick: { kind: EventKind.CLICKED_BACKGROUND } }),\r\n        scene({ camera: state.camera, children: nodes, connections }),\r\n    ]\r\n    if (state.finder.show) stacked.push(finder(state.finder, state.theme))\r\n    if (state.virtualKeyboard.show) stacked.push(virtualKeyboard(state.theme, state.virtualKeyboard.kind))\r\n    return stack(stacked)\r\n}\r\n\r\nconst initialState: State = {\r\n    graph: {\r\n        nodes: [\r\n            {\r\n                name: \"Number\",\r\n                inputs: [],\r\n                body: { value: 5, editing: false },\r\n                outputs: [\r\n                    { name: \"out\", selected: false, edgeIndices: [0] },\r\n                ],\r\n                x: 25,\r\n                y: 25\r\n            },\r\n            {\r\n                name: \"Number\",\r\n                inputs: [],\r\n                body: { value: 10, editing: false },\r\n                outputs: [\r\n                    { name: \"out\", selected: false, edgeIndices: [1] },\r\n                ],\r\n                x: 25,\r\n                y: 100\r\n            },\r\n            {\r\n                name: \"Add\",\r\n                inputs: [\r\n                    { name: \"x\", selected: false, edgeIndices: [0] },\r\n                    { name: \"y\", selected: false, edgeIndices: [1] }\r\n                ],\r\n                outputs: [\r\n                    { name: \"out\", selected: false, edgeIndices: [2] },\r\n                ],\r\n                x: 150,\r\n                y: 50\r\n            },\r\n            {\r\n                name: \"Number\",\r\n                inputs: [],\r\n                body: { value: 15, editing: false },\r\n                outputs: [\r\n                    { name: \"out\", selected: false, edgeIndices: [3] },\r\n                ],\r\n                x: 175,\r\n                y: 150\r\n            },\r\n            {\r\n                name: \"Divide\",\r\n                inputs: [\r\n                    { name: \"x\", selected: false, edgeIndices: [2] },\r\n                    { name: \"y\", selected: false, edgeIndices: [3] }\r\n                ],\r\n                outputs: [\r\n                    { name: \"out\", selected: false, edgeIndices: [4] },\r\n                ],\r\n                x: 350,\r\n                y: 50\r\n            },\r\n            {\r\n                name: \"Return\",\r\n                inputs: [\r\n                    { name: \"value\", selected: false, edgeIndices: [4] },\r\n                ],\r\n                outputs: [],\r\n                x: 550,\r\n                y: 50\r\n            },\r\n        ],\r\n        edges: [\r\n            {\r\n                output: { nodeIndex: 0, outputIndex: 0 },\r\n                input: { nodeIndex: 2, inputIndex: 0 },\r\n            },\r\n            {\r\n                output: { nodeIndex: 1, outputIndex: 0 },\r\n                input: { nodeIndex: 2, inputIndex: 1 },\r\n            },\r\n            {\r\n                output: { nodeIndex: 2, outputIndex: 0 },\r\n                input: { nodeIndex: 4, inputIndex: 0 },\r\n            },\r\n            {\r\n                output: { nodeIndex: 3, outputIndex: 0 },\r\n                input: { nodeIndex: 4, inputIndex: 1 },\r\n            },\r\n            {\r\n                output: { nodeIndex: 4, outputIndex: 0 },\r\n                input: { nodeIndex: 5, inputIndex: 0 },\r\n            }\r\n        ]\r\n    },\r\n    zooming: false,\r\n    dragging: false,\r\n    draggedNode: null,\r\n    pointers: [],\r\n    pointerDistance: 0,\r\n    pointerCenter: [0, 0],\r\n    camera: identity(),\r\n    selectedOutput: null,\r\n    selectedInput: null,\r\n    theme: {\r\n        background: { red: 2, green: 22, blue: 39, alpha: 255 },\r\n        node: { red: 41, green: 95, blue: 120, alpha: 255 },\r\n        input: { red: 188, green: 240, blue: 192, alpha: 255 },\r\n        selectedInput: { red: 175, green: 122, blue: 208, alpha: 255 },\r\n        connection: { red: 255, green: 255, blue: 255, alpha: 255 },\r\n    },\r\n    potentialDoubleClick: false,\r\n    nodePlacementLocation: { x: 0, y: 0 },\r\n    finder: {\r\n        search: '',\r\n        options: [],\r\n        show: false\r\n    },\r\n    virtualKeyboard: {\r\n        show: false,\r\n        kind: VirtualKeyboardKind.ALPHABETIC\r\n    },\r\n    inputTarget: { kind: InputTargetKind.NONE },\r\n    operations: {\r\n        \"Number\": {\r\n            name: \"Number\",\r\n            inputs: [],\r\n            body: 0,\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Add\": {\r\n            name: \"Add\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Subtract\": {\r\n            name: \"Subtract\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Multiply\": {\r\n            name: \"Multiply\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Divide\": {\r\n            name: \"Divide\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Equal\": {\r\n            name: \"Equal\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Less Than\": {\r\n            name: \"Less Than\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Less Than Or Equal\": {\r\n            name: \"Less Than Or Equal\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        }\r\n    }\r\n}\r\n\r\nconst dispatch = run(initialState, view, update)\r\n\r\nif (typeof PointerEvent.prototype.getCoalescedEvents === 'function') {\r\n    document.addEventListener('pointermove', (e) => {\r\n        e.getCoalescedEvents().forEach(p => {\r\n            dispatch({\r\n                kind: EventKind.POINTER_MOVE,\r\n                pointer: transformPointer(p)\r\n            })\r\n        })\r\n    })\r\n} else {\r\n    document.addEventListener('pointermove', p =>\r\n        dispatch({\r\n            kind: EventKind.POINTER_MOVE,\r\n            pointer: transformPointer(p)\r\n        })\r\n    )\r\n}\r\n\r\ndocument.addEventListener(\"pointerdown\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_DOWN,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener(\"pointerup\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_UP,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener('wheel', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.WHEEL,\r\n        x: e.clientX,\r\n        y: e.clientY,\r\n        deltaY: e.deltaY,\r\n    })\r\n}, { passive: false })\r\n\r\ndocument.addEventListener('contextmenu', e => {\r\n    e.preventDefault()\r\n})\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    document.body.requestFullscreen()\r\n})\r\n\r\ndocument.addEventListener('keydown', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.KEYDOWN,\r\n        key: e.key\r\n    })\r\n})"],"names":["$9b5b1345df3acfe9$export$6595504a60e1f77c","MainAxisAlignment1","$9b5b1345df3acfe9$export$66a3248d846611ce","CrossAxisAlignment1","$f4c0df53f29f413e$export$fad298d038a96a64","haystack","needle","haystackIndex","needleIndex","length","n","toLowerCase","$2a9d6d4b688c9d90$export$b74061472fe7c07","width","height","$2a9d6d4b688c9d90$export$d73ee8ef04f5226a","x","y","$2a9d6d4b688c9d90$export$dcdf75081b88279d","$2a9d6d4b688c9d90$export$84b43e5e8429f175","matrices","head","tail","reduce","a","b","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","$2a9d6d4b688c9d90$export$dbb85424dca880d0","b1","b2","b3","$2a9d6d4b688c9d90$export$70ae2c07e401031b","idet","$9a57707492d0f60d$export$f24224f1c91d8156","c","Math","sqrt","pow","$0b89d474933103bc$export$52710c6013234220","VirtualKeyboardKind1","$0b89d474933103bc$export$c59a831e29c6eb0","InputTargetKind1","$d7336fab2a6e7c56$export$50508d7849040d51","EventKind1","$d7336fab2a6e7c56$var$pointerMove","state","event","dragging","zooming","finder","show","nodePlacementLocation","pointer","rerender","index","pointers","findIndex","p","id","dx","dy","draggedNode","scaling","camera","node","graph","nodes","render","p0","p1","x1","y1","x2","y2","distance","previousDistance","pointerDistance","previousCenter","pointerCenter","move","zoom","moveBack","$d7336fab2a6e7c56$var$updateFinderOptions","options","Object","keys","operations","filter","item","search","$d7336fab2a6e7c56$export$a72e97d68c48a4a","virtualKeyboard","kind","ALPHABETIC","inputTarget","FINDER","potentialDoubleClick","$d7336fab2a6e7c56$var$closeFinder","NONE","$d7336fab2a6e7c56$var$insertOperationFromFinder","name","operation","_","push","inputs","map","input","selected","edgeIndices","outputs","output","body","undefined","value","editing","console","log","$3aa357479a49b085$var$inWorldSpace","x0","y0","$3aa357479a49b085$export$e6e29dfeb5ef19c1","renderer","i","clickHandlers","onClick","worldSpace","dispatch","$b6ca04fcd3e6f123$var$newBatch","textureIndex","vertices","colors","vertexIndices","textureCoordinates","cameraIndex","$b6ca04fcd3e6f123$export$1e96939139b396da","layers","batches","batch","batchTextureIndex","toString","layer","geometries","entries","parseInt","geometry","offset","$f82cd7e5241fa075$export$eea5d8c438131c40","cameraStack","cameras","stack","transform","$f82cd7e5241fa075$export$3c901611250dc02c","slice","$f82cd7e5241fa075$export$d14f39ee728c5da5","pop","$f82cd7e5241fa075$export$86ad693455315c84","_0","_1","$fd89ce3675dee463$export$83d5419fac007c8c","ui","constraints","measureText","childLayout","$1e3ba84e9ce044db$export$b3219800bda33a1f","child","size","maxWidth","maxHeight","$fd89ce3675dee463$export$efb2657d225c129a","layout1","childOffset","$1e3ba84e9ce044db$export$42a7622cbf932bb","$fd89ce3675dee463$export$edc8554b50279bf4","layout2","geometry1","z","$1e3ba84e9ce044db$export$df3f009e3d155b20","$518015a6e3cc694d$export$4e0c71f277ca26b3","args","properties","children","Array","$1e3ba84e9ce044db$export$8984f19c96d30531","COLUMN","mainAxisAlignment","START","crossAxisAlignment","$518015a6e3cc694d$export$f8ce731bdfd45dc7","initial","totalChildHeight","result","acc","max","$518015a6e3cc694d$export$5a1548308f4d4391","freeSpaceY","CENTER","END","SPACE_EVENLY","SPACE_BETWEEN","addYStart","addYCenter","addYEnd","addYSpaceEvenly","addYSpaceBetween","addY","offsetXStart","offsetXCenter","offsetXEnd","offsetX","childGeometry","$518015a6e3cc694d$export$9f45e883ef2b80c0","layout","nextZ","$8a99d960732a172f$var$transformPadding","padding","top","right","bottom","left","$8a99d960732a172f$export$34e0f9847d4c02dd","color","CONTAINER","$8a99d960732a172f$export$a4e80cd8d85917bb","$8a99d960732a172f$export$7c88ce694bad6320","red","green","blue","alpha","fill","$8a99d960732a172f$export$6f2a7b3ebfc2cfa0","$9e4edab979495f0d$export$120ff0929b202a6d","ROW","$9e4edab979495f0d$export$4076779b9674714b","totalChildWidth","$9e4edab979495f0d$export$90e65e88c1393562","freeSpaceX","addXStart","addXCenter","addXEnd","addXSpaceEvenly","addXSpaceBetween","addX","offsetYStart","offsetYCenter","offsetYEnd","offsetY","$9e4edab979495f0d$export$1152b7e6303a2c68","$864b15efd9f5e1a7$export$33aff30b8aa0934e","connections","SCENE","$864b15efd9f5e1a7$export$9e03d30774b30061","$864b15efd9f5e1a7$export$7a4266c2aa024d65","$864b15efd9f5e1a7$export$7b2ec4d82804e47f","entry","$d380360335f9e6c0$export$b008c3d2ea57ca56","$d380360335f9e6c0$export$218db93a2e8965d","$d380360335f9e6c0$export$13c8b19be38670b3","$2d5075f154be1094$export$6f093cfa640b7166","str","TEXT","font","family","$2d5075f154be1094$export$801f12fcd9ba2788","measurements","width1","widths","$2d5075f154be1094$var$vertices","$2d5075f154be1094$var$colors","$2d5075f154be1094$var$vertexIndices","$2d5075f154be1094$export$f543e72c4af89828","textLayout1","flat","$2d5075f154be1094$export$3d02b268fb89b14d","UIKind1","STACK","$e364cd7af35feef1$export$533b26079ad0b4b","reducer","accumulator","combine","$cce0295d6d688136$export$1be1fc439b849fdf","handlers","needed","$3d1ad3352b3daee3$export$1be1fc439b849fdf","lookup","$0c1fb5dcb73854b4$export$1be1fc439b849fdf","entryGeometry","newGeometry","$d33a6e3c77e8a82f$export$1be1fc439b849fdf","$8fb27619ef3752ba$export$59ff82fc918bd7e3","idToWorldSpace","$8fb27619ef3752ba$export$1be1fc439b849fdf","$35b57a7a8d625996$var$cubicBezier","ts","from","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","first","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$35b57a7a8d625996$export$48a436e09c0b8a4d","start","stop","num","step","$35b57a7a8d625996$var$linspace","samples","$cbb8ce85e6a0780d$export$b3890eb0ae9dca99","clear","uiLayout","minWidth","minHeight","uiGeometry","$8fb27619ef3752ba$exports","lines","draw","drawLines","$2561bfce8bbd3fa5$export$ce2766bf4a8721d3","constructor","window1","document1","canvas","gl1","program1","textures1","textMeasurementsCache","window","document","gl","program","textures","this","COLOR_BUFFER_BIT","attributes","texture","bindTexture","TEXTURE_2D","bindBuffer","ARRAY_BUFFER","buffer","bufferData","Float32Array","STATIC_DRAW","Uint8Array","ELEMENT_ARRAY_BUFFER","Uint16Array","drawElements","TRIANGLES","UNSIGNED_SHORT","count","drawArrays","LINES","getTextureMeasurements","dpr","key","get","createElement","ctx","getContext","rows","current","$2561bfce8bbd3fa5$var$nearestPowerOfTwo","cellSize","style","scale","textAlign","textBaseline","fillStyle","clearRect","String","fromCharCode","metric","ceil","floor","fillText","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","$2561bfce8bbd3fa5$var$createTextMeasurements","newMeasurements","set","devicePixelRatio","indices","f","$2561bfce8bbd3fa5$var$mapString","charCodeAt","uniforms","uniformMatrix3fv","projection","viewport","_size","data","_cameras","location","createBuffer","vertexShader","vertexShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","$2561bfce8bbd3fa5$var$createVertexShader","fragmentShader","FRAGMENT_SHADER","$2561bfce8bbd3fa5$var$createFragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getShaderInfoLog","useProgram","vertexArrayObject","createVertexArray","bindVertexArray","FLOAT","$2561bfce8bbd3fa5$var$bindVertices","$2561bfce8bbd3fa5$var$bindColors","bindAttribLocation","enableVertexAttribArray","vertexAttribPointer","$2561bfce8bbd3fa5$var$bindTextureCoordinates","vertexAttribIPointer","getUniformLocation","$13904534c2e00d0c$export$479aac53993fd71","clientX","clientY","pointerId","$b4e14b6b8da86996$var$spacer","$b4e14b6b8da86996$var$intersperse","array","seperator","element","$b4e14b6b8da86996$var$inputsUi","theme","nodeIndex","inputIndex","CLICKED_INPUT","inputPath","selectedInput","$b4e14b6b8da86996$var$inputUi","$b4e14b6b8da86996$var$outputsUi","outputIndex","CLICKED_OUTPUT","outputPath","$b4e14b6b8da86996$var$outputUi","$b4e14b6b8da86996$var$nodeUi","rowEntries","background","CLICKED_NUMBER","$b4e14b6b8da86996$var$numberUi","CLICKED_NODE","$b4e14b6b8da86996$var$virtualKeys","$b4e14b6b8da86996$var$virtualKey","VIRTUAL_KEYDOWN","$b4e14b6b8da86996$var$virtualKeyboard","$b4e14b6b8da86996$var$alphabeticVirtualKeyboard","NUMERIC","$b4e14b6b8da86996$var$numericVirtualKeyboard","$b4e14b6b8da86996$var$dispatch","view","update","$2561bfce8bbd3fa5$export$94781114c991ae1c","innerWidth","innerHeight","renderQueued","scheduleRender","requestAnimationFrame","newState","render1","schedule","dispatchEvents","after","event1","milliseconds","setTimeout","event2","appendChild","addEventListener","edges","selectedOutput","connection","Number","Add","Subtract","Multiply","Divide","Equal","forEach","stacked","CLICKED_BACKGROUND","option","CLICKED_FINDER_OPTION","$b4e14b6b8da86996$var$finder","POINTER_DOWN","DOUBLE_CLICK","DOUBLE_CLICK_TIMEOUT","$d7336fab2a6e7c56$var$pointerDown","POINTER_UP","splice","$d7336fab2a6e7c56$var$pointerUp","POINTER_MOVE","$d7336fab2a6e7c56$var$clickedNode","WHEEL","deltaY","$d7336fab2a6e7c56$var$wheel","edgeIndex","$d7336fab2a6e7c56$var$clickedInput","$d7336fab2a6e7c56$var$clickedOutput","$d7336fab2a6e7c56$var$doubleClickTimeout","$d7336fab2a6e7c56$var$doubleClick","KEYDOWN","NUMBER","newValue","parseFloat","$d7336fab2a6e7c56$var$keyDown","$d7336fab2a6e7c56$var$virtualKeyDown","$d7336fab2a6e7c56$var$clickedFinderOption","$d7336fab2a6e7c56$var$clickedNumber","$d7336fab2a6e7c56$var$clickedBackground","PointerEvent","prototype","getCoalescedEvents","e","preventDefault","passive","requestFullscreen"],"version":3,"file":"index.f0426f09.js.map"}