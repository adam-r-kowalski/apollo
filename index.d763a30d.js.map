{"mappings":"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","sources":["src/alignment.ts","src/linear_algebra/matrix3x3.ts","src/linear_algebra/vector3.ts","src/event.ts","src/padding.ts","src/renderer/pointer_down.ts","src/renderer/batch_geometry.ts","src/camera_stack.ts","src/reduce.ts","src/renderer/id_to_world_space.ts","src/renderer/connection_geometry.ts","src/renderer/render.ts","src/renderer/webgl2.ts","src/run.ts","src/ui/center.ts","src/ui/column.ts","src/ui/container.ts","src/ui/row.ts","src/ui/scene.ts","src/ui/stack.ts","src/ui/text.ts","src/index.ts","src/fuzzy_find.ts"],"sourcesContent":["export enum MainAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END,\r\n    SPACE_EVENLY,\r\n    SPACE_BETWEEN\r\n}\r\n\r\nexport enum CrossAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END\r\n}","import { Size } from \"../layout\"\r\nimport { Vector3 } from \"./vector3\"\r\n\r\nexport type Matrix3x3 = number[]\r\n\r\nexport const identity = (): Matrix3x3 => [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n]\r\n\r\nexport const projection = ({ width, height }: Size): Matrix3x3 => [\r\n    2 / width, 0, -1,\r\n    0, -2 / height, 1,\r\n    0, 0, 1\r\n]\r\n\r\nexport const translate = (x: number, y: number): Matrix3x3 => [\r\n    1, 0, x,\r\n    0, 1, y,\r\n    0, 0, 1\r\n]\r\n\r\nexport const scale = (x: number, y: number): Matrix3x3 => [\r\n    x, 0, 0,\r\n    0, y, 0,\r\n    0, 0, 1\r\n]\r\n\r\nexport const rotate = (radians: number): Matrix3x3 => {\r\n    const c = Math.cos(radians)\r\n    const s = Math.sin(radians)\r\n    return [\r\n        c, s, 0,\r\n        -s, c, 0,\r\n        0, 0, 1\r\n    ]\r\n}\r\n\r\nexport const multiplyMatrices = (...matrices: Matrix3x3[]) => {\r\n    const [head, ...tail] = matrices\r\n    return tail.reduce((a, b) => {\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return [\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ]\r\n    }, head)\r\n}\r\n\r\nexport const multiplyMatrixVector = (a: Matrix3x3, b: Vector3): Vector3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b1 = b[0]\r\n    const b2 = b[1]\r\n    const b3 = b[2]\r\n    const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n    const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n    const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n    return [c1, c2, c3]\r\n}\r\n\r\nexport const inverse = (a: Matrix3x3): Matrix3x3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b11 = a22 * a33 - a23 * a32\r\n    const b12 = a21 * a33 - a23 * a31\r\n    const b13 = a21 * a32 - a22 * a31\r\n    const b21 = a12 * a33 - a13 * a32\r\n    const b22 = a11 * a33 - a13 * a31\r\n    const b23 = a11 * a32 - a12 * a31\r\n    const b31 = a12 * a23 - a13 * a22\r\n    const b32 = a11 * a23 - a13 * a21\r\n    const b33 = a11 * a22 - a12 * a21\r\n    const det = a31 * b31 - a32 * b32 + a33 * b33\r\n    const idet = 1 / det\r\n    return [\r\n        idet * b11, idet * -b21, idet * b31,\r\n        idet * -b12, idet * b22, idet * -b32,\r\n        idet * b13, idet * -b23, idet * b33\r\n    ]\r\n}","export type Vector3 = number[]\r\n\r\nexport const length = ([a, b, c]: Vector3) =>\r\n    Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))","import { multiplyMatrices, multiplyMatrixVector, scale, translate } from \"./linear_algebra/matrix3x3\"\r\nimport { length } from \"./linear_algebra/vector3\"\r\nimport { UpdateResult } from \"./run\"\r\nimport { InputPath, OutputPath, State } from \"./state\"\r\nimport { Pointer } from \"./ui\"\r\n\r\nexport enum EventKind {\r\n    POINTER_MOVE,\r\n    POINTER_DOWN,\r\n    POINTER_UP,\r\n    CLICKED_NODE,\r\n    WHEEL,\r\n    CLICKED_INPUT,\r\n    CLICKED_OUTPUT,\r\n    DOUBLE_CLICK_TIMEOUT,\r\n    DOUBLE_CLICK,\r\n    KEYDOWN,\r\n    VIRTUAL_KEYDOWN\r\n}\r\n\r\nexport interface PointerMove {\r\n    kind: EventKind.POINTER_MOVE\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerDown {\r\n    kind: EventKind.POINTER_DOWN\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerUp {\r\n    kind: EventKind.POINTER_UP\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface ClickedNode {\r\n    kind: EventKind.CLICKED_NODE\r\n    index: number\r\n}\r\n\r\nexport interface Wheel {\r\n    kind: EventKind.WHEEL\r\n    x: number\r\n    y: number\r\n    deltaY: number\r\n}\r\n\r\nexport interface ClickedInput {\r\n    kind: EventKind.CLICKED_INPUT\r\n    inputPath: InputPath\r\n}\r\n\r\nexport interface ClickedOutput {\r\n    kind: EventKind.CLICKED_OUTPUT\r\n    outputPath: OutputPath\r\n}\r\n\r\nexport interface DoubleClickTimeout {\r\n    kind: EventKind.DOUBLE_CLICK_TIMEOUT\r\n}\r\n\r\nexport interface DoubleClick {\r\n    kind: EventKind.DOUBLE_CLICK\r\n}\r\n\r\nexport interface KeyDown {\r\n    kind: EventKind.KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport interface VirtualKeyDown {\r\n    kind: EventKind.VIRTUAL_KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport type Event =\r\n    | PointerMove\r\n    | PointerDown\r\n    | PointerUp\r\n    | ClickedNode\r\n    | Wheel\r\n    | ClickedInput\r\n    | ClickedOutput\r\n    | DoubleClickTimeout\r\n    | DoubleClick\r\n    | KeyDown\r\n    | VirtualKeyDown\r\n\r\n\r\nconst pointerDown = (state: State, event: PointerDown): UpdateResult<State, Event> => {\r\n    state.pointers.push(event.pointer)\r\n    if (state.pointers.length > 1) {\r\n        state.potentialDoubleClick = false\r\n        state.dragging = false\r\n        state.zooming = state.pointers.length === 2\r\n        return { state }\r\n    }\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n        return {\r\n            state,\r\n            dispatch: [{ kind: EventKind.DOUBLE_CLICK }]\r\n        }\r\n    }\r\n    state.dragging = true\r\n    state.potentialDoubleClick = true\r\n    return {\r\n        state,\r\n        schedule: [\r\n            { after: { milliseconds: 300 }, event: { kind: EventKind.DOUBLE_CLICK_TIMEOUT } }\r\n        ]\r\n    }\r\n}\r\n\r\nconst pointerUp = (state: State, event: PointerUp) => {\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    state.pointers.splice(index, 1)\r\n    if (state.pointers.length === 1) {\r\n        state.zooming = false\r\n        state.dragging = true\r\n        state.pointerDistance = 0\r\n    }\r\n    else if (state.pointers.length === 0) {\r\n        state.dragging = false\r\n        state.draggedNode = null\r\n        state.pointerDistance = 0\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst pointerMove = (state: State, event: PointerMove) => {\r\n    if (!state.dragging && !state.zooming) return { state, rerender: false }\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    const pointer = state.pointers[index]\r\n    state.pointers[index] = event.pointer\r\n    if (state.dragging) {\r\n        const dx = event.pointer.x - pointer.x\r\n        const dy = event.pointer.y - pointer.y\r\n        if (state.draggedNode !== null) {\r\n            const scaling = length(multiplyMatrixVector(state.camera, [0, 1, 0]))\r\n            const node = state.graph.nodes[state.draggedNode]\r\n            node.x += dx * scaling\r\n            node.y += dy * scaling\r\n        } else {\r\n            state.camera = multiplyMatrices(state.camera, translate(-dx, -dy))\r\n        }\r\n        return { state, render: true }\r\n    }\r\n    if (state.zooming) {\r\n        const [p0, p1] = [state.pointers[0], state.pointers[1]]\r\n        const [x1, y1] = [p0.x, p0.y]\r\n        const [x2, y2] = [p1.x, p1.y]\r\n        const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n        const previousDistance = state.pointerDistance\r\n        const previousCenter = state.pointerCenter\r\n        state.pointerDistance = distance\r\n        const x = (p0.x + p1.x) / 2\r\n        const y = (p0.y + p1.y) / 2\r\n        state.pointerCenter = [x, y]\r\n        if (previousDistance > 0) {\r\n            const move = translate(x, y)\r\n            const zoom = Math.pow(2, (previousDistance - distance) * 0.01)\r\n            const moveBack = translate(-x, -y)\r\n            const dx = x - previousCenter[0]\r\n            const dy = y - previousCenter[1]\r\n            state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack, translate(-dx, -dy))\r\n            return { state, render: true }\r\n        } else return { state }\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst clickedNode = (state: State, event: ClickedNode) => {\r\n    state.draggedNode = event.index\r\n    return { state, render: true }\r\n}\r\n\r\nconst wheel = (state: State, event: Wheel) => {\r\n    const move = translate(event.x, event.y)\r\n    const zoom = Math.pow(2, event.deltaY * 0.01)\r\n    const moveBack = translate(-event.x, -event.y)\r\n    state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack)\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedInput = (state: State, event: ClickedInput) => {\r\n    state.draggedNode = event.inputPath.nodeIndex\r\n    if (state.selectedOutput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: event.inputPath,\r\n            output: state.selectedOutput\r\n        })\r\n        {\r\n            const { nodeIndex, outputIndex } = state.selectedOutput\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n            output.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, inputIndex } = event.inputPath\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedOutput = null\r\n        state.draggedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedInput) {\r\n        const { nodeIndex, inputIndex } = state.selectedInput\r\n        state.graph.nodes[nodeIndex].inputs[inputIndex].selected = false\r\n    }\r\n    const { nodeIndex, inputIndex } = event.inputPath\r\n    state.graph.nodes[nodeIndex].inputs[inputIndex].selected = true\r\n    state.selectedInput = event.inputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedOutput = (state: State, event: ClickedOutput) => {\r\n    state.draggedNode = event.outputPath.nodeIndex\r\n    if (state.selectedInput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: state.selectedInput,\r\n            output: event.outputPath\r\n        })\r\n        {\r\n            const { nodeIndex, inputIndex } = state.selectedInput\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n            input.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, outputIndex } = event.outputPath\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedInput = null\r\n        state.draggedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedOutput) {\r\n        const { nodeIndex, outputIndex } = state.selectedOutput\r\n        state.graph.nodes[nodeIndex].outputs[outputIndex].selected = false\r\n    }\r\n    const { nodeIndex, outputIndex } = event.outputPath\r\n    state.graph.nodes[nodeIndex].outputs[outputIndex].selected = true\r\n    state.selectedOutput = event.outputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst doubleClickTimeout = (state: State, _: DoubleClickTimeout) => {\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst doubleClick = (state: State, _: DoubleClick) => {\r\n    state.potentialDoubleClick = false\r\n    state.finder.show = true\r\n    return { state, render: true }\r\n}\r\n\r\nconst keyDown = (state: State, { key }: KeyDown) => {\r\n    if (state.finder.show) {\r\n        switch (key) {\r\n            case 'Backspace':\r\n                state.finder.search = state.finder.search.slice(0, -1)\r\n                break\r\n            case 'Shift':\r\n            case 'Alt':\r\n            case 'Control':\r\n            case 'Meta':\r\n            case 'Tab':\r\n                break\r\n            case 'Enter':\r\n            case 'Escape':\r\n                state.finder.show = false\r\n                state.finder.search = ''\r\n                break\r\n            default:\r\n                state.finder.search += key\r\n                break\r\n        }\r\n        return { state, render: true }\r\n    }\r\n    if (key == 'f') {\r\n        state.finder.show = true\r\n        return { state, render: true }\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst virtualKeyDown = (state: State, { key }: VirtualKeyDown) => {\r\n    if (state.finder.show) {\r\n        switch (key) {\r\n            case 'del':\r\n                state.finder.search = state.finder.search.slice(0, -1)\r\n                break\r\n            case 'sft':\r\n                break\r\n            case 'space':\r\n                state.finder.search += ' '\r\n                break\r\n            case 'ret':\r\n                state.finder.show = false\r\n                state.finder.search = ''\r\n                break\r\n            default:\r\n                state.finder.search += key\r\n                break\r\n        }\r\n        return { state, render: true }\r\n    }\r\n    return { state }\r\n}\r\n\r\nexport const update = (state: State, event: Event): UpdateResult<State, Event> => {\r\n    switch (event.kind) {\r\n        case EventKind.POINTER_DOWN: return pointerDown(state, event)\r\n        case EventKind.POINTER_UP: return pointerUp(state, event)\r\n        case EventKind.POINTER_MOVE: return pointerMove(state, event)\r\n        case EventKind.CLICKED_NODE: return clickedNode(state, event)\r\n        case EventKind.WHEEL: return wheel(state, event)\r\n        case EventKind.CLICKED_INPUT: return clickedInput(state, event)\r\n        case EventKind.CLICKED_OUTPUT: return clickedOutput(state, event)\r\n        case EventKind.DOUBLE_CLICK_TIMEOUT: return doubleClickTimeout(state, event)\r\n        case EventKind.DOUBLE_CLICK: return doubleClick(state, event)\r\n        case EventKind.KEYDOWN: return keyDown(state, event)\r\n        case EventKind.VIRTUAL_KEYDOWN: return virtualKeyDown(state, event)\r\n    }\r\n}\r\n","export class Padding {\r\n    constructor(\r\n        readonly top: number,\r\n        readonly right: number,\r\n        readonly bottom: number,\r\n        readonly left: number\r\n    ) { }\r\n}\r\n\r\nexport const padding = (value: number) =>\r\n    new Padding(value, value, value, value)","import { Renderer } from \".\"\r\nimport { WorldSpace } from \"../geometry\"\r\nimport { Pointer } from \"../ui\"\r\n\r\nconst inWorldSpace = ({ x0, y0, x1, y1 }: WorldSpace, pointer: Pointer) =>\r\n    x0 <= pointer.x && pointer.x <= x1 &&\r\n    y0 <= pointer.y && pointer.y <= y1\r\n\r\nexport const pointerDown = <R extends Renderer>(renderer: R, pointer: Pointer): R => {\r\n    for (let i = renderer.clickHandlers.length; i > 0; --i) {\r\n        for (const { onClick, worldSpace } of renderer.clickHandlers[i - 1]) {\r\n            if (inWorldSpace(worldSpace, pointer)) {\r\n                onClick(pointer)\r\n                return renderer\r\n            }\r\n        }\r\n    }\r\n    return renderer\r\n}\r\n","import { Layers } from \"./render\"\r\n\r\nexport interface Batch {\r\n    vertices: number[]\r\n    vertexIndices: number[]\r\n    colors: number[]\r\n    textureIndex: number\r\n    textureCoordinates: number[]\r\n    cameraIndex: number[]\r\n}\r\n\r\nconst newBatch = (textureIndex: number): Batch => ({\r\n    vertices: [],\r\n    colors: [],\r\n    vertexIndices: [],\r\n    textureIndex,\r\n    textureCoordinates: [],\r\n    cameraIndex: []\r\n})\r\n\r\nexport const batchGeometry = (layers: Layers): Batch[] => {\r\n    const batches: Batch[] = []\r\n    let batch = newBatch(0)\r\n    for (const layer of layers) {\r\n        for (const [textureIndex, geometries] of layer) {\r\n            if (batch.textureIndex !== textureIndex) {\r\n                if (batch.vertices.length !== 0) batches.push(batch)\r\n                batch = newBatch(textureIndex)\r\n            }\r\n            for (const geometry of geometries) {\r\n                const offset = batch.vertices.length / 2\r\n                batch.vertices.push(...geometry.vertices)\r\n                batch.colors.push(...geometry.colors)\r\n                for (const index of geometry.vertexIndices) {\r\n                    batch.vertexIndices.push(index + offset)\r\n                }\r\n                batch.textureCoordinates.push(...geometry.textureCoordinates)\r\n                batch.cameraIndex.push(...geometry.cameraIndex)\r\n            }\r\n        }\r\n    }\r\n    if (batch.vertices.length !== 0) batches.push(batch)\r\n    return batches\r\n}","import { WorldSpace } from \"./geometry\"\r\nimport { identity, inverse, Matrix3x3, multiplyMatrixVector } from \"./linear_algebra/matrix3x3\"\r\nimport { Cameras } from \"./renderer/render\"\r\n\r\nexport type CameraIndex = number\r\n\r\nexport class CameraStack {\r\n    cameras: Cameras\r\n    stack: number[]\r\n    transform: Matrix3x3\r\n\r\n    constructor() {\r\n        const camera = identity()\r\n        this.cameras = [identity()]\r\n        this.stack = [0]\r\n        this.transform = inverse(camera)\r\n    }\r\n\r\n    pushCamera = (camera: Matrix3x3) => {\r\n        const index = this.cameras.length\r\n        this.cameras.push(camera)\r\n        this.stack.push(index)\r\n        this.transform = inverse(camera)\r\n    }\r\n\r\n    popCamera = () => {\r\n        this.stack.pop()\r\n        this.transform = inverse(this.cameras[this.activeCamera()])\r\n    }\r\n\r\n    activeCamera = () => this.stack.slice(-1)[0]\r\n\r\n    transformWorldSpace = (worldSpace: WorldSpace): WorldSpace => {\r\n        const [x0, y0, _0] = multiplyMatrixVector(this.transform, [worldSpace.x0, worldSpace.y0, 1])\r\n        const [x1, y1, _1] = multiplyMatrixVector(this.transform, [worldSpace.x1, worldSpace.y1, 1])\r\n        return { x0, y0, x1, y1 }\r\n    }\r\n}\r\n","import { Geometry } from \"./geometry\";\r\nimport { Layout } from \"./layout\";\r\nimport { Entry, UI } from \"./ui\";\r\n\r\nexport interface Reducer<T> {\r\n    initial: () => T\r\n    combine: (accumulator: T, entry: Entry) => T\r\n}\r\n\r\nexport const reduce = <T>(ui: UI, layout: Layout, geometry: Geometry, reducer: Reducer<T>): T => {\r\n    const accumulator = reducer.initial()\r\n    for (const entry of ui.traverse(layout, geometry, 0)) {\r\n        reducer.combine(accumulator, entry)\r\n    }\r\n    return accumulator\r\n}","import { WorldSpace } from \"../geometry\"\r\nimport { Reducer } from \"../reduce\"\r\nimport { Entry } from \"../ui\"\r\n\r\nexport type IdToWorldSpace = { [id: string]: WorldSpace }\r\n\r\nexport const buildIdToWorldSpace: Reducer<IdToWorldSpace> = {\r\n    initial: () => ({}),\r\n    combine: (lookup: IdToWorldSpace, entry: Entry) => {\r\n        if (!entry.ui.id) return lookup\r\n        lookup[entry.ui.id] = entry.geometry.worldSpace\r\n        return lookup\r\n    }\r\n}\r\n","import { WorldSpace } from \"../geometry\"\r\nimport { Connection } from \"../ui\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\n\r\nexport interface Lines {\r\n    vertices: number[]\r\n    colors: number[]\r\n}\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nfunction* cubicBezier(ts: number[], from: WorldSpace, to: WorldSpace): Generator<number> {\r\n    const p0x = (from.x0 + from.x1) / 2\r\n    const p0y = (from.y0 + from.y1) / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = (to.x0 + to.x1) / 2\r\n    const p3y = (to.y0 + to.y1) / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    let lastX = 0\r\n    let lastY = 0\r\n    let first = true\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (first) {\r\n            yield x\r\n            yield y\r\n            first = false\r\n        } else {\r\n            yield lastX\r\n            yield lastY\r\n        }\r\n        yield x\r\n        yield y\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n}\r\n\r\nexport const connectionGeometry = (connections: Connection[], idToWorldSpace: IdToWorldSpace): Lines => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const vertices: number[] = []\r\n    const colors: number[] = []\r\n    for (const { from, to, color } of connections) {\r\n        for (const p of cubicBezier(ts, idToWorldSpace[from], idToWorldSpace[to])) {\r\n            vertices.push(p)\r\n        }\r\n        const { red, green, blue, alpha } = color\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(red, green, blue, alpha)\r\n    }\r\n    return { vertices, colors }\r\n}","import { ClickHandlers, Renderer } from \".\"\r\nimport { batchGeometry } from \"./batch_geometry\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry } from \"../geometry\"\r\nimport { reduce, Reducer } from \"../reduce\"\r\nimport { Connection, Entry, UI } from \"../ui\"\r\nimport { buildIdToWorldSpace, IdToWorldSpace } from \"./id_to_world_space\"\r\nimport { connectionGeometry } from \"./connection_geometry\"\r\nimport { Matrix3x3 } from \"../linear_algebra/matrix3x3\"\r\n\r\nexport type Cameras = Matrix3x3[]\r\nexport type TextureIndex = number\r\nexport type Layer = Map<TextureIndex, Geometry[]>\r\nexport type Layers = Layer[]\r\n\r\ninterface Accumulator {\r\n    layers: Layers,\r\n    clickHandlers: ClickHandlers,\r\n    idToWorldSpace: IdToWorldSpace\r\n    connections: Connection[]\r\n}\r\n\r\nexport const layerGeometry: Reducer<Layers> = {\r\n    initial: () => [],\r\n    combine: (layers: Layers, entry: Entry) => {\r\n        if (entry.geometry.vertices.length == 0) return layers\r\n        const needed = entry.z - layers.length + 1\r\n        for (let i = 0; i < needed; ++i) layers.push(new Map())\r\n        const layer = layers[entry.z]\r\n        const geometry = (() => {\r\n            const geometry = layer.get(entry.geometry.textureIndex)\r\n            if (geometry) return geometry\r\n            const newGeometry: Geometry[] = []\r\n            layer.set(entry.geometry.textureIndex, newGeometry)\r\n            return newGeometry\r\n        })()\r\n        geometry.push(entry.geometry)\r\n        return layers\r\n    }\r\n}\r\n\r\nexport const gatherOnClickHandlers: Reducer<ClickHandlers> = {\r\n    initial: () => [],\r\n    combine: (handlers: ClickHandlers, entry: Entry) => {\r\n        if (!entry.ui.onClick) return handlers\r\n        const needed = entry.z - handlers.length + 1\r\n        for (let i = 0; i < needed; ++i) handlers.push([])\r\n        handlers[entry.z].push({\r\n            onClick: entry.ui.onClick,\r\n            worldSpace: entry.geometry.worldSpace\r\n        })\r\n        return handlers\r\n    }\r\n}\r\n\r\n\r\nexport const gatherConnections: Reducer<Connection[]> = {\r\n    initial: () => [],\r\n    combine: (connections: Connection[], entry: Entry) => {\r\n        if (!entry.ui.connections) return connections\r\n        connections.push(...entry.ui.connections)\r\n        return connections\r\n    }\r\n}\r\n\r\n\r\nexport const reducer: Reducer<Accumulator> = {\r\n    initial: () => ({\r\n        layers: layerGeometry.initial(),\r\n        clickHandlers: gatherOnClickHandlers.initial(),\r\n        idToWorldSpace: buildIdToWorldSpace.initial(),\r\n        connections: gatherConnections.initial()\r\n    }),\r\n    combine: (acc: Accumulator, entry: Entry) => {\r\n        return {\r\n            layers: layerGeometry.combine(acc.layers, entry),\r\n            clickHandlers: gatherOnClickHandlers.combine(acc.clickHandlers, entry),\r\n            idToWorldSpace: buildIdToWorldSpace.combine(acc.idToWorldSpace, entry),\r\n            connections: gatherConnections.combine(acc.connections, entry)\r\n        }\r\n    }\r\n}\r\n\r\nexport const render = <R extends Renderer>(renderer: R, ui: UI): R => {\r\n    const { width, height } = renderer.size\r\n    renderer.clear()\r\n    const constraints = {\r\n        minWidth: 0,\r\n        maxWidth: width,\r\n        minHeight: 0,\r\n        maxHeight: height\r\n    }\r\n    const layout = ui.layout(constraints, renderer.measureText)\r\n    const offsets = { x: 0, y: 0 }\r\n    const cameraStack = new CameraStack()\r\n    const geometry = ui.geometry(layout, offsets, cameraStack)\r\n    const { layers, clickHandlers, connections, idToWorldSpace } = reduce(ui, layout, geometry, reducer)\r\n    const batches = batchGeometry(layers)\r\n    const lines = connectionGeometry(connections, idToWorldSpace)\r\n    renderer.cameras = cameraStack.cameras\r\n    renderer.clickHandlers = clickHandlers\r\n    for (const batch of batches) renderer.draw(batch)\r\n    if (lines.vertices.length) renderer.drawLines(lines)\r\n    return renderer\r\n}\r\n","import { ClickHandlers } from \".\";\r\nimport { Batch } from \"./batch_geometry\";\r\nimport { Size } from \"../layout\";\r\nimport { Font, TextMeasurements } from \"../ui\";\r\nimport { Lines } from \"./connection_geometry\";\r\nimport { Matrix3x3, projection } from \"../linear_algebra/matrix3x3\";\r\nimport { Document, WebGL2Context, Buffer, UniformLocation, Shader, Program, Canvas, Texture, Window } from \"./dom\";\r\n\r\ninterface Attribute {\r\n    location: number\r\n    buffer: Buffer\r\n}\r\n\r\ninterface Attributes {\r\n    vertices: Attribute\r\n    vertexIndices: Buffer\r\n    colors: Attribute\r\n    textureCoordinates: Attribute\r\n    cameraIndex: Attribute\r\n}\r\n\r\ninterface Uniforms {\r\n    projection: UniformLocation\r\n    texture: UniformLocation\r\n    cameras: UniformLocation\r\n}\r\n\r\ninterface ProgramData {\r\n    vertexShader: Shader\r\n    fragmentShader: Shader\r\n    program: Program\r\n    attributes: Attributes\r\n    uniforms: Uniforms\r\n}\r\n\r\ntype DevicePixelRatio = number\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\nconst createTextMeasurements = (document: Document, gl: WebGL2Context, font: Font, dpr: DevicePixelRatio) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(font.size * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * dpr\r\n    canvas.height = size * dpr\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(dpr, dpr)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = `${font.size}px ${font.family}`\r\n    ctx.fillStyle = 'white'\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const height = font.size\r\n    const widths: number[] = []\r\n    const textureCoordinates: number[][] = []\r\n    for (let i = 0; i < totalCells; ++i) {\r\n        const c = String.fromCharCode(i)\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        widths.push(width)\r\n        const x0 = x / size\r\n        const x1 = (x + width) / size\r\n        const y0 = y / size\r\n        const y1 = (y + height) / size\r\n        textureCoordinates.push([\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        ])\r\n    }\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas\r\n    )\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return { widths, textureCoordinates, texture }\r\n}\r\n\r\nconst mapString = <T>(str: string, f: (c: string, i: number) => T): Array<T> => {\r\n    let result = []\r\n    for (let i = 0; i < str.length; ++i) {\r\n        result.push(f(str[i], i))\r\n    }\r\n    return result\r\n}\r\n\r\nexport class WebGL2Renderer {\r\n    _size: Size\r\n    _cameras: Matrix3x3[]\r\n\r\n    constructor(\r\n        public window: Window,\r\n        public document: Document,\r\n        public canvas: Canvas,\r\n        public gl: WebGL2Context,\r\n        public program: ProgramData,\r\n        public textures: Texture[],\r\n        public textMeasurementsCache: Map<string, TextMeasurements>,\r\n        public clickHandlers: ClickHandlers,\r\n    ) { }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    set size(size: Size) {\r\n        const { gl, program, window } = this\r\n        const { uniforms } = program\r\n        const { canvas } = gl\r\n        gl.uniformMatrix3fv(uniforms.projection, /*transpose*/true, projection(size))\r\n        canvas.width = size.width * window.devicePixelRatio\r\n        canvas.height = size.height * window.devicePixelRatio\r\n        canvas.style.width = `${size.width}px`\r\n        canvas.style.height = `${size.height}px`\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this._size = size\r\n    }\r\n\r\n    get size() { return this._size }\r\n\r\n    set cameras(cameras: Matrix3x3[]) {\r\n        const { gl, program } = this\r\n        const { uniforms } = program\r\n        const data: number[] = []\r\n        for (const camera of cameras) data.push(...camera)\r\n        gl.uniformMatrix3fv(uniforms.cameras, /*transpose*/true, data)\r\n        this._cameras = cameras\r\n    }\r\n\r\n    get cameras() { return this._cameras }\r\n\r\n    draw = ({ vertices, colors, vertexIndices, textureCoordinates, textureIndex, cameraIndex }: Batch) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        const texture = textures[textureIndex]\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndex), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.vertexIndices)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors }: Lines) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        const texture = textures[0]\r\n        const count = vertices.length / 2\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(Array(count * 2).fill(0)), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(Array(count).fill(0)), gl.STATIC_DRAW)\r\n        gl.drawArrays(gl.LINES, /*first*/0, count)\r\n    }\r\n\r\n    getTextureMeasurements = (font: Font, dpr: DevicePixelRatio) => {\r\n        const { document, gl } = this\r\n        const key = `${dpr} ${font.size} ${font.family}`\r\n        const measurements = this.textMeasurementsCache.get(key)\r\n        if (measurements) return measurements\r\n        const { texture, widths, textureCoordinates } = createTextMeasurements(document, gl, font, dpr)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newMeasurements = { widths, textureIndex, textureCoordinates }\r\n        this.textMeasurementsCache.set(key, newMeasurements)\r\n        return newMeasurements\r\n    }\r\n\r\n    measureText = (font: Font, str: string) => {\r\n        const { window } = this\r\n        const dpr = window.devicePixelRatio\r\n        const { widths, textureIndex, textureCoordinates } = this.getTextureMeasurements(font, dpr)\r\n        const indices = mapString(str, c => c.charCodeAt(0))\r\n        return {\r\n            widths: indices.map(i => widths[i]),\r\n            textureIndex,\r\n            textureCoordinates: indices.map(i => textureCoordinates[i]),\r\n        }\r\n    }\r\n}\r\n\r\nconst createVertexShader = (gl: WebGL2Context, attributes: Attributes): Shader => {\r\n    const { vertices, colors, textureCoordinates, cameraIndex } = attributes\r\n    const vertexShaderSource = `#version 300 es\r\n  uniform mat3 u_projection;\r\n  uniform mat3 u_cameras[8];\r\n\r\n  layout(location = ${vertices.location}) in vec2 a_vertex;\r\n  layout(location = ${colors.location}) in vec4 a_color;\r\n  layout(location = ${textureCoordinates.location}) in vec2 a_textureCoordinates;\r\n  layout(location = ${cameraIndex.location}) in uint a_cameraIndex;\r\n\r\n  out vec4 v_color;\r\n  out vec2 v_textureCoordinates;\r\n\r\n  void main() {\r\n    mat3 camera = u_cameras[a_cameraIndex];\r\n    mat3 transform = u_projection * inverse(camera);\r\n    gl_Position = vec4((transform * vec3(a_vertex, 1)).xy, 0, 1);\r\n    v_color = a_color / 255.0;\r\n    v_textureCoordinates = a_textureCoordinates;\r\n  }\r\n  `\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n    gl.shaderSource(vertexShader, vertexShaderSource)\r\n    gl.compileShader(vertexShader)\r\n    return vertexShader\r\n}\r\n\r\nconst createFragmentShader = (gl: WebGL2Context): Shader => {\r\n    const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec4 v_color;\r\n  in vec2 v_textureCoordinates;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  void main() {\r\n    fragColor = texture(u_texture, v_textureCoordinates) * v_color;\r\n  }\r\n  `\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n    gl.compileShader(fragmentShader)\r\n    return fragmentShader\r\n}\r\n\r\nconst bindVertices = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_vertex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindColors = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_color')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindTextureCoordinates = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_textureCoordinates')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindCameraIndex = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_cameraIndex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribIPointer(\r\n        location,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst createProgram = (gl: WebGL2Context): ProgramData => {\r\n    const attributes: Attributes = {\r\n        vertices: {\r\n            location: 0,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        colors: {\r\n            location: 1,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        textureCoordinates: {\r\n            location: 2,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        cameraIndex: {\r\n            location: 3,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        vertexIndices: gl.createBuffer()!\r\n    }\r\n    const vertexShader = createVertexShader(gl, attributes)\r\n    const fragmentShader = createFragmentShader(gl)\r\n    const program = gl.createProgram()!\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        console.log(gl.getShaderInfoLog(vertexShader))\r\n        console.log(gl.getShaderInfoLog(fragmentShader))\r\n    }\r\n    gl.useProgram(program)\r\n    const vertexArrayObject = gl.createVertexArray()!\r\n    gl.bindVertexArray(vertexArrayObject)\r\n    bindVertices(gl, program, attributes.vertices)\r\n    bindColors(gl, program, attributes.colors)\r\n    bindTextureCoordinates(gl, program, attributes.textureCoordinates)\r\n    bindCameraIndex(gl, program, attributes.cameraIndex)\r\n    const uniforms: Uniforms = {\r\n        projection: gl.getUniformLocation(program, 'u_projection')!,\r\n        texture: gl.getUniformLocation(program, 'u_texture')!,\r\n        cameras: gl.getUniformLocation(program, 'u_cameras')!\r\n    }\r\n    return {\r\n        vertexShader,\r\n        fragmentShader,\r\n        program,\r\n        attributes,\r\n        uniforms\r\n    }\r\n}\r\n\r\ninterface Parameters {\r\n    width: number\r\n    height: number\r\n    document: Document\r\n    window: Window\r\n}\r\n\r\nexport const webGL2Renderer = ({ width, height, document, window }: Parameters) => {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.style.touchAction = 'none'\r\n    const gl = canvas.getContext('webgl2')!\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n    gl.depthMask(false)\r\n    gl.activeTexture(gl.TEXTURE0)\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n    gl.clearColor(0, 0, 0, 1)\r\n    const program = createProgram(gl)\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255])\r\n    )\r\n    const renderer = new WebGL2Renderer(window, document, canvas, gl, program, [texture], new Map(), [])\r\n    renderer.size = { width, height }\r\n    return renderer\r\n}","import { pointerDown } from \"./renderer/pointer_down\"\r\nimport { render } from \"./renderer/render\"\r\nimport { webGL2Renderer } from \"./renderer/webgl2\"\r\nimport { Pointer, UI } from \"./ui\"\r\n\r\nexport const transformPointer = (p: PointerEvent): Pointer => ({\r\n    x: p.clientX,\r\n    y: p.clientY,\r\n    id: p.pointerId,\r\n})\r\n\r\nexport type Dispatch<Event> = (event: Event) => void\r\n\r\ntype View<State, Event> = (dispatch: Dispatch<Event>, state: State) => UI\r\n\r\ninterface Milliseconds {\r\n    milliseconds: number\r\n}\r\n\r\ninterface Scheduled<Event> {\r\n    after: Milliseconds\r\n    event: Event\r\n}\r\n\r\nexport interface UpdateResult<State, Event> {\r\n    state: State\r\n    render?: boolean\r\n    schedule?: Scheduled<Event>[]\r\n    dispatch?: Event[]\r\n}\r\n\r\ntype Update<State, Event> = (state: State, event: Event) => UpdateResult<State, Event>\r\n\r\nexport const run = <State, Event>(state: State, view: View<State, Event>, update: Update<State, Event>): Dispatch<Event> => {\r\n    let renderer = webGL2Renderer({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        window,\r\n        document\r\n    })\r\n    let renderQueued = false\r\n    const scheduleRender = () => {\r\n        if (!renderQueued) {\r\n            renderQueued = true\r\n            requestAnimationFrame(() => {\r\n                renderer = render(renderer, view(dispatch, state))\r\n                renderQueued = false\r\n            })\r\n        }\r\n    }\r\n    const dispatch = (event: Event) => {\r\n        const { state: newState, render, schedule, dispatch: dispatchEvents } = update(state, event)\r\n        state = newState\r\n        if (render) scheduleRender()\r\n        for (const { after, event } of schedule ?? []) {\r\n            const { milliseconds } = after\r\n            setTimeout(() => dispatch(event), milliseconds)\r\n        }\r\n        for (const event of dispatchEvents ?? []) dispatch(event)\r\n    }\r\n    document.body.appendChild(renderer.canvas as HTMLCanvasElement)\r\n    document.addEventListener(\"pointerdown\", p => {\r\n        renderer = pointerDown(renderer, transformPointer(p))\r\n    })\r\n    window.addEventListener(\"resize\", () => {\r\n        renderer.size = { width: window.innerWidth, height: window.innerHeight }\r\n        scheduleRender()\r\n    })\r\n    scheduleRender()\r\n    return dispatch\r\n}\r\n","import { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\nimport { Entry, MeasureText, UI } from \"../ui\"\r\n\r\nexport class CenterLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly child: Layout\r\n    ) { }\r\n}\r\n\r\nexport const centerLayout = (size: Size, child: Layout) =>\r\n    new CenterLayout(size, child)\r\n\r\nexport class CenterGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly child: Geometry\r\n    ) { }\r\n}\r\n\r\nexport const centerGeometry = (worldSpace: WorldSpace, child: Geometry) =>\r\n    new CenterGeometry(worldSpace, 0, [], [], [], [], [], child)\r\n\r\nexport class Center {\r\n    constructor(readonly child: UI) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const layout = this.child.layout(constraints, measureText)\r\n        const width = constraints.maxWidth\r\n        const height = constraints.maxHeight\r\n        return centerLayout({ width, height }, layout)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height,\r\n        })\r\n        const childLayout = (layout as CenterLayout).child\r\n        const childOffset = {\r\n            x: offset.x + layout.size.width / 2 - childLayout.size.width / 2,\r\n            y: offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n        }\r\n        const childGeometry = this.child.geometry(childLayout, childOffset, cameraStack)\r\n        return centerGeometry(worldSpace, childGeometry)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childLayout = (layout as CenterLayout).child\r\n        const childGeometry = (geometry as CenterGeometry).child\r\n        yield { ui: this, layout, geometry, z }\r\n        yield* this.child.traverse(childLayout, childGeometry, z + 1)\r\n    }\r\n}\r\n\r\nexport const center = (child: UI): Center =>\r\n    new Center(child)","import { Entry, MeasureText, UI } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"../alignment\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class ColumnLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly totalChildHeight: number,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const columnLayout = (size: Size, totalChildHeight: number, children: Layout[]) =>\r\n    new ColumnLayout(size, totalChildHeight, children)\r\n\r\nexport class ColumnGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const columnGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new ColumnGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Column {\r\n    constructor(\r\n        readonly mainAxisAlignment: MainAxisAlignment,\r\n        readonly crossAxisAlignment: CrossAxisAlignment,\r\n        readonly children: UI[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const initialChildren: Layout[] = []\r\n        const initial = {\r\n            children: initialChildren,\r\n            width: 0,\r\n            totalChildHeight: 0\r\n        }\r\n        const result = this.children.reduce((acc, child) => {\r\n            const layout = child.layout(constraints, measureText)\r\n            acc.children.push(layout)\r\n            acc.totalChildHeight += layout.size.height\r\n            acc.width = Math.max(acc.width, layout.size.width)\r\n            return acc\r\n        }, initial)\r\n        const { children, width, totalChildHeight } = result\r\n        const height = this.mainAxisAlignment == MainAxisAlignment.START ? totalChildHeight : constraints.maxHeight\r\n        return columnLayout({ width, height }, totalChildHeight, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const columnLayout = (layout as ColumnLayout)\r\n        const initialChildren: Geometry[] = []\r\n        const freeSpaceY = layout.size.height - columnLayout.totalChildHeight\r\n        const initial = {\r\n            children: initialChildren,\r\n            y: (() => {\r\n                switch (this.mainAxisAlignment) {\r\n                    case MainAxisAlignment.START: return offset.y\r\n                    case MainAxisAlignment.CENTER: return offset.y + freeSpaceY / 2\r\n                    case MainAxisAlignment.END: return offset.y + freeSpaceY\r\n                    case MainAxisAlignment.SPACE_EVENLY: return offset.y + freeSpaceY / (this.children.length + 1)\r\n                    case MainAxisAlignment.SPACE_BETWEEN: return offset.y\r\n                }\r\n            })(),\r\n        }\r\n        const addYStart = (childLayout: Layout) => childLayout.size.height\r\n        const addYCenter = (childLayout: Layout) => childLayout.size.height\r\n        const addYEnd = (childLayout: Layout) => childLayout.size.height\r\n        const addYSpaceEvenly = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (this.children.length + 1)\r\n        const addYSpaceBetween = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (this.children.length - 1)\r\n        const addY = (() => {\r\n            switch (this.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return addYStart\r\n                case MainAxisAlignment.CENTER: return addYCenter\r\n                case MainAxisAlignment.END: return addYEnd\r\n                case MainAxisAlignment.SPACE_EVENLY: return addYSpaceEvenly\r\n                case MainAxisAlignment.SPACE_BETWEEN: return addYSpaceBetween\r\n            }\r\n        })()\r\n        const offsetXStart = (_: Layout) => offset.x\r\n        const offsetXCenter = (childLayout: Layout) => offset.x + layout.size.width / 2 - childLayout.size.width / 2\r\n        const offsetXEnd = (childLayout: Layout) => offset.x + layout.size.width - childLayout.size.width\r\n        const offsetX = (() => {\r\n            switch (this.crossAxisAlignment) {\r\n                case CrossAxisAlignment.START: return offsetXStart\r\n                case CrossAxisAlignment.CENTER: return offsetXCenter\r\n                case CrossAxisAlignment.END: return offsetXEnd\r\n            }\r\n        })()\r\n        const result = this.children.reduce((acc, child, i) => {\r\n            const childLayout = columnLayout.children[i]\r\n            const childOffset = { x: offsetX(childLayout), y: acc.y }\r\n            const childGeometry = child.geometry(childLayout, childOffset, cameraStack)\r\n            acc.children.push(childGeometry)\r\n            acc.y += addY(childLayout)\r\n            return acc\r\n        }, initial)\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        })\r\n        return columnGeometry(worldSpace, result.children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as ColumnLayout).children\r\n        const childrenGeometry = (geometry as ColumnGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        const nextZ = z + 1\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            yield* child.traverse(childrenLayout[i], childrenGeometry[i], nextZ)\r\n            i += 1\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\ntype Overload = {\r\n    (children: UI[]): Column\r\n    (properties: Properties, children: UI[]): Column\r\n}\r\n\r\nexport const column: Overload = (...args: any[]): Column => {\r\n    const [properties, children] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return new Column(\r\n        properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    )\r\n}","import { CameraStack } from \"../camera_stack\"\r\nimport { Color } from \"../color\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\nimport { Padding, padding as paddingAll } from \"../padding\"\r\nimport { Entry, Id, MeasureText, OnClick, UI } from \"../ui\"\r\n\r\nexport class ContainerLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly child?: Layout\r\n    ) { }\r\n}\r\n\r\nexport const containerLayout = (size: Size, child?: Layout) =>\r\n    new ContainerLayout(size, child)\r\n\r\nexport class ContainerGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly child?: Geometry\r\n    ) { }\r\n}\r\n\r\ninterface GeometryData {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex?: number\r\n    readonly textureCoordinates?: number[]\r\n    readonly colors?: number[]\r\n    readonly vertices?: number[]\r\n    readonly vertexIndices?: number[]\r\n    readonly cameraIndex?: number[]\r\n}\r\n\r\nexport const containerGeometry = (data: GeometryData, child?: Geometry) => {\r\n    const vertices = data.vertices ?? []\r\n    return new ContainerGeometry(\r\n        data.worldSpace,\r\n        data.textureIndex ?? 0,\r\n        data.textureCoordinates ?? Array.from<number>({ length: vertices.length }).fill(0),\r\n        data.colors ?? [],\r\n        vertices,\r\n        data.vertexIndices ?? [],\r\n        data.cameraIndex ?? [],\r\n        child\r\n    )\r\n}\r\n\r\nexport class Container {\r\n    constructor(\r\n        readonly padding: Padding,\r\n        readonly width?: number,\r\n        readonly height?: number,\r\n        readonly x?: number,\r\n        readonly y?: number,\r\n        readonly color?: Color,\r\n        readonly onClick?: OnClick,\r\n        readonly id?: Id,\r\n        readonly child?: UI\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const { left, top, right, bottom } = this.padding\r\n        if (this.child) {\r\n            const layout = this.child.layout(constraints, measureText)\r\n            const width = this.width ?? layout.size.width + left + right\r\n            const height = this.height ?? layout.size.height + top + bottom\r\n            return containerLayout({ width, height }, layout)\r\n        }\r\n        const width = (() => {\r\n            if (this.width) return this.width + left + right\r\n            return constraints.maxWidth\r\n        })()\r\n        const height = (() => {\r\n            if (this.height) return this.height + top + bottom\r\n            return constraints.maxHeight\r\n        })()\r\n        return containerLayout({ width, height })\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const x0 = offset.x + (this.x ?? 0)\r\n        const x1 = x0 + layout.size.width\r\n        const y0 = offset.y + (this.y ?? 0)\r\n        const y1 = y0 + layout.size.height\r\n        const worldSpace = cameraStack.transformWorldSpace({ x0, x1, y0, y1 })\r\n        const data = (() => {\r\n            if (this.color) {\r\n                const { red, green, blue, alpha } = this.color\r\n                return {\r\n                    worldSpace,\r\n                    vertices: [\r\n                        x0, y0,\r\n                        x0, y1,\r\n                        x1, y0,\r\n                        x1, y1,\r\n                    ],\r\n                    colors: [\r\n                        red, green, blue, alpha,\r\n                        red, green, blue, alpha,\r\n                        red, green, blue, alpha,\r\n                        red, green, blue, alpha,\r\n                    ],\r\n                    vertexIndices: [\r\n                        0, 1, 2,\r\n                        1, 2, 3\r\n                    ],\r\n                    cameraIndex: Array(4).fill(cameraStack.activeCamera())\r\n                }\r\n            }\r\n            return {\r\n                worldSpace,\r\n                vertices: [],\r\n                colors: [],\r\n                vertexIndices: [],\r\n                cameraIndex: [],\r\n            }\r\n        })()\r\n        if (this.child) {\r\n            const childLayout = (layout as ContainerLayout).child!\r\n            const childOffset = {\r\n                x: x0 + this.padding.left,\r\n                y: y0 + this.padding.top\r\n            }\r\n            const childGeometry = this.child.geometry(childLayout, childOffset, cameraStack)\r\n            return containerGeometry(data, childGeometry)\r\n        }\r\n        return containerGeometry(data)\r\n    }\r\n\r\n    * traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        yield { ui: this, layout, geometry, z }\r\n        if (this.child) {\r\n            const childLayout = (layout as ContainerLayout).child!\r\n            const childGeometry = (geometry as ContainerGeometry).child!\r\n            yield* this.child.traverse(childLayout, childGeometry, z + 1)\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly padding?: Padding\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly onClick?: OnClick\r\n    readonly id?: Id\r\n}\r\n\r\nexport const container = ({ padding, width, height, color, x, y, onClick, id }: Properties, child?: UI): Container =>\r\n    new Container(\r\n        padding ?? paddingAll(0),\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        color,\r\n        onClick,\r\n        id,\r\n        child\r\n    )","import { Entry, MeasureText, UI } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"../alignment\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class RowLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly totalChildWidth: number,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const rowLayout = (size: Size, totalChildWidth: number, children: Layout[]) =>\r\n    new RowLayout(size, totalChildWidth, children)\r\n\r\nexport class RowGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const rowGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new RowGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Row {\r\n    constructor(\r\n        readonly mainAxisAlignment: MainAxisAlignment,\r\n        readonly crossAxisAlignment: CrossAxisAlignment,\r\n        readonly children: UI[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const initialChildren: Layout[] = []\r\n        const initial = {\r\n            children: initialChildren,\r\n            totalChildWidth: 0,\r\n            height: 0\r\n        }\r\n        const result = this.children.reduce((acc, child) => {\r\n            const layout = child.layout(constraints, measureText)\r\n            acc.children.push(layout)\r\n            acc.totalChildWidth += layout.size.width\r\n            acc.height = Math.max(acc.height, layout.size.height)\r\n            return acc\r\n        }, initial)\r\n        const { children, totalChildWidth, height } = result\r\n        const width = this.mainAxisAlignment == MainAxisAlignment.START ? totalChildWidth : constraints.maxWidth\r\n        return rowLayout({ width, height }, totalChildWidth, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const rowLayout = (layout as RowLayout)\r\n        const initialChildren: Geometry[] = []\r\n        const freeSpaceX = layout.size.width - rowLayout.totalChildWidth\r\n        const initial = {\r\n            children: initialChildren,\r\n            x: (() => {\r\n                switch (this.mainAxisAlignment) {\r\n                    case MainAxisAlignment.START: return offset.x\r\n                    case MainAxisAlignment.CENTER: return offset.x + freeSpaceX / 2\r\n                    case MainAxisAlignment.END: return offset.x + freeSpaceX\r\n                    case MainAxisAlignment.SPACE_EVENLY: return offset.x + freeSpaceX / (this.children.length + 1)\r\n                    case MainAxisAlignment.SPACE_BETWEEN: return offset.x\r\n                }\r\n            })(),\r\n        }\r\n        const addXStart = (childLayout: Layout) => childLayout.size.width\r\n        const addXCenter = (childLayout: Layout) => childLayout.size.width\r\n        const addXEnd = (childLayout: Layout) => childLayout.size.width\r\n        const addXSpaceEvenly = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (this.children.length + 1)\r\n        const addXSpaceBetween = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (this.children.length - 1)\r\n        const addX = (() => {\r\n            switch (this.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return addXStart\r\n                case MainAxisAlignment.CENTER: return addXCenter\r\n                case MainAxisAlignment.END: return addXEnd\r\n                case MainAxisAlignment.SPACE_EVENLY: return addXSpaceEvenly\r\n                case MainAxisAlignment.SPACE_BETWEEN: return addXSpaceBetween\r\n            }\r\n        })()\r\n        const offsetYStart = (_: Layout) => offset.y\r\n        const offsetYCenter = (childLayout: Layout) => offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n        const offsetYEnd = (childLayout: Layout) => offset.y + layout.size.height - childLayout.size.height\r\n        const offsetY = (() => {\r\n            switch (this.crossAxisAlignment) {\r\n                case CrossAxisAlignment.START: return offsetYStart\r\n                case CrossAxisAlignment.CENTER: return offsetYCenter\r\n                case CrossAxisAlignment.END: return offsetYEnd\r\n            }\r\n        })()\r\n        const result = this.children.reduce((acc, child, i) => {\r\n            const childLayout = rowLayout.children[i]\r\n            const childOffset = { x: acc.x, y: offsetY(childLayout) }\r\n            const childGeometry = child.geometry(childLayout, childOffset, cameraStack)\r\n            acc.children.push(childGeometry)\r\n            acc.x += addX(childLayout)\r\n            return acc\r\n        }, initial)\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height,\r\n        })\r\n        return rowGeometry(worldSpace, result.children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as RowLayout).children\r\n        const childrenGeometry = (geometry as RowGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        const nextZ = z + 1\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            yield* child.traverse(childrenLayout[i], childrenGeometry[i], nextZ)\r\n            i += 1\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\ntype Overload = {\r\n    (children: UI[]): Row\r\n    (properties: Properties, children: UI[]): Row\r\n}\r\n\r\nexport const row: Overload = (...args: any[]): Row => {\r\n    const [properties, children] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return new Row(\r\n        properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    )\r\n}","import { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\nimport { Matrix3x3 } from \"../linear_algebra/matrix3x3\"\r\nimport { Connection, Entry, MeasureText, UI } from \"../ui\"\r\n\r\nexport class SceneLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const sceneLayout = (size: Size, children: Layout[]) =>\r\n    new SceneLayout(size, children)\r\n\r\nexport class SceneGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const sceneGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new SceneGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Scene {\r\n    constructor(\r\n        readonly camera: Matrix3x3,\r\n        readonly children: UI[],\r\n        readonly connections: Connection[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const children = this.children.map(c => c.layout(constraints, measureText))\r\n        const width = constraints.maxWidth\r\n        const height = constraints.maxHeight\r\n        return sceneLayout({ width, height }, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        })\r\n        const childrenLayout = (layout as SceneLayout).children\r\n        cameraStack.pushCamera(this.camera)\r\n        const children = this.children.map((c, i) => c.geometry(childrenLayout[i], offset, cameraStack))\r\n        cameraStack.popCamera()\r\n        return sceneGeometry(worldSpace, children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as SceneLayout).children\r\n        const childrenGeometry = (geometry as SceneGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            for (const entry of child.traverse(childrenLayout[i], childrenGeometry[i], z)) {\r\n                yield entry\r\n                z = Math.max(z, entry.z)\r\n            }\r\n            i++\r\n            z++\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    camera: Matrix3x3\r\n    children: UI[]\r\n    connections?: Connection[]\r\n}\r\n\r\nexport const scene = (properties: Properties): Scene =>\r\n    new Scene(properties.camera, properties.children, properties.connections ?? [])","import { Entry, MeasureText, UI } from \".\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class StackLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const stackLayout = (size: Size, children: Layout[]) =>\r\n    new StackLayout(size, children)\r\n\r\nexport class StackGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const stackGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new StackGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Stack {\r\n    constructor(readonly children: UI[]) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const children = this.children.map(c => c.layout(constraints, measureText))\r\n        const width = constraints.maxWidth\r\n        const height = constraints.maxHeight\r\n        return stackLayout({ width, height }, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const stackLayout = (layout as StackLayout)\r\n        const children = this.children.map((c, i) => c.geometry(stackLayout.children[i], offset, cameraStack))\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height,\r\n        })\r\n        return stackGeometry(worldSpace, children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as StackLayout).children\r\n        const childrenGeometry = (geometry as StackGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            for (const entry of child.traverse(childrenLayout[i], childrenGeometry[i], z)) {\r\n                yield entry\r\n                z = Math.max(z, entry.z)\r\n            }\r\n            i += 1\r\n            z += 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const stack = (children: UI[]): Stack =>\r\n    new Stack(children)","import { Entry, Font, MeasureText, TextMeasurements } from \".\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Color } from \"../color\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class TextLayout {\r\n    constructor(\r\n        readonly measurements: TextMeasurements,\r\n        readonly size: Size\r\n    ) { }\r\n}\r\n\r\nexport const textLayout = (measurements: TextMeasurements, size: Size) =>\r\n    new TextLayout(measurements, size)\r\n\r\n\r\nexport class TextGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n    ) { }\r\n}\r\n\r\ninterface GeometryData {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly colors: number[]\r\n    readonly vertices: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n}\r\n\r\nconst vertices = (widths: number[], height: number, offset: Offset) => {\r\n    const result = []\r\n    let offsetX = offset.x\r\n    const y0 = offset.y\r\n    const y1 = offset.y + height\r\n    for (const width of widths) {\r\n        const x0 = offsetX\r\n        const x1 = offsetX + width\r\n        result.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        )\r\n        offsetX += width\r\n    }\r\n    return result\r\n}\r\n\r\nconst colors = (n: number, { red, green, blue, alpha }: Color) => {\r\n    const result = []\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n        )\r\n    }\r\n    return result\r\n}\r\n\r\nconst vertexIndices = (n: number) => {\r\n    const result = []\r\n    let offset = 0\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            offset, offset + 1, offset + 2,\r\n            offset + 1, offset + 2, offset + 3\r\n        )\r\n        offset += 4\r\n    }\r\n    return result\r\n}\r\n\r\nexport const textGeometry = (data: GeometryData) =>\r\n    new TextGeometry(\r\n        data.worldSpace,\r\n        data.textureIndex,\r\n        data.textureCoordinates,\r\n        data.colors,\r\n        data.vertices,\r\n        data.vertexIndices,\r\n        data.cameraIndex,\r\n    )\r\n\r\nexport class Text {\r\n    constructor(\r\n        readonly font: Font,\r\n        readonly color: Color,\r\n        readonly str: string\r\n    ) { }\r\n\r\n    layout(_: Constraints, measureText: MeasureText) {\r\n        const { font, str } = this\r\n        const measurements = measureText(font, str)\r\n        const width = measurements.widths.reduce((acc, width) => acc + width)\r\n        const size = { width, height: font.size }\r\n        return textLayout(measurements, size)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const textLayout = layout as TextLayout\r\n        const { measurements } = textLayout\r\n        const { textureIndex, textureCoordinates, widths } = measurements\r\n        return textGeometry({\r\n            worldSpace: cameraStack.transformWorldSpace({\r\n                x0: offset.x,\r\n                y0: offset.y,\r\n                x1: offset.x + layout.size.width,\r\n                y1: offset.y + layout.size.height\r\n            }),\r\n            textureIndex,\r\n            textureCoordinates: textureCoordinates.flat(),\r\n            colors: colors(widths.length, this.color),\r\n            vertices: vertices(widths, this.font.size, offset),\r\n            vertexIndices: vertexIndices(widths.length),\r\n            cameraIndex: Array(widths.length * 4).fill(cameraStack.activeCamera())\r\n        })\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        yield { ui: this, layout, geometry, z }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly font?: string\r\n    readonly size?: number\r\n    readonly color?: Color\r\n}\r\n\r\ntype Overload = {\r\n    (str: String): Text\r\n    (properties: Properties, str: String): Text\r\n}\r\n\r\nexport const text: Overload = (...args: any[]): Text => {\r\n    const [properties, str] = (() =>\r\n        typeof args[0] == 'string' ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    const font = {\r\n        family: properties.font ?? \"monospace\",\r\n        size: properties.size ?? 24\r\n    }\r\n    return new Text(\r\n        font,\r\n        properties.color ?? { red: 255, green: 255, blue: 255, alpha: 255 },\r\n        str\r\n    )\r\n}","import { CrossAxisAlignment, MainAxisAlignment } from \"./alignment\"\r\nimport { Event, EventKind, update } from \"./event\"\r\nimport { fuzzyFind } from \"./fuzzy_find\"\r\nimport { identity } from \"./linear_algebra/matrix3x3\"\r\nimport { padding } from \"./padding\"\r\nimport { Dispatch, run, transformPointer } from \"./run\"\r\nimport { Finder, Input, Node, Output, State, Theme } from \"./state\"\r\nimport { Connection, UI } from \"./ui\"\r\nimport { center } from \"./ui/center\"\r\nimport { column } from \"./ui/column\"\r\nimport { container } from \"./ui/container\"\r\nimport { row } from \"./ui/row\"\r\nimport { scene } from \"./ui/scene\"\r\nimport { stack } from \"./ui/stack\"\r\nimport { text } from \"./ui/text\"\r\n\r\nconst spacer = (size: number) =>\r\n    container({ width: size, height: size })\r\n\r\nconst intersperse = <T>(array: T[], seperator: T): T[] => {\r\n    const result = [array[0]]\r\n    for (const element of array.slice(1)) {\r\n        result.push(seperator, element)\r\n    }\r\n    return result\r\n}\r\n\r\nconst inputUi = (theme: Theme, { name, selected }: Input, nodeIndex: number, inputIndex: number): UI =>\r\n    row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n        container({\r\n            id: `input ${nodeIndex} ${inputIndex}`,\r\n            width: 24,\r\n            height: 24,\r\n            color: selected ? theme.selectedInput : theme.input,\r\n            onClick: () => dispatch({\r\n                kind: EventKind.CLICKED_INPUT,\r\n                inputPath: { nodeIndex: nodeIndex, inputIndex: inputIndex }\r\n            })\r\n        }),\r\n        spacer(10),\r\n        text(name)\r\n    ])\r\n\r\nconst inputsUi = (theme: Theme, inputs: Input[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            inputs.map((input, inputIndex) => inputUi(theme, input, nodeIndex, inputIndex)),\r\n            spacer(10)\r\n        )\r\n    )\r\n\r\nconst outputUi = (theme: Theme, { name, selected }: Output, nodeIndex: number, outputIndex: number): UI =>\r\n    row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n        text(name),\r\n        spacer(10),\r\n        container({\r\n            id: `output ${nodeIndex} ${outputIndex}`,\r\n            width: 24,\r\n            height: 24,\r\n            color: selected ? theme.selectedInput : theme.input,\r\n            onClick: () => dispatch({\r\n                kind: EventKind.CLICKED_OUTPUT,\r\n                outputPath: { nodeIndex: nodeIndex, outputIndex: outputIndex }\r\n            })\r\n        }),\r\n    ])\r\n\r\nconst outputsUi = (theme: Theme, outputs: Output[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            outputs.map((output, outputIndex) => outputUi(theme, output, nodeIndex, outputIndex)),\r\n            spacer(10)\r\n        )\r\n    )\r\n\r\nconst nodeUi = (dispatch: Dispatch<Event>, theme: Theme, { name, x, y, inputs, outputs }: Node, index: number) => {\r\n    const rowEntries: UI[] = []\r\n    if (inputs.length) rowEntries.push(inputsUi(theme, inputs, index))\r\n    if (inputs.length && outputs.length) rowEntries.push(spacer(30))\r\n    if (outputs.length) rowEntries.push(outputsUi(theme, outputs, index))\r\n    return container({\r\n        color: theme.node,\r\n        padding: padding(10),\r\n        x, y,\r\n        onClick: () => dispatch({\r\n            kind: EventKind.CLICKED_NODE,\r\n            index: index\r\n        })\r\n    },\r\n        column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(10),\r\n            row(rowEntries)\r\n        ])\r\n    )\r\n}\r\n\r\nconst finder = (items: string[], { search }: Finder, theme: Theme) =>\r\n    center(\r\n        container({ color: theme.node, padding: padding(10) },\r\n            column([\r\n                container({ color: theme.background, width: 300, padding: padding(10) },\r\n                    text({ color: theme.input, size: 24 }, search.length ? search : \"Search ...\")),\r\n                container({ width: 10, height: 10 }),\r\n                ...items\r\n                    .filter(item => fuzzyFind({ haystack: item, needle: search }))\r\n                    .slice(0, 5)\r\n                    .map(item => container({ padding: padding(10) }, text(item))),\r\n            ])\r\n        )\r\n    )\r\n\r\nconst virtualKey = (dispatch: Dispatch<Event>, key: string) =>\r\n    container({\r\n        padding: padding(10),\r\n        onClick: () => dispatch({\r\n            kind: EventKind.VIRTUAL_KEYDOWN,\r\n            key\r\n        })\r\n    }, text(key))\r\n\r\nconst virtualKeys = (dispatch: Dispatch<Event>, keys: string[]) =>\r\n    row(keys.map(c => virtualKey(dispatch, c)))\r\n\r\nconst virtualKeyboard = (dispatch: Dispatch<Event>, theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.SPACE_BETWEEN }, [\r\n            container({ padding: padding(10), color: theme.node },\r\n                column([\r\n                    virtualKeys(dispatch, ['1', '2', '3', '4', '5']),\r\n                    virtualKeys(dispatch, ['q', 'w', 'e', 'r', 't']),\r\n                    virtualKeys(dispatch, ['a', 's', 'd', 'f', 'g']),\r\n                    virtualKeys(dispatch, ['z', 'x', 'c', 'v']),\r\n                    virtualKeys(dispatch, ['sft', 'space']),\r\n                ])\r\n            ),\r\n            container({ padding: padding(10), color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(dispatch, ['6', '7', '8', '9', '0']),\r\n                    virtualKeys(dispatch, ['y', 'u', 'i', 'o', 'p']),\r\n                    virtualKeys(dispatch, ['h', 'j', 'k', 'l']),\r\n                    virtualKeys(dispatch, ['b', 'n', 'm', 'del']),\r\n                    virtualKeys(dispatch, ['space', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\n\r\nconst view = (dispatch: Dispatch<Event>, state: State) => {\r\n    if (!state.finder.show) {\r\n        const nodes: UI[] = []\r\n        state.graph.nodes.forEach((node, i) => {\r\n            if (i !== state.draggedNode) nodes.push(nodeUi(dispatch, state.theme, node, i))\r\n        })\r\n        if (state.draggedNode !== null) {\r\n            const i = state.draggedNode\r\n            nodes.push(nodeUi(dispatch, state.theme, state.graph.nodes[i], i))\r\n        }\r\n        const connections: Connection[] = state.graph.edges.map(({ input, output }) => ({\r\n            from: `output ${output.nodeIndex} ${output.outputIndex}`,\r\n            to: `input ${input.nodeIndex} ${input.inputIndex}`,\r\n            color: state.theme.connection\r\n        }))\r\n        return stack([\r\n            container({ color: state.theme.background }),\r\n            scene({ camera: state.camera, children: nodes, connections }),\r\n        ])\r\n    }\r\n    return stack([\r\n        container({ color: state.theme.background }),\r\n        finder(Object.keys(state.operations), state.finder, state.theme),\r\n        virtualKeyboard(dispatch, state.theme)\r\n    ])\r\n}\r\n\r\nconst initialState: State = {\r\n    graph: {\r\n        nodes: [\r\n            {\r\n                name: \"Source\",\r\n                inputs: [],\r\n                outputs: [\r\n                    { name: \"Out 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"Out 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                x: 100,\r\n                y: 200\r\n            },\r\n            {\r\n                name: \"Transform\",\r\n                inputs: [\r\n                    { name: \"In 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"In 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                outputs: [\r\n                    { name: \"Out 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"Out 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                x: 400,\r\n                y: 300\r\n            },\r\n            {\r\n                name: \"Sink\",\r\n                inputs: [\r\n                    { name: \"In 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"In 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                outputs: [],\r\n                x: 800,\r\n                y: 250\r\n            },\r\n        ],\r\n        edges: []\r\n    },\r\n    zooming: false,\r\n    dragging: false,\r\n    draggedNode: null,\r\n    pointers: [],\r\n    pointerDistance: 0,\r\n    pointerCenter: [0, 0],\r\n    camera: identity(),\r\n    selectedOutput: null,\r\n    selectedInput: null,\r\n    theme: {\r\n        background: { red: 2, green: 22, blue: 39, alpha: 255 },\r\n        node: { red: 41, green: 95, blue: 120, alpha: 255 },\r\n        input: { red: 188, green: 240, blue: 192, alpha: 255 },\r\n        selectedInput: { red: 175, green: 122, blue: 208, alpha: 255 },\r\n        connection: { red: 255, green: 255, blue: 255, alpha: 255 },\r\n    },\r\n    potentialDoubleClick: false,\r\n    finder: {\r\n        search: '',\r\n        show: false\r\n    },\r\n    operations: {\r\n        \"Add\": {\r\n            name: \"Add\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Subtract\": {\r\n            name: \"Subtract\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Multiply\": {\r\n            name: \"Multiply\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Divide\": {\r\n            name: \"Divide\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Equal\": {\r\n            name: \"Equal\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Less Than\": {\r\n            name: \"Less Than\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Less Than Or Equal\": {\r\n            name: \"Less Than Or Equal\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        }\r\n    }\r\n}\r\n\r\nconst dispatch = run(initialState, view, update)\r\n\r\nif (typeof PointerEvent.prototype.getCoalescedEvents === 'function') {\r\n    document.addEventListener('pointermove', (e) => {\r\n        e.getCoalescedEvents().forEach(p => {\r\n            dispatch({\r\n                kind: EventKind.POINTER_MOVE,\r\n                pointer: transformPointer(p)\r\n            })\r\n        })\r\n    })\r\n} else {\r\n    document.addEventListener('pointermove', p =>\r\n        dispatch({\r\n            kind: EventKind.POINTER_MOVE,\r\n            pointer: transformPointer(p)\r\n        })\r\n    )\r\n}\r\n\r\ndocument.addEventListener(\"pointerdown\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_DOWN,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener(\"pointerup\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_UP,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener('wheel', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.WHEEL,\r\n        x: e.clientX,\r\n        y: e.clientY,\r\n        deltaY: e.deltaY,\r\n    })\r\n}, { passive: false })\r\n\r\ndocument.addEventListener('contextmenu', e => {\r\n    e.preventDefault()\r\n})\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    document.body.requestFullscreen()\r\n})\r\n\r\ndocument.addEventListener('keydown', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.KEYDOWN,\r\n        key: e.key\r\n    })\r\n})","export interface FuzzyFind {\r\n    haystack: string\r\n    needle: string\r\n}\r\n\r\nexport const fuzzyFind = ({ haystack, needle }: FuzzyFind): boolean => {\r\n    let haystackIndex = 0\r\n    let needleIndex = 0\r\n    while (needleIndex < needle.length) {\r\n        const n = needle[needleIndex].toLowerCase()\r\n        while (haystackIndex < haystack.length && n !== haystack[haystackIndex].toLowerCase()) {\r\n            ++haystackIndex\r\n        }\r\n        if (haystackIndex === haystack.length) return false\r\n        ++needleIndex\r\n    }\r\n    return true\r\n}\r\n"],"names":["$38d7a2dac5bc7fa9$export$6595504a60e1f77c","MainAxisAlignment1","$38d7a2dac5bc7fa9$export$66a3248d846611ce","CrossAxisAlignment1","$2a9d6d4b688c9d90$export$b74061472fe7c07","width","height","$2a9d6d4b688c9d90$export$d73ee8ef04f5226a","x","y","$2a9d6d4b688c9d90$export$dcdf75081b88279d","$2a9d6d4b688c9d90$export$84b43e5e8429f175","matrices","head","tail","reduce","a","b","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","$2a9d6d4b688c9d90$export$dbb85424dca880d0","b1","b2","b3","$2a9d6d4b688c9d90$export$70ae2c07e401031b","idet","$9a57707492d0f60d$export$f24224f1c91d8156","c","Math","sqrt","pow","$d7336fab2a6e7c56$export$50508d7849040d51","EventKind1","$d7336fab2a6e7c56$var$pointerMove","state","event","dragging","zooming","rerender","index","pointers","findIndex","p","id","pointer","dx","dy","draggedNode","scaling","camera","node","graph","nodes","render","p0","p1","x1","y1","x2","y2","distance","previousDistance","pointerDistance","previousCenter","pointerCenter","move","zoom","moveBack","$810e59d520bce11e$export$8ee6ea94b5aedb49","constructor","top","right","bottom","left","$810e59d520bce11e$export$6f98e8eaf0be1996","value","$f97aa2d16f86c383$var$inWorldSpace","x0","y0","$f97aa2d16f86c383$export$e6e29dfeb5ef19c1","renderer","i","clickHandlers","length","onClick","worldSpace","$db98e7c147af88a3$var$newBatch","textureIndex","vertices","colors","vertexIndices","textureCoordinates","cameraIndex","$db98e7c147af88a3$export$1e96939139b396da","layers","batches","batch","layer","geometries","push","geometry","offset","$14955c3b2c9570b5$export$e6fddfd45b239a42","this","cameras","stack","transform","pushCamera","popCamera","pop","activeCamera","slice","transformWorldSpace","_0","_1","$cecff29ae76c43d7$export$533b26079ad0b4b","ui","layout","reducer","accumulator","initial","entry","traverse","combine","$c7f5b399ef6aea66$export$390ef945b5a425a7","lookup","$45d6bbdb80ff139b$var$cubicBezier","ts","from","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","first","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$45d6bbdb80ff139b$export$48a436e09c0b8a4d","connections","idToWorldSpace","start","stop","num","step","Array","_","$45d6bbdb80ff139b$var$linspace","color","red","green","blue","alpha","samples","$f0ab672d0c96c5dc$export$8c1d7deec90f08c1","needed","z","Map","get","newGeometry","set","$f0ab672d0c96c5dc$export$707dc0d5406a403a","handlers","$f0ab672d0c96c5dc$export$1c1147d11a715c65","$f0ab672d0c96c5dc$export$1650419e431d3ba3","acc","$f0ab672d0c96c5dc$export$b3890eb0ae9dca99","size","clear","constraints","minWidth","maxWidth","minHeight","maxHeight","measureText","cameraStack","lines","draw","drawLines","$30cee85f95a8e397$export$ce2766bf4a8721d3","window1","document1","canvas","gl1","program1","textures1","textMeasurementsCache","window","document","gl","program","textures","COLOR_BUFFER_BIT","attributes","texture","bindTexture","TEXTURE_2D","bindBuffer","ARRAY_BUFFER","buffer","bufferData","Float32Array","STATIC_DRAW","Uint8Array","ELEMENT_ARRAY_BUFFER","Uint16Array","drawElements","TRIANGLES","UNSIGNED_SHORT","count","fill","drawArrays","LINES","getTextureMeasurements","font","dpr","key","family","measurements","widths","createElement","ctx","getContext","rows","current","$30cee85f95a8e397$var$nearestPowerOfTwo","cellSize","style","scale","textAlign","textBaseline","fillStyle","clearRect","String","fromCharCode","metric","ceil","floor","fillText","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","$30cee85f95a8e397$var$createTextMeasurements","newMeasurements","str","devicePixelRatio","indices","f","result","$30cee85f95a8e397$var$mapString","charCodeAt","map","uniforms","uniformMatrix3fv","projection","viewport","_size","data","_cameras","location","createBuffer","vertexShader","vertexShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","$30cee85f95a8e397$var$createVertexShader","fragmentShader","FRAGMENT_SHADER","$30cee85f95a8e397$var$createFragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","log","getShaderInfoLog","useProgram","vertexArrayObject","createVertexArray","bindVertexArray","FLOAT","$30cee85f95a8e397$var$bindVertices","$30cee85f95a8e397$var$bindColors","bindAttribLocation","enableVertexAttribArray","vertexAttribPointer","$30cee85f95a8e397$var$bindTextureCoordinates","vertexAttribIPointer","getUniformLocation","$6119d70cc28f8b94$export$479aac53993fd71","clientX","clientY","pointerId","$fd89ce3675dee463$export$35a4c8543d37ef8a","child","$fd89ce3675dee463$export$7b1e9ca9e29f9a5d","$fd89ce3675dee463$export$1f54913ccc4368b1","childLayout","childOffset","$fd89ce3675dee463$export$efb2657d225c129a","childGeometry","$518015a6e3cc694d$export$c7e5bac7049eee2a","totalChildHeight","children","$518015a6e3cc694d$export$dfd18615cd7e86d6","$518015a6e3cc694d$export$816b5d811295e6bc","mainAxisAlignment","crossAxisAlignment","max","$518015a6e3cc694d$export$f8ce731bdfd45dc7","START","columnLayout1","freeSpaceY","CENTER","END","SPACE_EVENLY","SPACE_BETWEEN","addYStart","addYCenter","addYEnd","addYSpaceEvenly","addYSpaceBetween","addY","offsetXStart","offsetXCenter","offsetXEnd","offsetX","$518015a6e3cc694d$export$5a1548308f4d4391","childrenLayout","childrenGeometry","nextZ","$518015a6e3cc694d$export$4e0c71f277ca26b3","args","properties","$8a99d960732a172f$export$26c271df922a3d3c","$8a99d960732a172f$export$a4e80cd8d85917bb","$8a99d960732a172f$export$76c47790527e6c8a","$8a99d960732a172f$export$7c88ce694bad6320","$8a99d960732a172f$export$42a852a2b6b56249","padding","$8a99d960732a172f$export$34e0f9847d4c02dd","$9e4edab979495f0d$export$593b1ed5b05b470","totalChildWidth","$9e4edab979495f0d$export$aef74122d3baefd6","$9e4edab979495f0d$export$b59bdbef9ce70de2","$9e4edab979495f0d$export$4076779b9674714b","rowLayout1","freeSpaceX","addXStart","addXCenter","addXEnd","addXSpaceEvenly","addXSpaceBetween","addX","offsetYStart","offsetYCenter","offsetYEnd","offsetY","$9e4edab979495f0d$export$90e65e88c1393562","$9e4edab979495f0d$export$120ff0929b202a6d","$864b15efd9f5e1a7$export$183888ffeb127955","$864b15efd9f5e1a7$export$cbdc2ca6cb1fbaf1","$864b15efd9f5e1a7$export$38af1803e3442a7f","$864b15efd9f5e1a7$export$9e03d30774b30061","$864b15efd9f5e1a7$export$7a4266c2aa024d65","$d380360335f9e6c0$export$4a33896fea5f6057","$d380360335f9e6c0$export$288eb08f379bb85f","$d380360335f9e6c0$export$694e0d28c7ffc90c","$d380360335f9e6c0$export$b008c3d2ea57ca56","stackLayout1","$d380360335f9e6c0$export$218db93a2e8965d","$d380360335f9e6c0$export$a57ab32f40f83ea9","$2d5075f154be1094$export$211e101f90b3ed3","$2d5075f154be1094$export$684b774b4473ba5f","colors1","vertices1","vertexIndices1","$2d5075f154be1094$var$vertices","$2d5075f154be1094$var$colors","n","$2d5075f154be1094$var$vertexIndices","$2d5075f154be1094$export$5f1af8db9871e1d6","width1","$2d5075f154be1094$export$801f12fcd9ba2788","textLayout1","flat","$2d5075f154be1094$export$6f093cfa640b7166","$b4e14b6b8da86996$var$spacer","$b4e14b6b8da86996$var$intersperse","array","seperator","element","$b4e14b6b8da86996$var$inputsUi","theme","inputs","nodeIndex","input","inputIndex","name","selected","selectedInput","$b4e14b6b8da86996$var$dispatch","kind","CLICKED_INPUT","inputPath","$b4e14b6b8da86996$var$inputUi","$b4e14b6b8da86996$var$outputsUi","outputs","output","outputIndex","CLICKED_OUTPUT","outputPath","$b4e14b6b8da86996$var$outputUi","$b4e14b6b8da86996$var$nodeUi","dispatch1","rowEntries","CLICKED_NODE","$b4e14b6b8da86996$var$finder","items","search","background","filter","item","haystack","needle","haystackIndex","needleIndex","toLowerCase","$b4e14b6b8da86996$var$virtualKeys","dispatch3","keys","$b4e14b6b8da86996$var$virtualKey","dispatch2","VIRTUAL_KEYDOWN","view","update","$30cee85f95a8e397$export$94781114c991ae1c","innerWidth","innerHeight","renderQueued","scheduleRender","requestAnimationFrame","dispatch","newState","render1","schedule","dispatchEvents","after","event1","milliseconds","setTimeout","event2","body","appendChild","addEventListener","edgeIndices","edges","selectedOutput","connection","potentialDoubleClick","finder","show","operations","Add","Subtract","Multiply","Divide","Equal","dispatch5","forEach","dispatch4","Object","POINTER_DOWN","DOUBLE_CLICK","DOUBLE_CLICK_TIMEOUT","$d7336fab2a6e7c56$var$pointerDown","POINTER_UP","splice","$d7336fab2a6e7c56$var$pointerUp","POINTER_MOVE","$d7336fab2a6e7c56$var$clickedNode","WHEEL","deltaY","$d7336fab2a6e7c56$var$wheel","edgeIndex","$d7336fab2a6e7c56$var$clickedInput","$d7336fab2a6e7c56$var$clickedOutput","$d7336fab2a6e7c56$var$doubleClickTimeout","$d7336fab2a6e7c56$var$doubleClick","KEYDOWN","$d7336fab2a6e7c56$var$keyDown","$d7336fab2a6e7c56$var$virtualKeyDown","PointerEvent","prototype","getCoalescedEvents","e","preventDefault","passive","requestFullscreen"],"version":3,"file":"index.d763a30d.js.map"}