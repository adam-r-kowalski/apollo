{"mappings":"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","sources":["src/renderer.ts","src/components.ts","src/systems/render.ts","src/systems/layout.ts","src/linear_algebra.ts","src/layers.ts","src/systems/geometry.ts","src/ui/text.ts","src/ui/center.ts","src/ui/column.ts","src/ui/row.ts","src/ui/container.ts","src/ui/connection.ts","src/ui/scene.ts","src/ecs.ts","src/index.ts"],"sourcesContent":["import { Mat3 } from \"./linear_algebra\"\r\n\r\nclass DefaultProgram {\r\n    positionBuffer: WebGLBuffer\r\n    colorBuffer: WebGLBuffer\r\n    textureCoordinatesBuffer: WebGLBuffer\r\n    indexBuffer: WebGLBuffer\r\n    resolutionLocation: WebGLUniformLocation\r\n    devicePixelRatioLocation: WebGLUniformLocation\r\n    cameraLocation: WebGLUniformLocation\r\n    cameraIndexBuffer: WebGLBuffer\r\n\r\n    constructor(gl: WebGL2RenderingContext) {\r\n        const aPositionLocation = 0\r\n        const aTextureCoordinatesLocation = 1\r\n        const aColorLocation = 2\r\n        const aCameraIndexLocation = 3\r\n\r\n        const vertexShaderSource = `#version 300 es\r\n  uniform vec2 u_resolution;\r\n  uniform float u_devicePixelRatio;\r\n  uniform mat3 u_cameras[10];\r\n\r\n  layout(location = ${aPositionLocation}) in vec2 a_position;\r\n  layout(location = ${aTextureCoordinatesLocation}) in vec2 a_textureCoordinates;\r\n  layout(location = ${aColorLocation}) in vec4 a_color;\r\n  layout(location = ${aCameraIndexLocation}) in uint a_cameraIndex;\r\n\r\n  out vec2 v_textureCoordinates;\r\n  out vec4 v_color;\r\n\r\n  void main() {\r\n    mat3 camera = inverse(u_cameras[a_cameraIndex]);\r\n    vec3 position = camera * vec3(a_position.xy, 1);\r\n    vec2 zeroToOne = position.xy * u_devicePixelRatio / u_resolution;\r\n    vec2 zeroToTwo = zeroToOne * 2.0;\r\n    vec2 clipSpace = zeroToTwo - 1.0;\r\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n    v_textureCoordinates = a_textureCoordinates * u_devicePixelRatio;\r\n    v_color = a_color;\r\n  }\r\n  `\r\n        const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec2 v_textureCoordinates;\r\n  in vec4 v_color;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  vec4 hslToRgb(in vec4 hsl) {\r\n    float h = hsl.x / 360.0;\r\n    vec3 rgb = clamp(abs(mod(h * 6.0 + vec3(0.0,4.0,2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\r\n    return vec4(hsl.z + hsl.y * (rgb - 0.5) * (1.0 - abs(2.0 * hsl.z - 1.0)), hsl.w);\r\n  }\r\n\r\n  void main() {\r\n    ivec2 size = textureSize(u_texture, 0);\r\n    vec2 coordinate = v_textureCoordinates / vec2(float(size.x), float(size.y));\r\n    fragColor = texture(u_texture, coordinate) * hslToRgb(v_color);\r\n  }\r\n  `\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n        gl.shaderSource(vertexShader, vertexShaderSource)\r\n        gl.compileShader(vertexShader)\r\n\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n        gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n        gl.compileShader(fragmentShader)\r\n\r\n        const program = gl.createProgram()!\r\n        gl.attachShader(program, vertexShader)\r\n        gl.attachShader(program, fragmentShader)\r\n        gl.linkProgram(program)\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            console.log(gl.getShaderInfoLog(vertexShader))\r\n            console.log(gl.getShaderInfoLog(fragmentShader))\r\n        }\r\n\r\n        gl.useProgram(program)\r\n\r\n        const vertexArrayObject = gl.createVertexArray()!\r\n        gl.bindVertexArray(vertexArrayObject)\r\n\r\n        this.positionBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aPositionLocation, 'a_position')\r\n        gl.enableVertexAttribArray(aPositionLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer)\r\n        gl.vertexAttribPointer(\r\n            aPositionLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.textureCoordinatesBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aTextureCoordinatesLocation, 'a_textureCoordinates')\r\n        gl.enableVertexAttribArray(aTextureCoordinatesLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordinatesBuffer)\r\n        gl.vertexAttribPointer(\r\n            aTextureCoordinatesLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.colorBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aColorLocation, 'a_color')\r\n        gl.enableVertexAttribArray(aColorLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer)\r\n        gl.vertexAttribPointer(\r\n            aColorLocation,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.cameraIndexBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aCameraIndexLocation, 'a_cameraIndex')\r\n        gl.enableVertexAttribArray(aCameraIndexLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.cameraIndexBuffer)\r\n        gl.vertexAttribIPointer(\r\n            aCameraIndexLocation,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.indexBuffer = gl.createBuffer()!\r\n        this.resolutionLocation = gl.getUniformLocation(program, 'u_resolution')!\r\n        this.devicePixelRatioLocation = gl.getUniformLocation(program, 'u_devicePixelRatio')!\r\n        this.cameraLocation = gl.getUniformLocation(program, 'u_cameras')!\r\n    }\r\n}\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\ninterface Metric {\r\n    x: number\r\n    y: number\r\n    width: number\r\n    height: number\r\n}\r\n\r\nclass FontAtlas {\r\n    constructor(\r\n        public texture: number,\r\n        public metrics: Metric[],\r\n        public fontFamily: string,\r\n        public fontSize: number,\r\n    ) { }\r\n\r\n    metric = (c: string) => this.metrics[c.charCodeAt(0)]\r\n}\r\n\r\ninterface DrawData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    vertexIndices: number[]\r\n    cameraIndices: number[]\r\n}\r\n\r\ninterface DrawLineData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    cameraIndices: number[]\r\n}\r\n\r\nconst createFontMetrics = (gl: WebGL2RenderingContext, texture: WebGLTexture, font: string, fontSize: number) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(fontSize * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * window.devicePixelRatio\r\n    canvas.height = size * window.devicePixelRatio\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = font\r\n    ctx.fillStyle = 'white'\r\n    const ascii = Array.from({ length: totalCells }, (v, i) => i)\r\n    const chars = ascii.map(c => String.fromCharCode(c))\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const metrics = chars.map((c, i) => {\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const height = fontSize\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        return {\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height\r\n        }\r\n    })\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas)\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return metrics\r\n\r\n}\r\n\r\nexport class Renderer {\r\n    gl: WebGL2RenderingContext\r\n    canvas: HTMLCanvasElement\r\n    program: DefaultProgram\r\n    width: number\r\n    height: number\r\n    fontAtlasses: Map<string, FontAtlas>\r\n    textures: WebGLTexture[]\r\n    devicePixelRatio: number\r\n\r\n    constructor(width: number, height: number) {\r\n        const canvas = document.createElement('canvas')\r\n        canvas.style.touchAction = 'none'\r\n        const gl = canvas.getContext('webgl2')!\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0)\r\n        gl.enable(gl.BLEND)\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n        gl.depthMask(false)\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n        gl.activeTexture(gl.TEXTURE0)\r\n        this.gl = gl\r\n        this.canvas = canvas\r\n        this.program = new DefaultProgram(gl)\r\n        this.fontAtlasses = new Map()\r\n        this.textures = []\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.setSize(width, height)\r\n        const texture = gl.createTexture()!\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255]))\r\n        this.textures.push(texture)\r\n    }\r\n\r\n    setSize = (width: number, height: number) => {\r\n        const { gl, canvas } = this\r\n        canvas.width = width * window.devicePixelRatio\r\n        canvas.height = height * window.devicePixelRatio\r\n        gl.uniform2f(this.program.resolutionLocation, canvas.width, canvas.height)\r\n        gl.uniform1f(this.program.devicePixelRatioLocation, window.devicePixelRatio)\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this.width = width\r\n        this.height = height\r\n        if (this.devicePixelRatio == window.devicePixelRatio) return\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.recreateFontAtlasses()\r\n    }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    setCameras = (cameras: Mat3[]) => {\r\n        const { gl } = this\r\n        const data: number[] = []\r\n        for (const camera of cameras) {\r\n            data.push(...camera.data)\r\n        }\r\n        gl.uniformMatrix3fv(this.program.cameraLocation, /*transpose*/true, /*data*/data)\r\n    }\r\n\r\n    draw = ({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices }: DrawData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.cameraIndexBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors, textureCoordinates, cameraIndices }: DrawLineData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.cameraIndexBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndices), gl.STATIC_DRAW)\r\n        gl.drawArrays(gl.LINES, 0, vertices.length / 2)\r\n    }\r\n\r\n    recreateFontAtlasses = () => {\r\n        for (const [font, fontAtlas] of this.fontAtlasses) {\r\n            const texture = this.textures[fontAtlas.texture]\r\n            const metrics = createFontMetrics(this.gl, texture, font, fontAtlas.fontSize)\r\n            fontAtlas.metrics = metrics\r\n        }\r\n    }\r\n\r\n    fontAtlas = (fontFamily: string, fontSize: number): FontAtlas => {\r\n        const font = `${fontSize}px ${fontFamily}`\r\n        const atlas = this.fontAtlasses.get(font)\r\n        if (atlas) return atlas\r\n        const { gl } = this\r\n        const texture = gl.createTexture()!\r\n        const metrics = createFontMetrics(gl, texture, font, fontSize)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newAtlas = new FontAtlas(textureIndex, metrics, fontFamily, fontSize)\r\n        this.fontAtlasses.set(font, newAtlas)\r\n        return newAtlas\r\n    }\r\n}","import { Entity } from \"./ecs\";\r\nimport { Layers } from \"./layers\";\r\n\r\nexport class UIRoot { constructor(public entity: Entity) { } }\r\n\r\nexport class Text { constructor(public value: string) { } }\r\n\r\nexport class FontSize { constructor(public value: number) { } }\r\n\r\nexport class FontFamily { constructor(public value: string) { } }\r\n\r\nexport class Child { constructor(public entity: Entity) { } }\r\n\r\nexport class Children { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Connections { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Camera { constructor(public entity: Entity) { } }\r\n\r\nexport enum Alignment { START, CENTER, END }\r\n\r\nexport class CrossAxisAlignment { constructor(public alignment: Alignment) { } }\r\n\r\nexport class Width { constructor(public value: number) { } }\r\n\r\nexport class Height { constructor(public value: number) { } }\r\n\r\nexport class Translate { constructor(public x: number, public y: number) { } }\r\n\r\nexport class From { constructor(public entity: Entity) { } }\r\n\r\nexport class To { constructor(public entity: Entity) { } }\r\n\r\nexport interface Hsla {\r\n    h: number\r\n    s: number\r\n    l: number\r\n    a: number\r\n}\r\n\r\nexport class Color {\r\n    h: number\r\n    s: number\r\n    l: number\r\n    a: number\r\n\r\n    constructor({ h, s, l, a }: Hsla) {\r\n        this.h = h\r\n        this.s = s\r\n        this.l = l\r\n        this.a = a\r\n    }\r\n}\r\n\r\nexport class Padding { constructor(public value: number) { } }\r\n\r\nexport class Constraints {\r\n    constructor(\r\n        public minWidth: number,\r\n        public maxWidth: number,\r\n        public minHeight: number,\r\n        public maxHeight: number\r\n    ) { }\r\n}\r\n\r\nexport class Size {\r\n    constructor(\r\n        public width: number,\r\n        public height: number,\r\n    ) { }\r\n}\r\n\r\nexport class Offset {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n\r\n    add = (other: Offset) => new Offset(this.x + other.x, this.y + other.y)\r\n}\r\n\r\nexport class Layout {\r\n    constructor(\r\n        private impl: (self: Entity, constraints: Constraints) => Size\r\n    ) { }\r\n\r\n    layout = (self: Entity, constraints: Constraints) =>\r\n        this.impl(self, constraints)\r\n}\r\n\r\nexport class WorldSpace {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public width: number,\r\n        public height: number\r\n    ) { }\r\n}\r\n\r\nexport class Vertices { constructor(public data: number[]) { } }\r\n\r\nexport class TextureCoordinates { constructor(public data: number[]) { } }\r\n\r\nexport class Colors { constructor(public data: number[]) { } }\r\n\r\nexport class VertexIndices { constructor(public data: number[]) { } }\r\n\r\nexport class CameraIndices { constructor(public data: number[]) { } }\r\n\r\nexport class Geometry {\r\n    constructor(\r\n        private impl: (self: Entity, parentOffset: Offset, layers: Layers, z: number) => void\r\n    ) { }\r\n\r\n    geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) =>\r\n        this.impl(self, parentOffset, layers, z)\r\n}","import { Renderer } from \"../renderer\";\r\nimport { ECS } from \"../ecs\";\r\nimport { CameraIndices, Colors, TextureCoordinates, VertexIndices, Vertices } from \"../components\";\r\nimport { Layers } from \"../layers\";\r\nimport { layout, geometry } from './'\r\n\r\nconst renderTriangles = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let vertexIndices: number[] = []\r\n    let cameraIndices: number[] = []\r\n    let previousTexture: number = -1\r\n    for (const layer of layers.layers) {\r\n        for (const [texture, entities] of layer) {\r\n            if (texture != previousTexture) {\r\n                if (vertices.length) {\r\n                    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices })\r\n                    vertices = []\r\n                    colors = []\r\n                    textureCoordinates = []\r\n                    vertexIndices = []\r\n                    cameraIndices = []\r\n                }\r\n                previousTexture = texture\r\n                gl.bindTexture(gl.TEXTURE_2D, renderer.textures[texture])\r\n            }\r\n            for (const entity of entities) {\r\n                const offset = vertices.length / 2\r\n                vertices.push(...entity.get(Vertices)!.data)\r\n                colors.push(...entity.get(Colors)!.data)\r\n                textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n                for (const index of entity.get(VertexIndices)!.data) {\r\n                    vertexIndices.push(offset + index)\r\n                }\r\n                cameraIndices.push(...entity.get(CameraIndices)!.data)\r\n            }\r\n        }\r\n    }\r\n    if (vertices.length == 0) return\r\n    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices })\r\n}\r\n\r\nconst renderLines = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let cameraIndices: number[] = []\r\n    gl.bindTexture(gl.TEXTURE_2D, renderer.textures[0])\r\n    for (const entity of layers.lines) {\r\n        vertices.push(...entity.get(Vertices)!.data)\r\n        colors.push(...entity.get(Colors)!.data)\r\n        textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n        cameraIndices.push(...entity.get(CameraIndices)!.data)\r\n    }\r\n    if (vertices.length == 0) return\r\n    renderer.drawLines({ vertices, colors, textureCoordinates, cameraIndices })\r\n}\r\n\r\n\r\nexport const render = (ecs: ECS) => {\r\n    const begin = performance.now()\r\n    layout(ecs)\r\n    const layers = geometry(ecs)\r\n    const renderer = ecs.get(Renderer)!\r\n    renderer.setCameras(layers.cameras)\r\n    renderer.clear()\r\n    renderTriangles(renderer, layers)\r\n    renderLines(renderer, layers)\r\n    const end = performance.now()\r\n    return end - begin\r\n}","import { Constraints, Layout, UIRoot } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nexport const layout = (ecs: ECS) => {\r\n    const { width, height } = ecs.get(Renderer)!\r\n    const ui = ecs.get(UIRoot)!.entity\r\n    const constraints = new Constraints(0, width, 0, height)\r\n    ui.get(Layout)!.layout(ui, constraints)\r\n}","export class Mat3 {\r\n    constructor(public data: number[]) { }\r\n\r\n    static identity = () => new Mat3([\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1,\r\n    ])\r\n}","import { Entity } from \"./ecs\";\r\nimport { Mat3 } from \"./linear_algebra\";\r\n\r\ninterface Data {\r\n    z: number\r\n    texture: number\r\n    entity: Entity\r\n}\r\n\r\nexport class Layers {\r\n    layers: Map<number, Entity[]>[]\r\n    lines: Entity[]\r\n    cameras: Mat3[]\r\n    activeCamera: number\r\n\r\n    constructor() {\r\n        this.layers = []\r\n        this.lines = []\r\n        this.cameras = [Mat3.identity()]\r\n        this.activeCamera = 0\r\n    }\r\n\r\n    pushAndSetActiveCamera = (camera: Mat3) => {\r\n        this.activeCamera = this.cameras.length\r\n        this.cameras.push(camera)\r\n    }\r\n\r\n    push = ({ z, texture, entity }: Data): void => {\r\n        for (let i = this.layers.length; i < z + 1; ++i) {\r\n            this.layers.push(new Map())\r\n        }\r\n        const layer = this.layers[z]\r\n        const entities = layer.get(texture)\r\n        if (entities) {\r\n            entities.push(entity)\r\n            return\r\n        }\r\n        layer.set(texture, [entity])\r\n    }\r\n}","import { UIRoot, Geometry, Offset } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nexport const geometry = (ecs: ECS): Layers => {\r\n    const layers = new Layers()\r\n    const ui = ecs.get(UIRoot)!.entity\r\n    ui.get(Geometry)!.geometry(ui, new Offset(0, 0), layers, 0)\r\n    return layers\r\n}","import {\r\n    Layout,\r\n    Text,\r\n    FontSize,\r\n    FontFamily,\r\n    Constraints,\r\n    Color,\r\n    Offset,\r\n    Geometry,\r\n    Size,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    Hsla,\r\n    WorldSpace,\r\n    CameraIndices\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nconst textSize = (renderer: Renderer, entity: Entity) => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let size = new Size(0, 0)\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        size.width += metric.width\r\n        size.height = Math.max(metric.height, size.height)\r\n    }\r\n    return size\r\n}\r\n\r\nconst textGeometry = (renderer: Renderer, entity: Entity, offset: Offset, layers: Layers): number => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const { h, s, l, a } = entity.get(Color)!\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let x = 0\r\n    let indexOffset = 0\r\n    const vertices: number[] = []\r\n    const textureCoordinates: number[] = []\r\n    const colors: number[] = []\r\n    const indices: number[] = []\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        const x0 = offset.x + x\r\n        const x1 = x0 + metric.width\r\n        const y0 = offset.y\r\n        const y1 = y0 + metric.height\r\n        vertices.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1,\r\n        )\r\n        textureCoordinates.push(\r\n            metric.x, metric.y,\r\n            metric.x, metric.y + metric.height,\r\n            metric.x + metric.width, metric.y,\r\n            metric.x + metric.width, metric.y + metric.height,\r\n        )\r\n        colors.push(\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n        )\r\n        indices.push(\r\n            indexOffset + 0, indexOffset + 1, indexOffset + 2,\r\n            indexOffset + 1, indexOffset + 2, indexOffset + 3,\r\n        )\r\n        x += metric.width\r\n        indexOffset += 4\r\n    }\r\n    entity.set(\r\n        new Vertices(vertices),\r\n        new TextureCoordinates(textureCoordinates),\r\n        new Colors(colors),\r\n        new VertexIndices(indices),\r\n        new CameraIndices(Array(indexOffset).fill(layers.activeCamera))\r\n    )\r\n    return atlas.texture\r\n}\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const size = textSize(self.ecs.get(Renderer)!, self)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const texture = textGeometry(self.ecs.get(Renderer)!, self, offset, layers)\r\n    layers.push({ z, entity: self, texture })\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    fontSize?: number\r\n    fontFamily?: number\r\n    color?: Hsla\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, data: string): Entity\r\n    (ecs: ECS, properties: Properties, data: string): Entity\r\n}\r\n\r\nexport const text: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, data] = (() => {\r\n        if (typeof args[0] === 'string') return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Text(data),\r\n        new FontSize(properties.fontSize ?? 24),\r\n        new FontFamily(properties.fontFamily ?? \"monospace\"),\r\n        new Color(properties.color ?? { h: 0, s: 1, l: 1, a: 1 }),\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const child = self.get(Child)!.entity\r\n    const childSize = child.get(Layout)!.layout(child, constraints)\r\n    child.update(Offset, offset => {\r\n        offset.x = constraints.maxWidth / 2 - childSize.width / 2\r\n        offset.y = constraints.maxHeight / 2 - childSize.height / 2\r\n    })\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const child = self.get(Child)!.entity\r\n    child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\nexport const center = (ecs: ECS, child: Entity) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Child(child)\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.y = height)\r\n        height += size.height\r\n        width = Math.max(width, size.width)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width / 2 - childWidth / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width - childWidth)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const column: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.x = width)\r\n        width += size.width\r\n        height = Math.max(height, size.height)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height / 2 - childHeight / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height - childHeight)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const row: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    Hsla,\r\n    Color,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    Padding,\r\n    Width,\r\n    Height,\r\n    WorldSpace,\r\n    Translate,\r\n    CameraIndices\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst clamp = (value: number, min: number, max: number): number =>\r\n    Math.max(Math.min(value, max), min)\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const padding = self.get(Padding)!.value\r\n    const child = self.get(Child)\r\n    const { x, y } = self.get(Translate)!\r\n    const offset = new Offset(x, y)\r\n    if (child) {\r\n        const childSize = child.entity.get(Layout)!.layout(child.entity, constraints)\r\n        const size = new Size(\r\n            Math.min(constraints.maxWidth, childSize.width + 2 * padding),\r\n            Math.min(constraints.maxHeight, childSize.height + 2 * padding),\r\n        )\r\n        child.entity.update(Offset, offset => {\r\n            offset.x = padding\r\n            offset.y = padding\r\n        })\r\n        self.set(constraints, size, offset)\r\n        return size\r\n    }\r\n    const size = new Size(\r\n        clamp(self.get(Width)!.value, constraints.minWidth, constraints.maxWidth),\r\n        clamp(self.get(Height)!.value, constraints.minHeight, constraints.maxHeight),\r\n    )\r\n    self.set(constraints, size, offset)\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const { width, height } = self.get(Size)!\r\n    const x0 = offset.x\r\n    const x1 = x0 + width\r\n    const y0 = offset.y\r\n    const y1 = y0 + height\r\n    const color = self.get(Color)\r\n    if (color) {\r\n        const { h, s, l, a } = color\r\n        self.set(\r\n            new Vertices([\r\n                x0, y0,\r\n                x0, y1,\r\n                x1, y0,\r\n                x1, y1,\r\n            ]),\r\n            new TextureCoordinates([\r\n                0, 0,\r\n                0, 0,\r\n                0, 0,\r\n                0, 0,\r\n            ]),\r\n            new Colors([\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n            ]),\r\n            new VertexIndices([\r\n                0, 1, 2,\r\n                1, 2, 3,\r\n            ]),\r\n            new CameraIndices(Array(4).fill(layers.activeCamera))\r\n        )\r\n        layers.push({ z, texture: 0, entity: self })\r\n    }\r\n    const child = self.get(Child)\r\n    if (child) {\r\n        child.entity.get(Geometry)!.geometry(child.entity, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(x0, y0, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    color?: Hsla\r\n    padding?: number\r\n    width?: number\r\n    height?: number\r\n    x?: number\r\n    y?: number\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, properties: Properties): Entity\r\n    (ecs: ECS, properties: Properties, child: Entity): Entity\r\n}\r\n\r\nexport const container: Overload = (ecs: ECS, properties: Properties, child?: Entity) => {\r\n    const entity = ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Padding(properties.padding ?? 0),\r\n        new Width(properties.width ?? 0),\r\n        new Height(properties.height ?? 0),\r\n        new Translate(properties.x ?? 0, properties.y ?? 0)\r\n    )\r\n    if (properties.color) entity.set(new Color(properties.color))\r\n    if (child) entity.set(new Child(child))\r\n    return entity\r\n}","import { CameraIndices, Color, Colors, From, Hsla, TextureCoordinates, To, Vertices, WorldSpace } from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nconst cubicBezier = (ts: number[], from: WorldSpace, to: WorldSpace): number[] => {\r\n    const p0x = from.x + from.width / 2\r\n    const p0y = from.y + from.height / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = to.x + to.width / 2\r\n    const p3y = to.y + to.height / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    const result: number[] = []\r\n    let lastX = 0\r\n    let lastY = 0\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (result.length) result.push(lastX, lastY)\r\n        else result.push(x, y)\r\n        result.push(x, y)\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n    return result\r\n}\r\n\r\nexport const geometry = (connections: Entity[], layers: Layers) => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const textureCoordinates = Array(samples * 4).fill(0)\r\n    for (const entity of connections) {\r\n        const from = entity.get(From)!.entity.get(WorldSpace)!\r\n        const to = entity.get(To)!.entity.get(WorldSpace)!\r\n        const vertices = cubicBezier(ts, from, to)\r\n        const { h, s, l, a } = entity.get(Color)!\r\n        const colors: number[] = []\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(h, s, l, a)\r\n        entity.set(\r\n            new Vertices(vertices),\r\n            new TextureCoordinates(textureCoordinates),\r\n            new Colors(colors),\r\n            new CameraIndices(Array(vertices.length / 2).fill(layers.activeCamera))\r\n        )\r\n        layers.lines.push(entity)\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    from: Entity\r\n    to: Entity\r\n    color?: Hsla\r\n}\r\n\r\nexport const connection = (ecs: ECS, properties: Properties): Entity =>\r\n    ecs.entity(\r\n        new From(properties.from),\r\n        new To(properties.to),\r\n        new Color(properties.color ?? { h: 0, s: 1, l: 1, a: 1 }),\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Connections,\r\n    WorldSpace,\r\n    Camera,\r\n    Translate,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { Mat3 } from \"../linear_algebra\";\r\nimport { geometry as connectionGeometry } from './connection'\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Layout)!.layout(child, constraints)\r\n    }\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { x, y } = self.get(Camera)!.entity.get(Translate)!\r\n    layers.pushAndSetActiveCamera(new Mat3([\r\n        1, 0, x,\r\n        0, 1, y,\r\n        0, 0, 1\r\n    ]))\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    connectionGeometry(self.get(Connections)!.entities, layers)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    camera: Entity,\r\n    children: Entity[],\r\n    connections: Entity[],\r\n}\r\n\r\nexport const scene = (ecs: ECS, properties: Properties) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(properties.children),\r\n        new Connections(properties.connections),\r\n        new Camera(properties.camera),\r\n    )","type Component<T> = { new(...args: any[]): T }\r\n\r\nclass Storage<T> {\r\n  lookup: Map<number, number>\r\n  data: T[]\r\n  inverses: number[]\r\n\r\n  constructor() {\r\n    this.clear()\r\n  }\r\n\r\n  get = (entity: Entity): T | undefined => {\r\n    const index = this.lookup.get(entity.id)\r\n    return index != undefined ? this.data[index] : undefined\r\n  }\r\n\r\n  hasId = (id: number): boolean => {\r\n    return this.lookup.has(id)\r\n  }\r\n\r\n  set = (entity: Entity, component: T): void => {\r\n    const index = this.lookup.get(entity.id)\r\n    if (index) {\r\n      this.data[index] = component\r\n      this.inverses[index] = entity.id\r\n      return\r\n    }\r\n    this.lookup.set(entity.id, this.data.length)\r\n    this.data.push(component)\r\n    this.inverses.push(entity.id)\r\n  }\r\n\r\n  clear = (): void => {\r\n    this.lookup = new Map()\r\n    this.data = []\r\n    this.inverses = []\r\n  }\r\n}\r\n\r\nexport class Entity {\r\n  constructor(public id: number, public ecs: ECS) { }\r\n\r\n  set = (...components: any): Entity => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      let storage = this.ecs.storages.get(Type)\r\n      if (!storage) {\r\n        storage = new Storage()\r\n        this.ecs.storages.set(Type, storage)\r\n      }\r\n      storage.set(this, component)\r\n    }\r\n    return this\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): Readonly<T> | undefined => {\r\n    const storage = this.ecs.storages.get(Type)\r\n    return storage ? storage.get(this) : undefined\r\n  }\r\n\r\n  update = <T>(Type: Component<T>, f: (T) => void): void => {\r\n    const storage = this.ecs.storages.get(Type)\r\n    if (!storage) return\r\n    const component = storage.get(this)\r\n    if (!component) return\r\n    f(component)\r\n  }\r\n}\r\n\r\nexport class ECS {\r\n  nextEntityId: number\r\n  storages: Map<Component<any>, Storage<any>>\r\n  resources: Map<Component<any>, any>\r\n\r\n  constructor() {\r\n    this.nextEntityId = 0\r\n    this.storages = new Map()\r\n    this.resources = new Map()\r\n  }\r\n\r\n  entity = (...components: any): Entity => {\r\n    const entity = new Entity(this.nextEntityId, this)\r\n    entity.set(...components)\r\n    ++this.nextEntityId\r\n    return entity\r\n  }\r\n\r\n  query = function*(...components: any): Generator<Entity> {\r\n    const primary = this.storages.get(components[0])\r\n    if (!primary) return\r\n    const secondary = components.slice(1).map(s => this.storages.get(s))\r\n    for (const id of primary.inverses) {\r\n      if (secondary.every(storage => storage.hasId(id))) {\r\n        yield new Entity(id, this)\r\n      }\r\n    }\r\n  }\r\n\r\n  set = <T>(...components: any): void => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      this.resources.set(Type, component)\r\n    }\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): T | undefined => {\r\n    return this.resources.get(Type)\r\n  }\r\n\r\n  unsetAll = <T>(Type: Component<T>): void => {\r\n    const storage = this.storages.get(Type)\r\n    if (!storage) return\r\n    storage.clear()\r\n  }\r\n}\r\n","import * as Studio from './studio'\r\nconst { ECS, Renderer } = Studio\r\nconst { UIRoot, Alignment, Translate } = Studio.components\r\nconst { text, center, column, row, container, scene, connection } = Studio.ui\r\nconst { render } = Studio.systems\r\n\r\nconst ecs = new ECS()\r\nconst renderer = new Renderer(window.innerWidth, window.innerHeight)\r\nrenderer.canvas.style.width = '100%'\r\nrenderer.canvas.style.height = '100%'\r\n\r\nconst sourceOut = container(ecs, { width: 18, height: 18, color: { h: 70, s: 1, l: 0.7, a: 1 } })\r\nconst source = container(ecs, { color: { h: 110, s: 1, l: 0.3, a: 1 }, padding: 10, x: 25, y: 200 },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Source\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            column(ecs, [\r\n                row(ecs, [\r\n                    container(ecs, { width: 18, height: 18, color: { h: 70, s: 1, l: 0.7, a: 1 } }),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 0\")),\r\n                ]),\r\n                row(ecs, [\r\n                    container(ecs, { width: 18, height: 18, color: { h: 70, s: 1, l: 0.7, a: 1 } }),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 1\")),\r\n                ]),\r\n            ]),\r\n            container(ecs, { width: 30 }),\r\n            column(ecs, { crossAxisAlignment: Alignment.END }, [\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 0\")),\r\n                    container(ecs, { width: 5 }),\r\n                    sourceOut\r\n                ]),\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 1\")),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { width: 18, height: 18, color: { h: 70, s: 1, l: 0.7, a: 1 } })\r\n                ]),\r\n            ])\r\n        ])\r\n    ])\r\n)\r\n\r\nconst transformIn = container(ecs, { width: 18, height: 18, color: { h: 170, s: 1, l: 0.7, a: 1 } })\r\nconst transformOut = container(ecs, { width: 18, height: 18, color: { h: 170, s: 1, l: 0.7, a: 1 } })\r\nconst transform = container(ecs, { color: { h: 210, s: 1, l: 0.3, a: 1 }, padding: 10, x: 300, y: 100 },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Transform\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            column(ecs, [\r\n                row(ecs, [\r\n                    transformIn,\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 0\")),\r\n                ]),\r\n                row(ecs, [\r\n                    container(ecs, { width: 18, height: 18, color: { h: 170, s: 1, l: 0.7, a: 1 } }),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 1\")),\r\n                ]),\r\n            ]),\r\n            container(ecs, { width: 30 }),\r\n            column(ecs, { crossAxisAlignment: Alignment.END }, [\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 0\")),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { width: 18, height: 18, color: { h: 170, s: 1, l: 0.7, a: 1 } })\r\n                ]),\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 1\")),\r\n                    container(ecs, { width: 5 }),\r\n                    transformOut\r\n                ]),\r\n            ])\r\n        ])\r\n    ])\r\n)\r\n\r\nconst sinkIn = container(ecs, { width: 18, height: 18, color: { h: 270, s: 1, l: 0.7, a: 1 } })\r\nconst sink = container(ecs, { color: { h: 310, s: 1, l: 0.3, a: 1 }, padding: 10, x: 550, y: 250 },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Sink\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            column(ecs, [\r\n                row(ecs, [\r\n                    container(ecs, { width: 18, height: 18, color: { h: 270, s: 1, l: 0.7, a: 1 } }),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 0\")),\r\n                ]),\r\n                row(ecs, [\r\n                    sinkIn,\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 1\")),\r\n                ]),\r\n            ]),\r\n            container(ecs, { width: 30 }),\r\n            column(ecs, { crossAxisAlignment: Alignment.END }, [\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 0\")),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { width: 18, height: 18, color: { h: 270, s: 1, l: 0.7, a: 1 } })\r\n                ]),\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 1\")),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { width: 18, height: 18, color: { h: 270, s: 1, l: 0.7, a: 1 } })\r\n                ]),\r\n            ])\r\n        ])\r\n    ])\r\n)\r\n\r\nconst camera = ecs.entity(new Translate(0, 0))\r\n\r\nconst root = scene(ecs, {\r\n    camera,\r\n    children: [source, transform, sink],\r\n    connections: [\r\n        connection(ecs, { from: sourceOut, to: transformIn }),\r\n        connection(ecs, { from: transformOut, to: sinkIn }),\r\n    ]\r\n})\r\n\r\necs.set(renderer, new UIRoot(root))\r\n\r\nrequestAnimationFrame(() => render(ecs))\r\n\r\nlet dragging = false\r\n\r\ndocument.addEventListener('pointerdown', () => dragging = true)\r\n\r\ndocument.addEventListener('pointermove', (e) => {\r\n    if (!dragging) return\r\n    camera.update(Translate, translate => {\r\n        translate.x -= e.movementX\r\n        translate.y -= e.movementY\r\n    })\r\n    requestAnimationFrame(() => render(ecs))\r\n})\r\ndocument.addEventListener('pointerup', () => dragging = false)\r\n\r\nwindow.addEventListener('resize', () => {\r\n    renderer.setSize(renderer.canvas.clientWidth, renderer.canvas.clientHeight)\r\n    requestAnimationFrame(() => render(ecs))\r\n})\r\n\r\ndocument.body.appendChild(renderer.canvas)\r\n\r\nlet isFullscreen = false\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    if (isFullscreen) return\r\n    renderer.canvas.requestFullscreen()\r\n    isFullscreen = true\r\n})"],"names":["$621f3774f67738fc$var$DefaultProgram","constructor","gl","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","getProgramParameter","LINK_STATUS","console","log","getShaderInfoLog","useProgram","vertexArrayObject","createVertexArray","bindVertexArray","this","positionBuffer","createBuffer","bindAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","textureCoordinatesBuffer","colorBuffer","cameraIndexBuffer","vertexAttribIPointer","UNSIGNED_BYTE","indexBuffer","resolutionLocation","getUniformLocation","devicePixelRatioLocation","cameraLocation","$621f3774f67738fc$var$FontAtlas","texture","metrics","fontFamily","fontSize","metric","c","charCodeAt","font","canvas","document","createElement","ctx","getContext","rows","Math","sqrt","size","x","current","$621f3774f67738fc$var$nearestPowerOfTwo","cellSize","width","window","devicePixelRatio","height","style","scale","textAlign","textBaseline","fillStyle","chars","Array","from","length","v","i","map","String","fromCharCode","clearRect","measureText","ceil","y","floor","fillText","TEXTURE_2D","RGBA","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","$621f3774f67738fc$export$88530751e3977073","touchAction","clearColor","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","depthMask","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","activeTexture","TEXTURE0","fontAtlasses","Map","textures","setSize","createTexture","bindTexture","texImage2D","Uint8Array","push","uniform2f","uniform1f","viewport","recreateFontAtlasses","clear","COLOR_BUFFER_BIT","cameras","data","camera","uniformMatrix3fv","vertices","colors","textureCoordinates","vertexIndices","cameraIndices","bufferData","Float32Array","STATIC_DRAW","$b28c6149dbdf1c74$export$63548ce3f438e2c4","entity","$b28c6149dbdf1c74$export$5f1af8db9871e1d6","value","$b28c6149dbdf1c74$export$80f2abd03de5ca5a","$b28c6149dbdf1c74$export$cd0608c167c7849e","$b28c6149dbdf1c74$export$3edfc50f178e5b0b","$b28c6149dbdf1c74$export$dca3b0875bd9a954","entities","$b28c6149dbdf1c74$export$f3ea0776119f0e84","$b28c6149dbdf1c74$export$79f141de891a5fed","$b28c6149dbdf1c74$export$9d7927214ed7d2cf","Alignment1","$b28c6149dbdf1c74$export$66a3248d846611ce","alignment","$b28c6149dbdf1c74$export$8ee255758437644c","$b28c6149dbdf1c74$export$8954cfac7c08d16a","$b28c6149dbdf1c74$export$9db2ba50894db2b9","$b28c6149dbdf1c74$export$678de176a9a9dea","$b28c6149dbdf1c74$export$d10b08d1cf690764","$b28c6149dbdf1c74$export$892596cec99bc70e","h","s","l","a","$b28c6149dbdf1c74$export$8ee6ea94b5aedb49","$b28c6149dbdf1c74$export$6e8e053b4dff75fa","minWidth","maxWidth","minHeight","maxHeight","$b28c6149dbdf1c74$export$cb6da89c6af1a8ec","$b28c6149dbdf1c74$export$8caee09accd95d7f","add","other","$b28c6149dbdf1c74$export$c84671f46d6a1ca","impl","layout","self","constraints","$b28c6149dbdf1c74$export$77f0fd777d3cc7db","$b28c6149dbdf1c74$export$92bffd8adab203ca","$b28c6149dbdf1c74$export$535dd6b7931a007","$b28c6149dbdf1c74$export$c537fa0d021d010b","$b28c6149dbdf1c74$export$fc4f2b7e7f87722c","$b28c6149dbdf1c74$export$39d3d935cf79db44","$b28c6149dbdf1c74$export$2db6c17465f94a2","geometry","parentOffset","layers","z","$9a7c059fd1344034$export$b3890eb0ae9dca99","ecs","begin","performance","now","$cb3d056828175573$export$b3219800bda33a1f","$90a5a29c0fcb75eb$export$42a7622cbf932bb","renderer","get","setCameras","previousTexture","layer","draw","offset","index","$9a7c059fd1344034$var$renderTriangles","lines","drawLines","$9a7c059fd1344034$var$renderLines","ui","$a26733d1baff63db$export$83f4edd572c84121","static","$3b19fb344542138e$export$89312ce47c0ca777","identity","activeCamera","pushAndSetActiveCamera","set","$2d5075f154be1094$var$layout","text1","atlas","fontAtlas","max","$2d5075f154be1094$var$textSize","$2d5075f154be1094$var$geometry","text2","indexOffset","indices","x0","x1","y0","y1","fill","$2d5075f154be1094$var$textGeometry","$2d5075f154be1094$export$6f093cfa640b7166","args","properties","color","$fd89ce3675dee463$var$layout","child","childSize","update","$fd89ce3675dee463$var$geometry","$fd89ce3675dee463$export$3481c78889e8fbe8","$518015a6e3cc694d$var$layout","children","START","CENTER","child1","childWidth","END","child2","$518015a6e3cc694d$var$geometry","$518015a6e3cc694d$export$4e0c71f277ca26b3","crossAxisAlignment","$9e4edab979495f0d$var$layout","childHeight","$9e4edab979495f0d$var$geometry","$9e4edab979495f0d$export$120ff0929b202a6d","$8a99d960732a172f$var$clamp","min","$8a99d960732a172f$var$layout","padding","offset1","$8a99d960732a172f$var$geometry","$8a99d960732a172f$export$34e0f9847d4c02dd","$5dee3d2e57488100$var$cubicBezier","ts","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","result","lastX","lastY","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","b","$5dee3d2e57488100$export$42a7622cbf932bb","connections","start","stop","num","step","_","$5dee3d2e57488100$var$linspace","samples","$5dee3d2e57488100$export$412d2991813e589a","$864b15efd9f5e1a7$var$layout","$864b15efd9f5e1a7$var$geometry","$864b15efd9f5e1a7$export$33aff30b8aa0934e","$556f46b6ec271235$var$Storage","lookup","id","undefined","hasId","has","component","inverses","$556f46b6ec271235$export$bc644a473284d944","components","Type","storage","storages","f","$556f46b6ec271235$export$d01098d378880d3","nextEntityId","resources","query","primary","secondary","slice","every","unsetAll","ECS","$b4e14b6b8da86996$var$ECS","Renderer","$b4e14b6b8da86996$var$Renderer","$91ae824a8b26c87f$exports","UIRoot","$b4e14b6b8da86996$var$UIRoot","Alignment","$b4e14b6b8da86996$var$Alignment","Translate","$b4e14b6b8da86996$var$Translate","text","$b4e14b6b8da86996$var$text","center","$b4e14b6b8da86996$var$center","column","$b4e14b6b8da86996$var$column","row","$b4e14b6b8da86996$var$row","container","$b4e14b6b8da86996$var$container","scene","$b4e14b6b8da86996$var$scene","connection","$b4e14b6b8da86996$var$connection","render","$b4e14b6b8da86996$var$render","systems","$b4e14b6b8da86996$var$ecs","$b4e14b6b8da86996$var$renderer","innerWidth","innerHeight","$b4e14b6b8da86996$var$sourceOut","$b4e14b6b8da86996$var$source","$b4e14b6b8da86996$var$transformIn","$b4e14b6b8da86996$var$transformOut","$b4e14b6b8da86996$var$transform","$b4e14b6b8da86996$var$sinkIn","$b4e14b6b8da86996$var$sink","$b4e14b6b8da86996$var$camera","$b4e14b6b8da86996$var$root","requestAnimationFrame","$b4e14b6b8da86996$var$dragging","addEventListener","e","translate","movementX","movementY","clientWidth","clientHeight","body","appendChild","$b4e14b6b8da86996$var$isFullscreen","requestFullscreen"],"version":3,"file":"index.d7a0f3b9.js.map"}