const o=(o,{x:e,y:r,color:t})=>{window.devicePixelRatio;const n=e,i=r,{r:a,g:c,b:l}=t,s=n+200,g=i+25,d=g+1,u=g+75,h=[n,i,s,i,s,g,n,i,n,g,s,g,n,g,s,g,s,d,n,g,n,d,s,d,n,d,s,d,s,u,n,d,n,u,s,u];o.positions.push(h),o.colors.push([a,c,l,a,c,l,a,c,l,a,c,l,a,c,l,a,c,l,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66]),o.triangles+=h.length/2},e={red:{r:198,g:40,b:40},pink:{r:173,g:20,b:87},purple:{r:106,g:27,b:154},deepPurple:{r:69,g:39,b:160},indigo:{r:40,g:53,b:147},blue:{r:21,g:101,b:192},lightBlue:{r:2,g:119,b:189},cyan:{r:0,g:131,b:143},teal:{r:0,g:105,b:92},green:{r:46,g:125,b:50},brown:{r:78,g:52,b:46},grey:{r:117,g:117,b:117},blueGrey:{r:55,g:71,b:79}},r=(()=>{const r={positions:[],colors:[],triangles:0};return o(r,{x:50,y:100,color:e.red}),o(r,{x:300,y:100,color:e.pink}),o(r,{x:550,y:100,color:e.purple}),o(r,{x:800,y:100,color:e.deepPurple}),o(r,{x:1050,y:100,color:e.indigo}),o(r,{x:50,y:250,color:e.blue}),o(r,{x:300,y:250,color:e.lightBlue}),o(r,{x:550,y:250,color:e.cyan}),o(r,{x:800,y:250,color:e.teal}),o(r,{x:1050,y:250,color:e.green}),o(r,{x:50,y:400,color:e.brown}),o(r,{x:300,y:400,color:e.grey}),o(r,{x:550,y:400,color:e.blueGrey}),r})();((o,e)=>{const{gl:r,ctx:t,position:n,color:i}=o;r.clear(r.COLOR_BUFFER_BIT),r.bindBuffer(r.ARRAY_BUFFER,n.buffer);{const o=new Float32Array(2*e.triangles);let t=0;for(const r of e.positions)for(const e of r)o[t++]=e;r.bufferData(r.ARRAY_BUFFER,o,r.STATIC_DRAW)}r.vertexAttribPointer(n.location,2,r.FLOAT,!1,0,0),r.bindBuffer(r.ARRAY_BUFFER,i.buffer);{const o=new Uint8Array(3*e.triangles);let t=0;for(const r of e.colors)for(const e of r)o[t++]=e;r.bufferData(r.ARRAY_BUFFER,o,r.STATIC_DRAW)}r.vertexAttribPointer(i.location,3,r.UNSIGNED_BYTE,!0,0,0),r.drawArrays(r.TRIANGLES,0,e.triangles),t.font="24px sans-serif",t.fillStyle="white",t.fillText("foo",55,119)})((()=>{const o=document.createElement("canvas");o.style.width="100%",o.style.height="100%",o.style.position="absolute",document.body.appendChild(o);const e=document.createElement("canvas");e.style.width="100%",e.style.height="100%",e.style.position="absolute";const r=window.devicePixelRatio,t=o.getContext("webgl2");t.canvas.width=Math.round(t.canvas.clientWidth*r),t.canvas.height=Math.round(t.canvas.clientHeight*r),t.viewport(0,0,t.canvas.width,t.canvas.height),t.clearColor(33/255,33/255,33/255,1);const n=e.getContext("2d");n.canvas.width=t.canvas.width,n.canvas.height=t.canvas.height,document.body.appendChild(e);const i=t.createShader(t.VERTEX_SHADER);t.shaderSource(i,"#version 300 es\nuniform vec2 uResolution;\nin vec2 aPosition;\nin vec3 aColor;\nout vec3 vColor;\n\nvoid main() {\n  vColor = aColor;\n  vec2 clipSpace = aPosition / uResolution * 2.0 - 1.0;\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0.0, 1.0);\n}\n"),t.compileShader(i);const a=t.createShader(t.FRAGMENT_SHADER);t.shaderSource(a,"#version 300 es\nprecision mediump float;\n\nin vec3 vColor;\nout vec4 fragColor;\n\nvoid main() {\n  fragColor = vec4(vColor, 1.0);\n}\n"),t.compileShader(a);const c=t.createProgram();t.attachShader(c,i),t.attachShader(c,a),t.linkProgram(c),t.getProgramParameter(c,t.LINK_STATUS)||(console.log(t.getShaderInfoLog(i)),console.log(t.getShaderInfoLog(a))),t.useProgram(c);const l=t.getUniformLocation(c,"uResolution"),s=t.getAttribLocation(c,"aPosition"),g=t.getAttribLocation(c,"aColor");return t.uniform2f(l,t.canvas.width,t.canvas.height),t.enableVertexAttribArray(s),t.enableVertexAttribArray(g),{gl:t,ctx:n,position:{location:s,buffer:t.createBuffer()},color:{location:g,buffer:t.createBuffer()}}})(),r);
//# sourceMappingURL=index.90e18015.js.map
