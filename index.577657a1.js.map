{"mappings":"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","sources":["src/ui/alignment.ts","src/fuzzy_find.ts","src/linear_algebra/matrix3x3.ts","src/linear_algebra/vector3.ts","src/state.ts","src/event.ts","src/ui/pointer_down.ts","src/ui/batch_geometry.ts","src/ui/camera_stack.ts","src/ui/center.ts","src/ui/column.ts","src/ui/container.ts","src/ui/row.ts","src/ui/scene.ts","src/ui/stack.ts","src/ui/text.ts","src/ui/index.ts","src/ui/reduce.ts","src/ui/gather_on_click_handlers.ts","src/ui/id_to_world_space.ts","src/ui/layer_geometry.ts","src/ui/gather_connections.ts","src/ui/reducer.ts","src/ui/render.ts","src/ui/webgl2.ts","src/ui/run.ts","src/index.ts"],"sourcesContent":["export enum MainAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END,\r\n    SPACE_EVENLY,\r\n    SPACE_BETWEEN\r\n}\r\n\r\nexport enum CrossAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END\r\n}","export interface FuzzyFind {\r\n    haystack: string\r\n    needle: string\r\n}\r\n\r\nexport const fuzzyFind = ({ haystack, needle }: FuzzyFind): boolean => {\r\n    let haystackIndex = 0\r\n    let needleIndex = 0\r\n    while (needleIndex < needle.length) {\r\n        const n = needle[needleIndex].toLowerCase()\r\n        while (haystackIndex < haystack.length && n !== haystack[haystackIndex].toLowerCase()) {\r\n            ++haystackIndex\r\n        }\r\n        if (haystackIndex === haystack.length) return false\r\n        ++needleIndex\r\n    }\r\n    return true\r\n}\r\n","import { Size } from \"../ui\"\r\nimport { Vector3 } from \"./vector3\"\r\n\r\nexport type Matrix3x3 = number[]\r\n\r\nexport const identity = (): Matrix3x3 => [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n]\r\n\r\nexport const projection = ({ width, height }: Size): Matrix3x3 => [\r\n    2 / width, 0, -1,\r\n    0, -2 / height, 1,\r\n    0, 0, 1\r\n]\r\n\r\nexport const translate = (x: number, y: number): Matrix3x3 => [\r\n    1, 0, x,\r\n    0, 1, y,\r\n    0, 0, 1\r\n]\r\n\r\nexport const scale = (x: number, y: number): Matrix3x3 => [\r\n    x, 0, 0,\r\n    0, y, 0,\r\n    0, 0, 1\r\n]\r\n\r\nexport const rotate = (radians: number): Matrix3x3 => {\r\n    const c = Math.cos(radians)\r\n    const s = Math.sin(radians)\r\n    return [\r\n        c, s, 0,\r\n        -s, c, 0,\r\n        0, 0, 1\r\n    ]\r\n}\r\n\r\nexport const multiplyMatrices = (...matrices: Matrix3x3[]) => {\r\n    const [head, ...tail] = matrices\r\n    return tail.reduce((a, b) => {\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return [\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ]\r\n    }, head)\r\n}\r\n\r\nexport const multiplyMatrixVector = (a: Matrix3x3, b: Vector3): Vector3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b1 = b[0]\r\n    const b2 = b[1]\r\n    const b3 = b[2]\r\n    const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n    const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n    const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n    return [c1, c2, c3]\r\n}\r\n\r\nexport const inverse = (a: Matrix3x3): Matrix3x3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b11 = a22 * a33 - a23 * a32\r\n    const b12 = a21 * a33 - a23 * a31\r\n    const b13 = a21 * a32 - a22 * a31\r\n    const b21 = a12 * a33 - a13 * a32\r\n    const b22 = a11 * a33 - a13 * a31\r\n    const b23 = a11 * a32 - a12 * a31\r\n    const b31 = a12 * a23 - a13 * a22\r\n    const b32 = a11 * a23 - a13 * a21\r\n    const b33 = a11 * a22 - a12 * a21\r\n    const det = a31 * b31 - a32 * b32 + a33 * b33\r\n    const idet = 1 / det\r\n    return [\r\n        idet * b11, idet * -b21, idet * b31,\r\n        idet * -b12, idet * b22, idet * -b32,\r\n        idet * b13, idet * -b23, idet * b33\r\n    ]\r\n}","export type Vector3 = number[]\r\n\r\nexport const length = ([a, b, c]: Vector3) =>\r\n    Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))","import { Matrix3x3 } from \"./linear_algebra/matrix3x3\"\r\nimport { Pointer, Color } from \"./ui\"\r\n\r\nexport interface InputPath {\r\n    nodeIndex: number\r\n    inputIndex: number\r\n}\r\n\r\nexport interface OutputPath {\r\n    nodeIndex: number\r\n    outputIndex: number\r\n}\r\n\r\nexport interface Input {\r\n    name: string\r\n    selected: boolean\r\n    edgeIndices: number[]\r\n}\r\n\r\nexport interface Output {\r\n    name: string\r\n    selected: boolean\r\n    edgeIndices: number[]\r\n}\r\n\r\nexport interface Body {\r\n    value: number\r\n    editing: boolean\r\n}\r\n\r\nexport interface Node {\r\n    name: string\r\n    inputs: Input[]\r\n    body?: Body\r\n    outputs: Output[]\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport interface Edge {\r\n    input: InputPath\r\n    output: OutputPath\r\n}\r\n\r\nexport interface Graph {\r\n    nodes: Node[]\r\n    edges: Edge[]\r\n}\r\n\r\nexport interface Theme {\r\n    background: Color\r\n    node: Color\r\n    input: Color\r\n    selectedInput: Color\r\n    connection: Color\r\n}\r\n\r\nexport interface Finder {\r\n    search: string\r\n    show: boolean\r\n    options: string[]\r\n}\r\n\r\nexport interface Operation {\r\n    name: string\r\n    inputs: string[]\r\n    body?: number\r\n    outputs: string[]\r\n}\r\n\r\nexport type Operations = { [name: string]: Operation }\r\n\r\nexport interface ScreenCoordinates {\r\n    x: number\r\n    y: number\r\n}\r\n\r\nexport enum VirtualKeyboardKind {\r\n    ALPHABETIC,\r\n    NUMERIC\r\n}\r\n\r\nexport interface VirtualKeyboard {\r\n    show: boolean\r\n    kind: VirtualKeyboardKind\r\n}\r\n\r\nexport enum InputTargetKind {\r\n    FINDER,\r\n    NUMBER,\r\n    NONE\r\n}\r\n\r\nexport interface FinderInputTarget { kind: InputTargetKind.FINDER }\r\n\r\nexport interface NumberInputTarget {\r\n    kind: InputTargetKind.NUMBER,\r\n    nodeIndex: number\r\n}\r\n\r\nexport interface NoInputTarget {\r\n    kind: InputTargetKind.NONE,\r\n}\r\n\r\nexport type InputTarget =\r\n    | FinderInputTarget\r\n    | NumberInputTarget\r\n    | NoInputTarget\r\n\r\nexport interface State {\r\n    graph: Graph\r\n    zooming: boolean\r\n    dragging: boolean\r\n    draggedNode: number | null\r\n    pointers: Pointer[]\r\n    pointerDistance: number\r\n    pointerCenter: [number, number]\r\n    selectedOutput: OutputPath | null\r\n    selectedInput: InputPath | null\r\n    potentialDoubleClick: boolean\r\n    nodePlacementLocation: ScreenCoordinates\r\n    finder: Finder\r\n    virtualKeyboard: VirtualKeyboard\r\n    inputTarget: InputTarget\r\n    camera: Matrix3x3\r\n    operations: Operations\r\n    theme: Theme\r\n}\r\n","import { fuzzyFind } from \"./fuzzy_find\"\r\nimport { multiplyMatrices, multiplyMatrixVector, scale, translate } from \"./linear_algebra/matrix3x3\"\r\nimport { length } from \"./linear_algebra/vector3\"\r\nimport { UpdateResult } from \"./ui/run\"\r\nimport { InputPath, InputTargetKind, OutputPath, State, VirtualKeyboardKind } from \"./state\"\r\nimport { Pointer } from \"./ui\"\r\n\r\nexport enum EventKind {\r\n    POINTER_MOVE,\r\n    POINTER_DOWN,\r\n    POINTER_UP,\r\n    CLICKED_NODE,\r\n    WHEEL,\r\n    CLICKED_INPUT,\r\n    CLICKED_OUTPUT,\r\n    DOUBLE_CLICK_TIMEOUT,\r\n    DOUBLE_CLICK,\r\n    KEYDOWN,\r\n    VIRTUAL_KEYDOWN,\r\n    CLICKED_FINDER_OPTION,\r\n    CLICKED_NUMBER,\r\n    CLICKED_BACKGROUND\r\n}\r\n\r\nexport interface PointerMove {\r\n    kind: EventKind.POINTER_MOVE\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerDown {\r\n    kind: EventKind.POINTER_DOWN\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerUp {\r\n    kind: EventKind.POINTER_UP\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface ClickedNode {\r\n    kind: EventKind.CLICKED_NODE\r\n    index: number\r\n}\r\n\r\nexport interface Wheel {\r\n    kind: EventKind.WHEEL\r\n    x: number\r\n    y: number\r\n    deltaY: number\r\n}\r\n\r\nexport interface ClickedInput {\r\n    kind: EventKind.CLICKED_INPUT\r\n    inputPath: InputPath\r\n}\r\n\r\nexport interface ClickedOutput {\r\n    kind: EventKind.CLICKED_OUTPUT\r\n    outputPath: OutputPath\r\n}\r\n\r\nexport interface DoubleClickTimeout {\r\n    kind: EventKind.DOUBLE_CLICK_TIMEOUT\r\n}\r\n\r\nexport interface DoubleClick {\r\n    kind: EventKind.DOUBLE_CLICK\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface KeyDown {\r\n    kind: EventKind.KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport interface VirtualKeyDown {\r\n    kind: EventKind.VIRTUAL_KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport interface ClickedFinderOption {\r\n    kind: EventKind.CLICKED_FINDER_OPTION\r\n    option: string\r\n}\r\n\r\nexport interface ClickedNumber {\r\n    kind: EventKind.CLICKED_NUMBER,\r\n    nodeIndex: number\r\n}\r\n\r\nexport interface ClickedBackground {\r\n    kind: EventKind.CLICKED_BACKGROUND,\r\n}\r\n\r\nexport type AppEvent =\r\n    | PointerMove\r\n    | PointerDown\r\n    | PointerUp\r\n    | ClickedNode\r\n    | Wheel\r\n    | ClickedInput\r\n    | ClickedOutput\r\n    | DoubleClickTimeout\r\n    | DoubleClick\r\n    | KeyDown\r\n    | VirtualKeyDown\r\n    | ClickedFinderOption\r\n    | ClickedNumber\r\n    | ClickedBackground\r\n\r\n\r\nconst pointerDown = (state: State, event: PointerDown): UpdateResult<State, AppEvent> => {\r\n    if (state.inputTarget.kind !== InputTargetKind.NONE) return { state }\r\n    state.pointers.push(event.pointer)\r\n    if (state.pointers.length > 1) {\r\n        state.potentialDoubleClick = false\r\n        state.dragging = false\r\n        state.zooming = state.pointers.length === 2\r\n        return { state }\r\n    }\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n        return {\r\n            state,\r\n            dispatch: [{ kind: EventKind.DOUBLE_CLICK, pointer: event.pointer }]\r\n        }\r\n    }\r\n    state.dragging = true\r\n    state.potentialDoubleClick = true\r\n    return {\r\n        state,\r\n        schedule: [\r\n            { after: { milliseconds: 300 }, event: { kind: EventKind.DOUBLE_CLICK_TIMEOUT } }\r\n        ]\r\n    }\r\n}\r\n\r\nconst pointerUp = (state: State, event: PointerUp) => {\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    state.pointers.splice(index, 1)\r\n    if (state.pointers.length === 1) {\r\n        state.zooming = false\r\n        state.dragging = true\r\n        state.pointerDistance = 0\r\n    }\r\n    else if (state.pointers.length === 0) {\r\n        state.dragging = false\r\n        state.draggedNode = null\r\n        state.pointerDistance = 0\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst pointerMove = (state: State, event: PointerMove) => {\r\n    if (!state.dragging && !state.zooming) {\r\n        if (!state.finder.show) {\r\n            state.nodePlacementLocation = { x: event.pointer.x, y: event.pointer.y }\r\n        }\r\n        return { state, rerender: false }\r\n    }\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    const pointer = state.pointers[index]\r\n    state.pointers[index] = event.pointer\r\n    if (state.dragging) {\r\n        const dx = event.pointer.x - pointer.x\r\n        const dy = event.pointer.y - pointer.y\r\n        if (state.draggedNode !== null) {\r\n            const scaling = length(multiplyMatrixVector(state.camera, [0, 1, 0]))\r\n            const node = state.graph.nodes[state.draggedNode]\r\n            node.x += dx * scaling\r\n            node.y += dy * scaling\r\n        } else {\r\n            state.camera = multiplyMatrices(state.camera, translate(-dx, -dy))\r\n        }\r\n        return { state, render: true }\r\n    }\r\n    if (state.zooming) {\r\n        const [p0, p1] = [state.pointers[0], state.pointers[1]]\r\n        const [x1, y1] = [p0.x, p0.y]\r\n        const [x2, y2] = [p1.x, p1.y]\r\n        const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n        const previousDistance = state.pointerDistance\r\n        const previousCenter = state.pointerCenter\r\n        state.pointerDistance = distance\r\n        const x = (p0.x + p1.x) / 2\r\n        const y = (p0.y + p1.y) / 2\r\n        state.pointerCenter = [x, y]\r\n        if (previousDistance > 0) {\r\n            const move = translate(x, y)\r\n            const zoom = Math.pow(2, (previousDistance - distance) * 0.01)\r\n            const moveBack = translate(-x, -y)\r\n            const dx = x - previousCenter[0]\r\n            const dy = y - previousCenter[1]\r\n            state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack, translate(-dx, -dy))\r\n            return { state, render: true }\r\n        } else return { state }\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst clickedNode = (state: State, event: ClickedNode) => {\r\n    state.draggedNode = event.index\r\n    return { state, render: true }\r\n}\r\n\r\nconst wheel = (state: State, event: Wheel) => {\r\n    const move = translate(event.x, event.y)\r\n    const zoom = Math.pow(2, event.deltaY * 0.01)\r\n    const moveBack = translate(-event.x, -event.y)\r\n    state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack)\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedInput = (state: State, event: ClickedInput) => {\r\n    state.draggedNode = event.inputPath.nodeIndex\r\n    if (state.selectedOutput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: event.inputPath,\r\n            output: state.selectedOutput\r\n        })\r\n        {\r\n            const { nodeIndex, outputIndex } = state.selectedOutput\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n            output.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, inputIndex } = event.inputPath\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedOutput = null\r\n        state.draggedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedInput) {\r\n        const { nodeIndex, inputIndex } = state.selectedInput\r\n        state.graph.nodes[nodeIndex].inputs[inputIndex].selected = false\r\n    }\r\n    const { nodeIndex, inputIndex } = event.inputPath\r\n    state.graph.nodes[nodeIndex].inputs[inputIndex].selected = true\r\n    state.selectedInput = event.inputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedOutput = (state: State, event: ClickedOutput) => {\r\n    state.draggedNode = event.outputPath.nodeIndex\r\n    if (state.selectedInput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: state.selectedInput,\r\n            output: event.outputPath\r\n        })\r\n        {\r\n            const { nodeIndex, inputIndex } = state.selectedInput\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n            input.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, outputIndex } = event.outputPath\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedInput = null\r\n        state.draggedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedOutput) {\r\n        const { nodeIndex, outputIndex } = state.selectedOutput\r\n        state.graph.nodes[nodeIndex].outputs[outputIndex].selected = false\r\n    }\r\n    const { nodeIndex, outputIndex } = event.outputPath\r\n    state.graph.nodes[nodeIndex].outputs[outputIndex].selected = true\r\n    state.selectedOutput = event.outputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst doubleClickTimeout = (state: State, _: DoubleClickTimeout) => {\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst updateFinderOptions = (state: State): State => {\r\n    state.finder.options = Object.keys(state.operations)\r\n        .filter(item => fuzzyFind({ haystack: item, needle: state.finder.search }))\r\n    return state\r\n}\r\n\r\nexport const openFinder = (state: State) => {\r\n    state.finder.show = true\r\n    state.finder.search = ''\r\n    state.virtualKeyboard = {\r\n        show: true,\r\n        kind: VirtualKeyboardKind.ALPHABETIC\r\n    }\r\n    state.inputTarget = { kind: InputTargetKind.FINDER }\r\n    state.potentialDoubleClick = false\r\n    state = updateFinderOptions(state)\r\n    return state\r\n}\r\n\r\n\r\nconst doubleClick = (state: State, { pointer }: DoubleClick) => {\r\n    state = openFinder(state)\r\n    state.nodePlacementLocation = { x: pointer.x, y: pointer.y }\r\n    return { state: state, render: true }\r\n}\r\n\r\n\r\nconst closeFinder = (state: State) => {\r\n    state.finder.show = false\r\n    state.finder.search = ''\r\n    state.virtualKeyboard.show = false\r\n    state.inputTarget = { kind: InputTargetKind.NONE }\r\n    return state\r\n}\r\n\r\nconst insertOperationFromFinder = (state: State, name: string): State => {\r\n    state = closeFinder(state)\r\n    const operation = state.operations[name]\r\n    const [x, y, _] = multiplyMatrixVector(state.camera, [state.nodePlacementLocation.x, state.nodePlacementLocation.y, 1])\r\n    state.graph.nodes.push({\r\n        name,\r\n        inputs: operation.inputs.map(input => ({\r\n            name: input,\r\n            selected: false,\r\n            edgeIndices: []\r\n        })),\r\n        outputs: operation.outputs.map(output => ({\r\n            name: output,\r\n            selected: false,\r\n            edgeIndices: []\r\n        })),\r\n        x,\r\n        y,\r\n        body: operation.body !== undefined ? {\r\n            value: operation.body,\r\n            editing: false\r\n        } : undefined\r\n    })\r\n    return state\r\n}\r\n\r\nconst keyDown = (state: State, { key }: KeyDown) => {\r\n    switch (state.inputTarget.kind) {\r\n        case InputTargetKind.FINDER:\r\n            switch (key) {\r\n                case 'Backspace':\r\n                    state.finder.search = state.finder.search.slice(0, -1)\r\n                    break\r\n                case 'Shift':\r\n                case 'Alt':\r\n                case 'Control':\r\n                case 'Meta':\r\n                case 'Tab':\r\n                    break\r\n                case 'Enter':\r\n                    if (state.finder.options.length > 0) {\r\n                        const name = state.finder.options[0]\r\n                        state = insertOperationFromFinder(state, name)\r\n                    } else {\r\n                        state = closeFinder(state)\r\n                    }\r\n                    break\r\n                case 'Escape':\r\n                    state = closeFinder(state)\r\n                    break\r\n                default:\r\n                    state.finder.search += key\r\n                    break\r\n            }\r\n            return { state: updateFinderOptions(state), render: true }\r\n        case InputTargetKind.NUMBER:\r\n            const node = state.graph.nodes[state.inputTarget.nodeIndex]\r\n            let value = node.body!.value.toString()\r\n            switch (key) {\r\n                case 'Backspace':\r\n                    let newValue = value.slice(0, -1)\r\n                    if (newValue === '') newValue = '0'\r\n                    node.body!.value = parseFloat(newValue)\r\n                    return { state, render: true }\r\n                case '1':\r\n                case '2':\r\n                case '3':\r\n                case '4':\r\n                case '5':\r\n                case '6':\r\n                case '7':\r\n                case '8':\r\n                case '9':\r\n                case '0':\r\n                case '.':\r\n                    value += key\r\n                    node.body!.value = parseFloat(value)\r\n                    return { state, render: true }\r\n                case 'Enter':\r\n                    node.body!.editing = false\r\n                    state.virtualKeyboard = {\r\n                        show: false,\r\n                        kind: VirtualKeyboardKind.ALPHABETIC\r\n                    }\r\n                    state.inputTarget = {\r\n                        kind: InputTargetKind.NONE\r\n                    }\r\n                    return { state, render: true }\r\n                default:\r\n                    return { state }\r\n            }\r\n        case InputTargetKind.NONE:\r\n            if (key == 'f') {\r\n                return { state: openFinder(state), render: true }\r\n            }\r\n            return { state }\r\n    }\r\n}\r\n\r\nconst virtualKeyDown = (state: State, { key }: VirtualKeyDown) => {\r\n    switch (state.inputTarget.kind) {\r\n        case InputTargetKind.FINDER:\r\n            switch (key) {\r\n                case 'del':\r\n                    state.finder.search = state.finder.search.slice(0, -1)\r\n                    break\r\n                case 'sft':\r\n                    break\r\n                case 'space':\r\n                    state.finder.search += ' '\r\n                    break\r\n                case 'ret':\r\n                    if (state.finder.options.length > 0) {\r\n                        const name = state.finder.options[0]\r\n                        state = insertOperationFromFinder(state, name)\r\n                    } else {\r\n                        state = closeFinder(state)\r\n                    }\r\n                    break\r\n                default:\r\n                    state.finder.search += key\r\n                    break\r\n            }\r\n            return { state: updateFinderOptions(state), render: true }\r\n        case InputTargetKind.NUMBER:\r\n            const node = state.graph.nodes[state.inputTarget.nodeIndex]\r\n            let value = node.body!.value.toString()\r\n            switch (key) {\r\n                case 'del':\r\n                    let newValue = value.slice(0, -1)\r\n                    if (newValue === '') newValue = '0'\r\n                    node.body!.value = parseFloat(newValue)\r\n                    return { state, render: true }\r\n                case '1':\r\n                case '2':\r\n                case '3':\r\n                case '4':\r\n                case '5':\r\n                case '6':\r\n                case '7':\r\n                case '8':\r\n                case '9':\r\n                case '0':\r\n                case '.':\r\n                    value += key\r\n                    node.body!.value = parseFloat(value)\r\n                    return { state, render: true }\r\n                case 'ret':\r\n                    node.body!.editing = false\r\n                    state.virtualKeyboard = {\r\n                        show: false,\r\n                        kind: VirtualKeyboardKind.ALPHABETIC\r\n                    }\r\n                    state.inputTarget = {\r\n                        kind: InputTargetKind.NONE\r\n                    }\r\n                    return { state, render: true }\r\n                default:\r\n                    return { state }\r\n            }\r\n        case InputTargetKind.NONE:\r\n            return { state }\r\n    }\r\n}\r\n\r\nconst clickedFinderOption = (state: State, { option }: ClickedFinderOption) => ({\r\n    state: insertOperationFromFinder(state, option),\r\n    render: true\r\n})\r\n\r\nconst clickedNumber = (state: State, { nodeIndex }: ClickedNumber) => {\r\n    if (state.inputTarget.kind === InputTargetKind.NUMBER) {\r\n        state.graph.nodes[state.inputTarget.nodeIndex].body!.editing = false\r\n    }\r\n    state = closeFinder(state)\r\n    state.virtualKeyboard = {\r\n        show: true,\r\n        kind: VirtualKeyboardKind.NUMERIC\r\n    }\r\n    state.inputTarget = {\r\n        kind: InputTargetKind.NUMBER,\r\n        nodeIndex\r\n    }\r\n    state.graph.nodes[nodeIndex].body!.editing = true\r\n    return {\r\n        state,\r\n        render: true\r\n    }\r\n}\r\n\r\nconst clickedBackground = (state: State) => {\r\n    if (state.inputTarget.kind === InputTargetKind.NUMBER) {\r\n        state.graph.nodes[state.inputTarget.nodeIndex].body!.editing = false\r\n    }\r\n    return {\r\n        state: closeFinder(state),\r\n        render: true\r\n    }\r\n}\r\n\r\nexport const update = (state: State, event: AppEvent): UpdateResult<State, AppEvent> => {\r\n    switch (event.kind) {\r\n        case EventKind.POINTER_DOWN: return pointerDown(state, event)\r\n        case EventKind.POINTER_UP: return pointerUp(state, event)\r\n        case EventKind.POINTER_MOVE: return pointerMove(state, event)\r\n        case EventKind.CLICKED_NODE: return clickedNode(state, event)\r\n        case EventKind.WHEEL: return wheel(state, event)\r\n        case EventKind.CLICKED_INPUT: return clickedInput(state, event)\r\n        case EventKind.CLICKED_OUTPUT: return clickedOutput(state, event)\r\n        case EventKind.DOUBLE_CLICK_TIMEOUT: return doubleClickTimeout(state, event)\r\n        case EventKind.DOUBLE_CLICK: return doubleClick(state, event)\r\n        case EventKind.KEYDOWN: return keyDown(state, event)\r\n        case EventKind.VIRTUAL_KEYDOWN: return virtualKeyDown(state, event)\r\n        case EventKind.CLICKED_FINDER_OPTION: return clickedFinderOption(state, event)\r\n        case EventKind.CLICKED_NUMBER: return clickedNumber(state, event)\r\n        case EventKind.CLICKED_BACKGROUND: return clickedBackground(state)\r\n    }\r\n}\r\n","import { Renderer, Pointer, WorldSpace } from \".\"\r\n\r\nconst inWorldSpace = ({ x0, y0, x1, y1 }: WorldSpace, pointer: Pointer) =>\r\n    x0 <= pointer.x && pointer.x <= x1 &&\r\n    y0 <= pointer.y && pointer.y <= y1\r\n\r\nexport const pointerDown = <AppEvent, R extends Renderer<AppEvent>>(renderer: R, pointer: Pointer): R => {\r\n    for (let i = renderer.clickHandlers.length; i > 0; --i) {\r\n        for (const { onClick, worldSpace } of renderer.clickHandlers[i - 1]) {\r\n            if (inWorldSpace(worldSpace, pointer)) {\r\n                renderer.dispatch(onClick)\r\n                return renderer\r\n            }\r\n        }\r\n    }\r\n    return renderer\r\n}\r\n","import { Connections } from \"./gather_connections\"\r\nimport { Layers } from \"./layer_geometry\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\nimport { WorldSpace } from \".\"\r\n\r\nexport interface Triangles {\r\n    vertices: number[]\r\n    vertexIndices: number[]\r\n    colors: number[]\r\n    textureIndex: number\r\n    textureCoordinates: number[]\r\n    cameraIndex: number[]\r\n}\r\n\r\nexport interface Lines {\r\n    vertices: number[]\r\n    colors: number[]\r\n}\r\n\r\n\r\nexport interface Batch {\r\n    triangles: Triangles\r\n    lines: Lines\r\n}\r\n\r\nconst newBatch = (textureIndex: number): Batch => ({\r\n    triangles: {\r\n        vertices: [],\r\n        colors: [],\r\n        vertexIndices: [],\r\n        textureIndex,\r\n        textureCoordinates: [],\r\n        cameraIndex: []\r\n    },\r\n    lines: {\r\n        vertices: [],\r\n        colors: []\r\n    }\r\n})\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nexport function* cubicBezier(ts: number[], from: WorldSpace, to: WorldSpace, offset: number): Generator<number> {\r\n    const p0x = (from.x0 + from.x1) / 2\r\n    const p0y = (from.y0 + from.y1) / 2\r\n    const p1x = p0x + offset\r\n    const p1y = p0y\r\n    const p3x = (to.x0 + to.x1) / 2\r\n    const p3y = (to.y0 + to.y1) / 2\r\n    const p2x = p3x - offset\r\n    const p2y = p3y\r\n    let lastX = 0\r\n    let lastY = 0\r\n    let first = true\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (first) {\r\n            yield x\r\n            yield y\r\n            first = false\r\n        } else {\r\n            yield lastX\r\n            yield lastY\r\n        }\r\n        yield x\r\n        yield y\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n}\r\n\r\n\r\nexport const batchGeometry = (layers: Layers, connections: Connections, idToWorldSpace: IdToWorldSpace): Batch[] => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const batches: Batch[] = []\r\n    let batch = newBatch(0)\r\n    let batchTextureIndex = batch.triangles.textureIndex.toString()\r\n    layers.forEach((layer, z) => {\r\n        for (const [textureIndex, geometries] of Object.entries(layer)) {\r\n            if (batchTextureIndex !== textureIndex) {\r\n                if (batch.triangles.vertices.length !== 0) batches.push(batch)\r\n                batch = newBatch(parseInt(textureIndex))\r\n                batchTextureIndex = textureIndex\r\n            }\r\n            for (const geometry of geometries) {\r\n                const offset = batch.triangles.vertices.length / 2\r\n                batch.triangles.vertices.push(...geometry.vertices)\r\n                batch.triangles.colors.push(...geometry.colors)\r\n                for (const index of geometry.vertexIndices) {\r\n                    batch.triangles.vertexIndices.push(index + offset)\r\n                }\r\n                batch.triangles.textureCoordinates.push(...geometry.textureCoordinates)\r\n                batch.triangles.cameraIndex.push(...geometry.cameraIndex)\r\n            }\r\n        }\r\n        if (connections.length > z) {\r\n            for (const { connections: cs, scale } of connections[z]) {\r\n                const offset = 50 * scale\r\n                for (const { from, to, color } of cs) {\r\n                    for (const p of cubicBezier(ts, idToWorldSpace[from], idToWorldSpace[to], offset)) {\r\n                        batch.lines.vertices.push(p)\r\n                    }\r\n                    const { red, green, blue, alpha } = color\r\n                    for (let i = 0; i < samples * 2; ++i) batch.lines.colors.push(red, green, blue, alpha)\r\n                }\r\n            }\r\n            if (batch.lines.vertices.length !== 0) {\r\n                batches.push(batch)\r\n                batch = newBatch(0)\r\n            }\r\n        }\r\n    })\r\n    if (batch.triangles.vertices.length !== 0) batches.push(batch)\r\n    return batches\r\n}","import { WorldSpace } from \".\"\r\nimport { identity, inverse, Matrix3x3, multiplyMatrixVector } from \"../linear_algebra/matrix3x3\"\r\n\r\nexport interface CameraStack {\r\n    cameras: Matrix3x3[]\r\n    stack: number[]\r\n    transform: Matrix3x3\r\n}\r\n\r\nexport const initCameraStack = (): CameraStack => {\r\n    const camera = identity()\r\n    return {\r\n        cameras: [identity()],\r\n        stack: [0],\r\n        transform: inverse(camera)\r\n    }\r\n}\r\n\r\nexport const pushCamera = (cameraStack: CameraStack, camera: Matrix3x3): void => {\r\n    const index = cameraStack.cameras.length\r\n    cameraStack.cameras.push(camera)\r\n    cameraStack.stack.push(index)\r\n    cameraStack.transform = inverse(camera)\r\n}\r\n\r\nexport const activeCamera = (cameraStack: CameraStack): number => cameraStack.stack.slice(-1)[0]\r\n\r\nexport const popCamera = (cameraStack: CameraStack): void => {\r\n    cameraStack.stack.pop()\r\n    cameraStack.transform = inverse(cameraStack.cameras[activeCamera(cameraStack)])\r\n}\r\n\r\nexport const transformWorldSpace = (cameraStack: CameraStack, worldSpace: WorldSpace): WorldSpace => {\r\n    const [x0, y0, _0] = multiplyMatrixVector(cameraStack.transform, [worldSpace.x0, worldSpace.y0, 1])\r\n    const [x1, y1, _1] = multiplyMatrixVector(cameraStack.transform, [worldSpace.x1, worldSpace.y1, 1])\r\n    return { x0, y0, x1, y1 }\r\n}\r\n","import { Constraints, Entry, Geometry, geometry, layout, Layout, MeasureText, Offset, Size, UI, UIKind, WorldSpace, traverse } from \".\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface CenterLayout {\r\n    readonly size: Size\r\n    readonly child: Layout\r\n}\r\n\r\nexport interface CenterGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly child: Geometry\r\n}\r\n\r\nexport interface Center<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.CENTER\r\n    readonly child: UI<AppEvent>\r\n}\r\n\r\nexport const center = <AppEvent>(child: UI<AppEvent>): Center<AppEvent> => {\r\n    return {\r\n        kind: UIKind.CENTER,\r\n        child\r\n    }\r\n}\r\n\r\nexport const centerLayout = <AppEvent>(ui: Center<AppEvent>, constraints: Constraints, measureText: MeasureText): CenterLayout => {\r\n    const childLayout = layout(ui.child, constraints, measureText)\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, child: childLayout }\r\n}\r\n\r\nexport const centerGeometry = <AppEvent>(ui: Center<AppEvent>, layout: CenterLayout, offset: Offset, cameraStack: CameraStack): CenterGeometry => {\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    const childLayout = layout.child\r\n    const childOffset = {\r\n        x: offset.x + layout.size.width / 2 - childLayout.size.width / 2,\r\n        y: offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n    }\r\n    const childGeometry = geometry(ui.child, childLayout, childOffset, cameraStack)\r\n    return {\r\n        worldSpace,\r\n        child: childGeometry\r\n    }\r\n}\r\n\r\nexport function* centerTraverse<AppEvent>(ui: Center<AppEvent>, layout: CenterLayout, geometry: CenterGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield* traverse(ui.child, layout.child, geometry.child, z + 1)\r\n}","import { Constraints, Entry, geometry, Geometry, Layout, layout, MeasureText, Offset, Size, traverse, UI, UIKind, WorldSpace } from \".\"\r\nimport { MainAxisAlignment, CrossAxisAlignment } from \"./alignment\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface ColumnLayout {\r\n    readonly size: Size\r\n    readonly totalChildHeight: number\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface ColumnGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Column<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.COLUMN,\r\n    readonly mainAxisAlignment: MainAxisAlignment\r\n    readonly crossAxisAlignment: CrossAxisAlignment\r\n    readonly children: UI<AppEvent>[]\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\nexport function column<AppEvent>(children: UI<AppEvent>[]): Column<AppEvent>\r\nexport function column<AppEvent>(properties: Properties, children: UI<AppEvent>[]): Column<AppEvent>\r\nexport function column<AppEvent>(...args: any[]): Column<AppEvent> {\r\n    const [properties, children]: [Properties, UI<AppEvent>[]] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.COLUMN,\r\n        mainAxisAlignment: properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        crossAxisAlignment: properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    }\r\n}\r\n\r\nexport const columnLayout = <AppEvent>(ui: Column<AppEvent>, constraints: Constraints, measureText: MeasureText): ColumnLayout => {\r\n    const initialChildren: Layout[] = []\r\n    const initial = {\r\n        children: initialChildren,\r\n        width: 0,\r\n        totalChildHeight: 0\r\n    }\r\n    const result = ui.children.reduce((acc, child) => {\r\n        const childLayout = layout(child, constraints, measureText)\r\n        acc.children.push(childLayout)\r\n        acc.totalChildHeight += childLayout.size.height\r\n        acc.width = Math.max(acc.width, childLayout.size.width)\r\n        return acc\r\n    }, initial)\r\n    const { children, width, totalChildHeight } = result\r\n    const height = ui.mainAxisAlignment == MainAxisAlignment.START ? totalChildHeight : constraints.maxHeight\r\n    return {\r\n        size: { width, height },\r\n        totalChildHeight,\r\n        children\r\n    }\r\n}\r\n\r\nexport const columnGeometry = <AppEvent>(ui: Column<AppEvent>, layout: ColumnLayout, offset: Offset, cameraStack: CameraStack): ColumnGeometry => {\r\n    const initialChildren: Geometry[] = []\r\n    const freeSpaceY = layout.size.height - layout.totalChildHeight\r\n    const initial = {\r\n        children: initialChildren,\r\n        y: (() => {\r\n            switch (ui.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return offset.y\r\n                case MainAxisAlignment.CENTER: return offset.y + freeSpaceY / 2\r\n                case MainAxisAlignment.END: return offset.y + freeSpaceY\r\n                case MainAxisAlignment.SPACE_EVENLY: return offset.y + freeSpaceY / (ui.children.length + 1)\r\n                case MainAxisAlignment.SPACE_BETWEEN: return offset.y\r\n            }\r\n        })(),\r\n    }\r\n    const addYStart = (childLayout: Layout) => childLayout.size.height\r\n    const addYCenter = (childLayout: Layout) => childLayout.size.height\r\n    const addYEnd = (childLayout: Layout) => childLayout.size.height\r\n    const addYSpaceEvenly = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (ui.children.length + 1)\r\n    const addYSpaceBetween = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (ui.children.length - 1)\r\n    const addY = (() => {\r\n        switch (ui.mainAxisAlignment) {\r\n            case MainAxisAlignment.START: return addYStart\r\n            case MainAxisAlignment.CENTER: return addYCenter\r\n            case MainAxisAlignment.END: return addYEnd\r\n            case MainAxisAlignment.SPACE_EVENLY: return addYSpaceEvenly\r\n            case MainAxisAlignment.SPACE_BETWEEN: return addYSpaceBetween\r\n        }\r\n    })()\r\n    const offsetXStart = (_: Layout) => offset.x\r\n    const offsetXCenter = (childLayout: Layout) => offset.x + layout.size.width / 2 - childLayout.size.width / 2\r\n    const offsetXEnd = (childLayout: Layout) => offset.x + layout.size.width - childLayout.size.width\r\n    const offsetX = (() => {\r\n        switch (ui.crossAxisAlignment) {\r\n            case CrossAxisAlignment.START: return offsetXStart\r\n            case CrossAxisAlignment.CENTER: return offsetXCenter\r\n            case CrossAxisAlignment.END: return offsetXEnd\r\n        }\r\n    })()\r\n    const result = ui.children.reduce((acc, child, i) => {\r\n        const childLayout = layout.children[i]\r\n        const childOffset = { x: offsetX(childLayout), y: acc.y }\r\n        const childGeometry = geometry(child, childLayout, childOffset, cameraStack)\r\n        acc.children.push(childGeometry)\r\n        acc.y += addY(childLayout)\r\n        return acc\r\n    }, initial)\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height\r\n    })\r\n    return { worldSpace, children: result.children }\r\n}\r\n\r\nexport function* columnTraverse<AppEvent>(ui: Column<AppEvent>, layout: ColumnLayout, geometry: ColumnGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    const nextZ = z + 1\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        yield* traverse(child, layout.children[i], geometry.children[i], nextZ)\r\n        i += 1\r\n    }\r\n}","import { UI, Size, Layout, Constraints, MeasureText, UIKind, layout, Color, Offset, WorldSpace, Geometry, geometry, Entry, traverse, } from '.'\r\nimport { CameraStack, transformWorldSpace, activeCamera } from './camera_stack'\r\n\r\nexport interface ContainerLayout {\r\n    readonly size: Size\r\n    readonly child?: Layout\r\n}\r\n\r\nexport interface ContainerGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly vertices: number[]\r\n    readonly colors: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly child?: Geometry\r\n}\r\n\r\nexport interface Padding {\r\n    readonly top: number\r\n    readonly right: number\r\n    readonly bottom: number\r\n    readonly left: number\r\n}\r\n\r\nexport interface Container<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.CONTAINER,\r\n    readonly padding: Padding\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly child?: UI<AppEvent>\r\n}\r\n\r\ninterface Properties<AppEvent> {\r\n    readonly padding?: number\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly onClick?: AppEvent\r\n    readonly id?: string\r\n}\r\n\r\nconst transformPadding = (padding?: number): Padding => {\r\n    if (padding) return { top: padding, right: padding, bottom: padding, left: padding }\r\n    return { top: 0, right: 0, bottom: 0, left: 0 }\r\n}\r\n\r\nexport const container = <AppEvent>({ padding, width, height, color, x, y, onClick, id }: Properties<AppEvent>, child?: UI<AppEvent>): Container<AppEvent> => {\r\n    return {\r\n        kind: UIKind.CONTAINER,\r\n        padding: transformPadding(padding),\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        color,\r\n        onClick,\r\n        id,\r\n        child\r\n    }\r\n}\r\n\r\nexport const containerLayout = <AppEvent>(ui: Container<AppEvent>, constraints: Constraints, measureText: MeasureText): ContainerLayout => {\r\n    const { top, right, bottom, left } = ui.padding\r\n    if (ui.child) {\r\n        const childLayout = layout(ui.child, constraints, measureText)\r\n        const width = ui.width ?? childLayout.size.width + left + right\r\n        const height = ui.height ?? childLayout.size.height + top + bottom\r\n        return {\r\n            size: { width, height },\r\n            child: childLayout\r\n        }\r\n    }\r\n    const width = (() => {\r\n        if (ui.width) return ui.width + left + right\r\n        return constraints.maxWidth\r\n    })()\r\n    const height = (() => {\r\n        if (ui.height) return ui.height + top + bottom\r\n        return constraints.maxHeight\r\n    })()\r\n    return { size: { width, height } }\r\n}\r\n\r\nexport const containerGeometry = <AppEvent>(ui: Container<AppEvent>, layout: ContainerLayout, offset: Offset, cameraStack: CameraStack): ContainerGeometry => {\r\n    const x0 = offset.x + (ui.x ?? 0)\r\n    const x1 = x0 + layout.size.width\r\n    const y0 = offset.y + (ui.y ?? 0)\r\n    const y1 = y0 + layout.size.height\r\n    const worldSpace = transformWorldSpace(cameraStack, { x0, x1, y0, y1 })\r\n    const childGeometry = (() => {\r\n        if (ui.child) {\r\n            const childLayout = layout.child!\r\n            const childOffset = {\r\n                x: x0 + ui.padding.left,\r\n                y: y0 + ui.padding.top\r\n            }\r\n            return geometry(ui.child, childLayout, childOffset, cameraStack)\r\n        }\r\n        return undefined\r\n    })()\r\n    if (ui.color) {\r\n        const { red, green, blue, alpha } = ui.color\r\n        return {\r\n            worldSpace,\r\n            vertices: [\r\n                x0, y0,\r\n                x0, y1,\r\n                x1, y0,\r\n                x1, y1,\r\n            ],\r\n            colors: [\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n            ],\r\n            vertexIndices: [\r\n                0, 1, 2,\r\n                1, 2, 3\r\n            ],\r\n            cameraIndex: Array(4).fill(activeCamera(cameraStack)),\r\n            textureIndex: 0,\r\n            textureCoordinates: Array(8).fill(0),\r\n            child: childGeometry\r\n        }\r\n    }\r\n    return {\r\n        worldSpace,\r\n        vertices: [],\r\n        colors: [],\r\n        vertexIndices: [],\r\n        cameraIndex: [],\r\n        textureIndex: 0,\r\n        textureCoordinates: [],\r\n        child: childGeometry\r\n    }\r\n}\r\n\r\nexport function* containerTraverse<AppEvent>(ui: Container<AppEvent>, layout: ContainerLayout, geometry: ContainerGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    if (ui.child) {\r\n        const childLayout = layout.child!\r\n        const childGeometry = geometry.child!\r\n        yield* traverse(ui.child, childLayout, childGeometry, z + 1)\r\n    }\r\n}","import { Constraints, Layout, MeasureText, Size, UI, UIKind, layout, Geometry, Offset, geometry, WorldSpace, Entry, traverse } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"./alignment\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface RowLayout {\r\n    readonly size: Size\r\n    readonly totalChildWidth: number\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface RowGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Row<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.ROW,\r\n    readonly mainAxisAlignment: MainAxisAlignment\r\n    readonly crossAxisAlignment: CrossAxisAlignment\r\n    readonly children: UI<AppEvent>[]\r\n}\r\n\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\nexport function row<AppEvent>(children: UI<AppEvent>[]): Row<AppEvent>\r\nexport function row<AppEvent>(properties: Properties, children: UI<AppEvent>[]): Row<AppEvent>\r\nexport function row<AppEvent>(...args: any[]): Row<AppEvent> {\r\n    const [properties, children]: [Properties, UI<AppEvent>[]] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.ROW,\r\n        mainAxisAlignment: properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        crossAxisAlignment: properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    }\r\n}\r\n\r\nexport const rowLayout = <AppEvent>(ui: Row<AppEvent>, constraints: Constraints, measureText: MeasureText): RowLayout => {\r\n    const initialChildren: Layout[] = []\r\n    const initial = {\r\n        children: initialChildren,\r\n        totalChildWidth: 0,\r\n        height: 0\r\n    }\r\n    const result = ui.children.reduce((acc, child) => {\r\n        const childLayout = layout(child, constraints, measureText)\r\n        acc.children.push(childLayout)\r\n        acc.totalChildWidth += childLayout.size.width\r\n        acc.height = Math.max(acc.height, childLayout.size.height)\r\n        return acc\r\n    }, initial)\r\n    const { children, totalChildWidth, height } = result\r\n    const width = ui.mainAxisAlignment == MainAxisAlignment.START ? totalChildWidth : constraints.maxWidth\r\n    return { size: { width, height }, totalChildWidth, children }\r\n}\r\n\r\nexport const rowGeometry = <AppEvent>(ui: Row<AppEvent>, layout: RowLayout, offset: Offset, cameraStack: CameraStack): RowGeometry => {\r\n    const initialChildren: Geometry[] = []\r\n    const freeSpaceX = layout.size.width - layout.totalChildWidth\r\n    const initial = {\r\n        children: initialChildren,\r\n        x: (() => {\r\n            switch (ui.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return offset.x\r\n                case MainAxisAlignment.CENTER: return offset.x + freeSpaceX / 2\r\n                case MainAxisAlignment.END: return offset.x + freeSpaceX\r\n                case MainAxisAlignment.SPACE_EVENLY: return offset.x + freeSpaceX / (ui.children.length + 1)\r\n                case MainAxisAlignment.SPACE_BETWEEN: return offset.x\r\n            }\r\n        })(),\r\n    }\r\n    const addXStart = (childLayout: Layout) => childLayout.size.width\r\n    const addXCenter = (childLayout: Layout) => childLayout.size.width\r\n    const addXEnd = (childLayout: Layout) => childLayout.size.width\r\n    const addXSpaceEvenly = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (ui.children.length + 1)\r\n    const addXSpaceBetween = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (ui.children.length - 1)\r\n    const addX = (() => {\r\n        switch (ui.mainAxisAlignment) {\r\n            case MainAxisAlignment.START: return addXStart\r\n            case MainAxisAlignment.CENTER: return addXCenter\r\n            case MainAxisAlignment.END: return addXEnd\r\n            case MainAxisAlignment.SPACE_EVENLY: return addXSpaceEvenly\r\n            case MainAxisAlignment.SPACE_BETWEEN: return addXSpaceBetween\r\n        }\r\n    })()\r\n    const offsetYStart = (_: Layout) => offset.y\r\n    const offsetYCenter = (childLayout: Layout) => offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n    const offsetYEnd = (childLayout: Layout) => offset.y + layout.size.height - childLayout.size.height\r\n    const offsetY = (() => {\r\n        switch (ui.crossAxisAlignment) {\r\n            case CrossAxisAlignment.START: return offsetYStart\r\n            case CrossAxisAlignment.CENTER: return offsetYCenter\r\n            case CrossAxisAlignment.END: return offsetYEnd\r\n        }\r\n    })()\r\n    const result = ui.children.reduce((acc, child, i) => {\r\n        const childLayout = layout.children[i]\r\n        const childOffset = { x: acc.x, y: offsetY(childLayout) }\r\n        const childGeometry = geometry(child, childLayout, childOffset, cameraStack)\r\n        acc.children.push(childGeometry)\r\n        acc.x += addX(childLayout)\r\n        return acc\r\n    }, initial)\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    return { worldSpace, children: result.children }\r\n}\r\n\r\nexport function* rowTraverse<AppEvent>(ui: Row<AppEvent>, layout: RowLayout, geometry: RowGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    const nextZ = z + 1\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        yield* traverse(child, layout.children[i], geometry.children[i], nextZ)\r\n        i += 1\r\n    }\r\n}","import { Connection, Constraints, Entry, geometry, Geometry, layout, Layout, MeasureText, Offset, Size, traverse, UI, UIKind, WorldSpace } from \".\"\r\nimport { Matrix3x3 } from \"../linear_algebra/matrix3x3\"\r\nimport { CameraStack, popCamera, pushCamera, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface SceneLayout {\r\n    readonly size: Size\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface SceneGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Scene<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.SCENE\r\n    readonly camera: Matrix3x3\r\n    readonly children: UI<AppEvent>[]\r\n    readonly connections: Connection[]\r\n}\r\n\r\nexport interface Properties<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly camera: Matrix3x3\r\n    readonly children: UI<AppEvent>[]\r\n    readonly connections?: Connection[]\r\n}\r\n\r\nexport const scene = <AppEvent>({ id, onClick, camera, children, connections }: Properties<AppEvent>): Scene<AppEvent> => ({\r\n    id, onClick, kind: UIKind.SCENE, camera, children, connections: connections ?? []\r\n})\r\n\r\nexport const sceneLayout = <AppEvent>(ui: Scene<AppEvent>, constraints: Constraints, measureText: MeasureText): SceneLayout => {\r\n    const children = ui.children.map(c => layout(c, constraints, measureText))\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, children }\r\n}\r\n\r\nexport const sceneGeometry = <AppEvent>(ui: Scene<AppEvent>, layout: SceneLayout, offset: Offset, cameraStack: CameraStack): SceneGeometry => {\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height\r\n    })\r\n    pushCamera(cameraStack, ui.camera)\r\n    const children = ui.children.map((c, i) => geometry(c, layout.children[i], offset, cameraStack))\r\n    popCamera(cameraStack)\r\n    return { worldSpace, children }\r\n}\r\n\r\nexport function* sceneTraverse<AppEvent>(ui: Scene<AppEvent>, layout: SceneLayout, geometry: SceneGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        for (const entry of traverse(child, layout.children[i], geometry.children[i], z)) {\r\n            yield entry\r\n            z = Math.max(z, entry.z)\r\n        }\r\n        i++\r\n        z++\r\n    }\r\n}\r\n","import { Constraints, Geometry, layout, Layout, MeasureText, Offset, Size, UI, UIKind, WorldSpace, geometry, Entry, traverse } from \".\";\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\";\r\n\r\nexport interface StackLayout {\r\n    readonly size: Size\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface StackGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Stack<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    kind: UIKind.STACK\r\n    children: UI<AppEvent>[]\r\n}\r\n\r\nexport const stack = <AppEvent>(children: UI<AppEvent>[]): Stack<AppEvent> => ({\r\n    kind: UIKind.STACK,\r\n    children\r\n})\r\n\r\nexport const stackLayout = <AppEvent>(ui: Stack<AppEvent>, constraints: Constraints, measureText: MeasureText): StackLayout => {\r\n    const children = ui.children.map(c => layout(c, constraints, measureText))\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, children }\r\n}\r\n\r\nexport const stackGeometry = <AppEvent>(ui: Stack<AppEvent>, layout: StackLayout, offset: Offset, cameraStack: CameraStack): StackGeometry => {\r\n    const children = ui.children.map((c, i) => geometry(c, layout.children[i], offset, cameraStack))\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    return { worldSpace, children }\r\n}\r\n\r\nexport function* stackTraverse<AppEvent>(ui: Stack<AppEvent>, layout: StackLayout, geometry: StackGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        for (const entry of traverse(child, layout.children[i], geometry.children[i], z)) {\r\n            yield entry\r\n            z = Math.max(z, entry.z)\r\n        }\r\n        i += 1\r\n        z += 1\r\n    }\r\n}","import { Color, Constraints, Entry, Font, MeasureText, Offset, Size, TextMeasurements, UIKind, WorldSpace } from \".\";\r\nimport { activeCamera, CameraStack, transformWorldSpace } from \"./camera_stack\";\r\n\r\nexport interface TextLayout {\r\n    readonly measurements: TextMeasurements\r\n    readonly size: Size\r\n}\r\n\r\nexport interface TextGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly colors: number[]\r\n    readonly vertices: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n}\r\n\r\nexport interface Text<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.TEXT\r\n    readonly font: Font\r\n    readonly color: Color\r\n    readonly str: string\r\n}\r\n\r\ninterface Properties {\r\n    readonly font?: string\r\n    readonly size?: number\r\n    readonly color?: Color\r\n}\r\n\r\nexport function text<AppEvent>(str: string): Text<AppEvent>\r\nexport function text<AppEvent>(properties: Properties, str: string): Text<AppEvent>\r\nexport function text<AppEvent>(...args: any[]): Text<AppEvent> {\r\n    const [properties, str]: [Properties, string] = (() =>\r\n        typeof args[0] == 'string' ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.TEXT,\r\n        font: {\r\n            family: properties.font ?? \"monospace\",\r\n            size: properties.size ?? 14\r\n        },\r\n        color: properties.color ?? { red: 255, green: 255, blue: 255, alpha: 255 },\r\n        str\r\n    }\r\n}\r\n\r\nexport const textLayout = <AppEvent>({ font, str }: Text<AppEvent>, _: Constraints, measureText: MeasureText): TextLayout => {\r\n    const measurements = measureText(font, str)\r\n    const width = measurements.widths.reduce((acc, width) => acc + width)\r\n    const size = { width, height: font.size }\r\n    return { measurements, size }\r\n}\r\n\r\nconst vertices = (widths: number[], height: number, offset: Offset) => {\r\n    const result = []\r\n    let offsetX = offset.x\r\n    const y0 = offset.y\r\n    const y1 = offset.y + height\r\n    for (const width of widths) {\r\n        const x0 = offsetX\r\n        const x1 = offsetX + width\r\n        result.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        )\r\n        offsetX += width\r\n    }\r\n    return result\r\n}\r\n\r\nconst colors = (n: number, { red, green, blue, alpha }: Color) => {\r\n    const result = []\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n        )\r\n    }\r\n    return result\r\n}\r\n\r\nconst vertexIndices = (n: number) => {\r\n    const result = []\r\n    let offset = 0\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            offset, offset + 1, offset + 2,\r\n            offset + 1, offset + 2, offset + 3\r\n        )\r\n        offset += 4\r\n    }\r\n    return result\r\n}\r\n\r\nexport const textGeometry = <AppEvent>(ui: Text<AppEvent>, layout: TextLayout, offset: Offset, cameraStack: CameraStack): TextGeometry => {\r\n    const textLayout = layout as TextLayout\r\n    const { measurements } = textLayout\r\n    const { textureIndex, textureCoordinates, widths } = measurements\r\n    return {\r\n        worldSpace: transformWorldSpace(cameraStack, {\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        }),\r\n        textureIndex,\r\n        textureCoordinates: textureCoordinates.flat(),\r\n        colors: colors(widths.length, ui.color),\r\n        vertices: vertices(widths, ui.font.size, offset),\r\n        vertexIndices: vertexIndices(widths.length),\r\n        cameraIndex: Array(widths.length * 4).fill(activeCamera(cameraStack))\r\n    }\r\n}\r\n\r\nexport function* textTraverse<AppEvent>(ui: Text<AppEvent>, layout: TextLayout, geometry: TextGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n}","import { Center, CenterLayout, centerLayout, CenterGeometry, centerGeometry, centerTraverse } from './center'\r\nimport { Column, ColumnLayout, columnLayout, ColumnGeometry, columnGeometry, columnTraverse } from './column'\r\nimport { Container, ContainerLayout, containerLayout, ContainerGeometry, containerGeometry, containerTraverse } from './container'\r\nimport { Row, RowLayout, rowLayout, RowGeometry, rowGeometry, rowTraverse } from './row'\r\nimport { Scene, SceneLayout, sceneLayout, SceneGeometry, sceneGeometry, sceneTraverse } from './scene'\r\nimport { Stack, StackLayout, stackLayout, StackGeometry, stackGeometry, stackTraverse } from './stack'\r\nimport { Text, TextLayout, textLayout, TextGeometry, textGeometry, textTraverse } from './text'\r\nimport { CameraStack } from './camera_stack'\r\nimport { Matrix3x3 } from '../linear_algebra/matrix3x3'\r\nimport { Batch } from './batch_geometry'\r\nimport { ClickHandlers } from './gather_on_click_handlers'\r\n\r\nexport { center } from './center'\r\nexport { column } from './column'\r\nexport { container } from './container'\r\nexport { row } from './row'\r\nexport { scene } from './scene'\r\nexport { stack } from './stack'\r\nexport { text } from './text'\r\n\r\nexport enum UIKind {\r\n    CENTER,\r\n    COLUMN,\r\n    CONTAINER,\r\n    ROW,\r\n    SCENE,\r\n    STACK,\r\n    TEXT,\r\n}\r\n\r\nexport type UI<AppEvent> =\r\n    | Center<AppEvent>\r\n    | Column<AppEvent>\r\n    | Container<AppEvent>\r\n    | Row<AppEvent>\r\n    | Scene<AppEvent>\r\n    | Stack<AppEvent>\r\n    | Text<AppEvent>\r\n\r\nexport interface Color {\r\n    red: number\r\n    green: number\r\n    blue: number\r\n    alpha: number\r\n}\r\n\r\nexport interface Size {\r\n    readonly width: number\r\n    readonly height: number\r\n}\r\n\r\nexport interface Constraints {\r\n    readonly minWidth: number\r\n    readonly maxWidth: number\r\n    readonly minHeight: number\r\n    readonly maxHeight: number\r\n}\r\n\r\nexport type Layout =\r\n    | CenterLayout\r\n    | ColumnLayout\r\n    | ContainerLayout\r\n    | RowLayout\r\n    | SceneLayout\r\n    | StackLayout\r\n    | TextLayout\r\n\r\nexport interface Font {\r\n    readonly family: string\r\n    readonly size: number\r\n}\r\n\r\nexport interface TextMeasurements {\r\n    readonly widths: number[]\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[][]\r\n}\r\n\r\nexport type MeasureText = (font: Font, str: string) => TextMeasurements\r\n\r\nexport const layout = <AppEvent>(ui: UI<AppEvent>, constraints: Constraints, measureText: MeasureText): Layout => {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            return centerLayout(ui, constraints, measureText)\r\n        case UIKind.COLUMN:\r\n            return columnLayout(ui, constraints, measureText)\r\n        case UIKind.CONTAINER:\r\n            return containerLayout(ui, constraints, measureText)\r\n        case UIKind.ROW:\r\n            return rowLayout(ui, constraints, measureText)\r\n        case UIKind.SCENE:\r\n            return sceneLayout(ui, constraints, measureText)\r\n        case UIKind.STACK:\r\n            return stackLayout(ui, constraints, measureText)\r\n        case UIKind.TEXT:\r\n            return textLayout(ui, constraints, measureText)\r\n    }\r\n}\r\n\r\nexport interface Offset {\r\n    readonly x: number\r\n    readonly y: number\r\n}\r\n\r\nexport interface WorldSpace {\r\n    readonly x0: number\r\n    readonly y0: number\r\n    readonly x1: number\r\n    readonly y1: number\r\n}\r\n\r\nexport type Geometry =\r\n    | CenterGeometry\r\n    | ColumnGeometry\r\n    | ContainerGeometry\r\n    | RowGeometry\r\n    | SceneGeometry\r\n    | StackGeometry\r\n    | TextGeometry\r\n\r\nexport const geometry = <AppEvent>(ui: UI<AppEvent>, layout: Layout, offset: Offset, cameraStack: CameraStack): Geometry => {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            return centerGeometry(ui, layout as CenterLayout, offset, cameraStack)\r\n        case UIKind.COLUMN:\r\n            return columnGeometry(ui, layout as ColumnLayout, offset, cameraStack)\r\n        case UIKind.CONTAINER:\r\n            return containerGeometry(ui, layout as ContainerLayout, offset, cameraStack)\r\n        case UIKind.ROW:\r\n            return rowGeometry(ui, layout as RowLayout, offset, cameraStack)\r\n        case UIKind.SCENE:\r\n            return sceneGeometry(ui, layout as SceneLayout, offset, cameraStack)\r\n        case UIKind.STACK:\r\n            return stackGeometry(ui, layout as StackLayout, offset, cameraStack)\r\n        case UIKind.TEXT:\r\n            return textGeometry(ui, layout as TextLayout, offset, cameraStack)\r\n    }\r\n}\r\n\r\nexport interface Entry<AppEvent> {\r\n    readonly ui: UI<AppEvent>\r\n    readonly layout: Layout\r\n    readonly geometry: Geometry\r\n    readonly z: number\r\n}\r\n\r\nexport function* traverse<AppEvent>(ui: UI<AppEvent>, layout: Layout, geometry: Geometry, z: number): Generator<Entry<AppEvent>> {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            yield* centerTraverse(ui, layout as CenterLayout, geometry as CenterGeometry, z)\r\n            break\r\n        case UIKind.COLUMN:\r\n            yield* columnTraverse(ui, layout as ColumnLayout, geometry as ColumnGeometry, z)\r\n            break\r\n        case UIKind.CONTAINER:\r\n            yield* containerTraverse(ui, layout as ContainerLayout, geometry as ContainerGeometry, z)\r\n            break\r\n        case UIKind.ROW:\r\n            yield* rowTraverse(ui, layout as RowLayout, geometry as RowGeometry, z)\r\n            break\r\n        case UIKind.SCENE:\r\n            yield* sceneTraverse(ui, layout as SceneLayout, geometry as SceneGeometry, z)\r\n            break\r\n        case UIKind.STACK:\r\n            yield* stackTraverse(ui, layout as StackLayout, geometry as StackGeometry, z)\r\n            break\r\n        case UIKind.TEXT:\r\n            yield* textTraverse(ui, layout as TextLayout, geometry as TextGeometry, z)\r\n            break\r\n    }\r\n}\r\n\r\nexport interface Connection {\r\n    from: string\r\n    to: string\r\n    color: Color\r\n}\r\n\r\nexport interface Renderer<AppEvent> {\r\n    size: Size\r\n    cameras: Matrix3x3[]\r\n    clickHandlers: ClickHandlers<AppEvent>\r\n    clear: () => void\r\n    draw: (batch: Batch) => void\r\n    measureText: MeasureText\r\n    dispatch: (event: AppEvent) => void\r\n}\r\n\r\nexport interface Pointer {\r\n    x: number\r\n    y: number\r\n    id: number\r\n}","import { UI, Geometry, Layout, Entry, traverse } from \".\";\r\n\r\nexport interface Reducer<AppEvent, T> {\r\n    initial: () => T\r\n    combine: (accumulator: T, entry: Entry<AppEvent>) => T\r\n}\r\n\r\nexport const reduce = <AppEvent, T>(ui: UI<AppEvent>, layout: Layout, geometry: Geometry, reducer: Reducer<AppEvent, T>): T => {\r\n    const accumulator = reducer.initial()\r\n    for (const entry of traverse(ui, layout, geometry, 0)) {\r\n        reducer.combine(accumulator, entry)\r\n    }\r\n    return accumulator\r\n}","import { Entry, WorldSpace } from \".\"\r\n\r\nexport interface ClickHandler<AppEvent> {\r\n    onClick: AppEvent\r\n    worldSpace: WorldSpace\r\n}\r\n\r\nexport type ClickHandlers<AppEvent> = ClickHandler<AppEvent>[][]\r\n\r\nexport const initial = <AppEvent>(): ClickHandlers<AppEvent> => []\r\n\r\nexport const combine = <AppEvent>(handlers: ClickHandlers<AppEvent>, entry: Entry<AppEvent>): ClickHandlers<AppEvent> => {\r\n    if (entry.ui.onClick === undefined) return handlers\r\n    const needed = entry.z - handlers.length + 1\r\n    for (let i = 0; i < needed; ++i) handlers.push([])\r\n    handlers[entry.z].push({\r\n        onClick: entry.ui.onClick,\r\n        worldSpace: entry.geometry.worldSpace\r\n    })\r\n    return handlers\r\n}\r\n","import { Entry, WorldSpace } from \".\"\r\n\r\nexport type IdToWorldSpace = { [id: string]: WorldSpace }\r\n\r\nexport const initial = (): IdToWorldSpace => ({})\r\n\r\nexport const combine = <AppEvent>(lookup: IdToWorldSpace, entry: Entry<AppEvent>): IdToWorldSpace => {\r\n    if (!entry.ui.id) return lookup\r\n    lookup[entry.ui.id] = entry.geometry.worldSpace\r\n    return lookup\r\n}","import { Entry, UIKind } from \".\"\r\nimport { ContainerGeometry } from \"./container\"\r\nimport { TextGeometry } from \"./text\"\r\n\r\ntype Geometry = ContainerGeometry | TextGeometry\r\nexport type Layer = { [textureIndex: number]: Geometry[] }\r\nexport type Layers = Layer[]\r\n\r\nexport const initial = (): Layers => []\r\n\r\nexport const combine = <AppEvent>(layers: Layers, entry: Entry<AppEvent>): Layers => {\r\n    switch (entry.ui.kind) {\r\n        case UIKind.CONTAINER:\r\n        case UIKind.TEXT:\r\n            const entryGeometry = entry.geometry as Geometry\r\n            if (entryGeometry.vertices.length == 0) return layers\r\n            const needed = entry.z - layers.length + 1\r\n            for (let i = 0; i < needed; ++i) layers.push({})\r\n            const layer = layers[entry.z]\r\n            const geometry = (() => {\r\n                const geometry = layer[entryGeometry.textureIndex]\r\n                if (geometry) return geometry\r\n                const newGeometry: Geometry[] = []\r\n                layer[entryGeometry.textureIndex] = newGeometry\r\n                return newGeometry\r\n            })()\r\n            geometry.push(entryGeometry)\r\n            return layers\r\n        default:\r\n            return layers\r\n    }\r\n}\r\n","import { Entry, Connection, UIKind } from \".\"\r\nimport { inverse, multiplyMatrixVector } from \"../linear_algebra/matrix3x3\"\r\nimport { length } from \"../linear_algebra/vector3\"\r\n\r\nexport interface ConnectionsAndScale {\r\n    connections: Connection[]\r\n    scale: number\r\n}\r\n\r\nexport type Connections = ConnectionsAndScale[][]\r\n\r\nexport const initial = (): Connections => []\r\n\r\nexport const combine = <AppEvent>(connections: Connections, entry: Entry<AppEvent>): Connections => {\r\n    if (entry.ui.kind == UIKind.SCENE) {\r\n        if (entry.ui.connections.length === 0) return connections\r\n        const needed = entry.z - connections.length + 1\r\n        for (let i = 0; i < needed; ++i) connections.push([])\r\n        const layer = connections[entry.z]\r\n        layer.push({\r\n            connections: entry.ui.connections,\r\n            scale: length(multiplyMatrixVector(inverse(entry.ui.camera), [0, 1, 0]))\r\n        })\r\n        return connections\r\n    }\r\n    return connections\r\n}\r\n","import { Entry } from \".\"\r\nimport { ClickHandlers } from \"./gather_on_click_handlers\"\r\nimport * as gatherOnClickHandlers from \"./gather_on_click_handlers\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\nimport * as buildIdToWorldSpace from \"./id_to_world_space\"\r\nimport { Layers } from \"./layer_geometry\"\r\nimport * as layerGeometry from \"./layer_geometry\"\r\nimport { Connections } from \"./gather_connections\"\r\nimport * as gatherConnections from \"./gather_connections\"\r\n\r\nexport interface Accumulator<AppEvent> {\r\n    layers: Layers,\r\n    clickHandlers: ClickHandlers<AppEvent>,\r\n    idToWorldSpace: IdToWorldSpace\r\n    connections: Connections\r\n}\r\n\r\nexport const initial = <AppEvent>(): Accumulator<AppEvent> => ({\r\n    layers: layerGeometry.initial(),\r\n    clickHandlers: gatherOnClickHandlers.initial(),\r\n    idToWorldSpace: buildIdToWorldSpace.initial(),\r\n    connections: gatherConnections.initial()\r\n})\r\n\r\nexport const combine = <AppEvent>(acc: Accumulator<AppEvent>, entry: Entry<AppEvent>): Accumulator<AppEvent> => ({\r\n    layers: layerGeometry.combine(acc.layers, entry),\r\n    clickHandlers: gatherOnClickHandlers.combine(acc.clickHandlers, entry),\r\n    idToWorldSpace: buildIdToWorldSpace.combine(acc.idToWorldSpace, entry),\r\n    connections: gatherConnections.combine(acc.connections, entry)\r\n})\r\n","import { batchGeometry } from \"./batch_geometry\"\r\nimport { initCameraStack } from \"./camera_stack\"\r\nimport { reduce } from \"./reduce\"\r\nimport { UI, layout, geometry, Renderer } from \".\"\r\nimport * as reducer from './reducer'\r\nimport { Accumulator } from './reducer'\r\n\r\nexport const render = <AppEvent, R extends Renderer<AppEvent>>(renderer: R, ui: UI<AppEvent>): R => {\r\n    const { width, height } = renderer.size\r\n    renderer.clear()\r\n    const constraints = {\r\n        minWidth: 0,\r\n        maxWidth: width,\r\n        minHeight: 0,\r\n        maxHeight: height\r\n    }\r\n    const uiLayout = layout(ui, constraints, renderer.measureText)\r\n    const offsets = { x: 0, y: 0 }\r\n    const cameraStack = initCameraStack()\r\n    const uiGeometry = geometry(ui, uiLayout, offsets, cameraStack)\r\n    const { layers, clickHandlers, connections, idToWorldSpace } = reduce<AppEvent, Accumulator<AppEvent>>(ui, uiLayout, uiGeometry, reducer)\r\n    const batches = batchGeometry(layers, connections, idToWorldSpace)\r\n    renderer.cameras = cameraStack.cameras\r\n    renderer.clickHandlers = clickHandlers\r\n    for (const batch of batches) renderer.draw(batch)\r\n    return renderer\r\n}\r\n","import { Batch } from \"./batch_geometry\";\r\nimport { Font, TextMeasurements, Size } from \".\";\r\nimport { Matrix3x3, projection } from \"../linear_algebra/matrix3x3\";\r\nimport { Document, WebGL2Context, Buffer, UniformLocation, Shader, Program, Canvas, Texture, Window } from \"./dom\";\r\nimport { ClickHandlers } from \"./gather_on_click_handlers\";\r\n\r\ninterface Attribute {\r\n    location: number\r\n    buffer: Buffer\r\n}\r\n\r\ninterface Attributes {\r\n    vertices: Attribute\r\n    vertexIndices: Buffer\r\n    colors: Attribute\r\n    textureCoordinates: Attribute\r\n    cameraIndex: Attribute\r\n}\r\n\r\ninterface Uniforms {\r\n    projection: UniformLocation\r\n    texture: UniformLocation\r\n    cameras: UniformLocation\r\n}\r\n\r\ninterface ProgramData {\r\n    vertexShader: Shader\r\n    fragmentShader: Shader\r\n    program: Program\r\n    attributes: Attributes\r\n    uniforms: Uniforms\r\n}\r\n\r\ntype DevicePixelRatio = number\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\nconst createTextMeasurements = (document: Document, gl: WebGL2Context, font: Font, dpr: DevicePixelRatio) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(font.size * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * dpr\r\n    canvas.height = size * dpr\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(dpr, dpr)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = `${font.size}px ${font.family}`\r\n    ctx.fillStyle = 'white'\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const height = font.size\r\n    const widths: number[] = []\r\n    const textureCoordinates: number[][] = []\r\n    for (let i = 0; i < totalCells; ++i) {\r\n        const c = String.fromCharCode(i)\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        widths.push(width)\r\n        const x0 = x / size\r\n        const x1 = (x + width) / size\r\n        const y0 = y / size\r\n        const y1 = (y + height) / size\r\n        textureCoordinates.push([\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        ])\r\n    }\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas\r\n    )\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return { widths, textureCoordinates, texture }\r\n}\r\n\r\nconst mapString = <T>(str: string, f: (c: string, i: number) => T): Array<T> => {\r\n    let result = []\r\n    for (let i = 0; i < str.length; ++i) {\r\n        result.push(f(str[i], i))\r\n    }\r\n    return result\r\n}\r\n\r\nexport class WebGL2Renderer<AppEvent> {\r\n    _size: Size\r\n    _cameras: Matrix3x3[]\r\n\r\n    constructor(\r\n        public window: Window,\r\n        public document: Document,\r\n        public canvas: Canvas,\r\n        public gl: WebGL2Context,\r\n        public program: ProgramData,\r\n        public textures: Texture[],\r\n        public textMeasurementsCache: Map<string, TextMeasurements>,\r\n        public clickHandlers: ClickHandlers<AppEvent>,\r\n        public dispatch: (event: AppEvent) => void\r\n    ) { }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    set size(size: Size) {\r\n        const { gl, program, window } = this\r\n        const { uniforms } = program\r\n        const { canvas } = gl\r\n        gl.uniformMatrix3fv(uniforms.projection, /*transpose*/true, projection(size))\r\n        canvas.width = size.width * window.devicePixelRatio\r\n        canvas.height = size.height * window.devicePixelRatio\r\n        canvas.style.width = `${size.width}px`\r\n        canvas.style.height = `${size.height}px`\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this._size = size\r\n    }\r\n\r\n    get size() { return this._size }\r\n\r\n    set cameras(cameras: Matrix3x3[]) {\r\n        const { gl, program } = this\r\n        const { uniforms } = program\r\n        const data: number[] = []\r\n        for (const camera of cameras) data.push(...camera)\r\n        gl.uniformMatrix3fv(uniforms.cameras, /*transpose*/true, data)\r\n        this._cameras = cameras\r\n    }\r\n\r\n    get cameras() { return this._cameras }\r\n\r\n    draw = ({ triangles, lines }: Batch) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        {\r\n            const { vertices, colors, vertexIndices, textureCoordinates, textureIndex, cameraIndex } = triangles\r\n            if (vertices.length !== 0) {\r\n                const texture = textures[textureIndex]\r\n                gl.bindTexture(gl.TEXTURE_2D, texture)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndex), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.vertexIndices)\r\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n                gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n            }\r\n        }\r\n        {\r\n            const { vertices, colors } = lines\r\n            if (vertices.length !== 0) {\r\n                const texture = textures[0]\r\n                const count = vertices.length / 2\r\n                gl.bindTexture(gl.TEXTURE_2D, texture)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(Array(count * 2).fill(0)), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(Array(count).fill(0)), gl.STATIC_DRAW)\r\n                gl.drawArrays(gl.LINES, /*first*/0, count)\r\n            }\r\n        }\r\n    }\r\n\r\n    getTextureMeasurements = (font: Font, dpr: DevicePixelRatio) => {\r\n        const { document, gl } = this\r\n        const key = `${dpr} ${font.size} ${font.family}`\r\n        const measurements = this.textMeasurementsCache.get(key)\r\n        if (measurements) return measurements\r\n        const { texture, widths, textureCoordinates } = createTextMeasurements(document, gl, font, dpr)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newMeasurements = { widths, textureIndex, textureCoordinates }\r\n        this.textMeasurementsCache.set(key, newMeasurements)\r\n        return newMeasurements\r\n    }\r\n\r\n    measureText = (font: Font, str: string) => {\r\n        const { window } = this\r\n        const dpr = window.devicePixelRatio\r\n        const { widths, textureIndex, textureCoordinates } = this.getTextureMeasurements(font, dpr)\r\n        const indices = mapString(str, c => c.charCodeAt(0))\r\n        return {\r\n            widths: indices.map(i => widths[i]),\r\n            textureIndex,\r\n            textureCoordinates: indices.map(i => textureCoordinates[i]),\r\n        }\r\n    }\r\n}\r\n\r\nconst createVertexShader = (gl: WebGL2Context, attributes: Attributes): Shader => {\r\n    const { vertices, colors, textureCoordinates, cameraIndex } = attributes\r\n    const vertexShaderSource = `#version 300 es\r\n  uniform mat3 u_projection;\r\n  uniform mat3 u_cameras[8];\r\n\r\n  layout(location = ${vertices.location}) in vec2 a_vertex;\r\n  layout(location = ${colors.location}) in vec4 a_color;\r\n  layout(location = ${textureCoordinates.location}) in vec2 a_textureCoordinates;\r\n  layout(location = ${cameraIndex.location}) in uint a_cameraIndex;\r\n\r\n  out vec4 v_color;\r\n  out vec2 v_textureCoordinates;\r\n\r\n  void main() {\r\n    mat3 camera = u_cameras[a_cameraIndex];\r\n    mat3 transform = u_projection * inverse(camera);\r\n    gl_Position = vec4((transform * vec3(a_vertex, 1)).xy, 0, 1);\r\n    v_color = a_color / 255.0;\r\n    v_textureCoordinates = a_textureCoordinates;\r\n  }\r\n  `\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n    gl.shaderSource(vertexShader, vertexShaderSource)\r\n    gl.compileShader(vertexShader)\r\n    return vertexShader\r\n}\r\n\r\nconst createFragmentShader = (gl: WebGL2Context): Shader => {\r\n    const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec4 v_color;\r\n  in vec2 v_textureCoordinates;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  void main() {\r\n    fragColor = texture(u_texture, v_textureCoordinates) * v_color;\r\n  }\r\n  `\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n    gl.compileShader(fragmentShader)\r\n    return fragmentShader\r\n}\r\n\r\nconst bindVertices = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_vertex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindColors = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_color')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindTextureCoordinates = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_textureCoordinates')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindCameraIndex = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_cameraIndex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribIPointer(\r\n        location,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst createProgram = (gl: WebGL2Context): ProgramData => {\r\n    const attributes: Attributes = {\r\n        vertices: {\r\n            location: 0,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        colors: {\r\n            location: 1,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        textureCoordinates: {\r\n            location: 2,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        cameraIndex: {\r\n            location: 3,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        vertexIndices: gl.createBuffer()!\r\n    }\r\n    const vertexShader = createVertexShader(gl, attributes)\r\n    const fragmentShader = createFragmentShader(gl)\r\n    const program = gl.createProgram()!\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        console.log(gl.getShaderInfoLog(vertexShader))\r\n        console.log(gl.getShaderInfoLog(fragmentShader))\r\n    }\r\n    gl.useProgram(program)\r\n    const vertexArrayObject = gl.createVertexArray()!\r\n    gl.bindVertexArray(vertexArrayObject)\r\n    bindVertices(gl, program, attributes.vertices)\r\n    bindColors(gl, program, attributes.colors)\r\n    bindTextureCoordinates(gl, program, attributes.textureCoordinates)\r\n    bindCameraIndex(gl, program, attributes.cameraIndex)\r\n    const uniforms: Uniforms = {\r\n        projection: gl.getUniformLocation(program, 'u_projection')!,\r\n        texture: gl.getUniformLocation(program, 'u_texture')!,\r\n        cameras: gl.getUniformLocation(program, 'u_cameras')!\r\n    }\r\n    return {\r\n        vertexShader,\r\n        fragmentShader,\r\n        program,\r\n        attributes,\r\n        uniforms\r\n    }\r\n}\r\n\r\ninterface Parameters<AppEvent> {\r\n    width: number\r\n    height: number\r\n    document: Document\r\n    window: Window\r\n    dispatch?: (event: AppEvent) => void\r\n}\r\n\r\nexport const webGL2Renderer = <AppEvent>({ width, height, document, window, dispatch }: Parameters<AppEvent>): WebGL2Renderer<AppEvent> => {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.style.touchAction = 'none'\r\n    const gl = canvas.getContext('webgl2')!\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n    gl.depthMask(false)\r\n    gl.activeTexture(gl.TEXTURE0)\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n    gl.clearColor(0, 0, 0, 1)\r\n    const program = createProgram(gl)\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255])\r\n    )\r\n    const renderer = new WebGL2Renderer<AppEvent>(\r\n        window,\r\n        document,\r\n        canvas,\r\n        gl,\r\n        program,\r\n        [texture],\r\n        new Map(),\r\n        [],\r\n        dispatch ?? (() => { })\r\n    )\r\n    renderer.size = { width, height }\r\n    return renderer\r\n}","import { pointerDown } from \"./pointer_down\"\r\nimport { render } from \"./render\"\r\nimport { WebGL2Renderer, webGL2Renderer } from \"./webgl2\"\r\nimport { Pointer, UI } from \".\"\r\nimport { Document, Window, PointerEvent } from \"./dom\"\r\n\r\nexport const transformPointer = (p: PointerEvent): Pointer => ({\r\n    x: p.clientX,\r\n    y: p.clientY,\r\n    id: p.pointerId,\r\n})\r\n\r\nexport type Dispatch<AppEvent> = (event: AppEvent) => void\r\n\r\ntype View<State, AppEvent> = (state: State) => UI<AppEvent>\r\n\r\ninterface Milliseconds {\r\n    milliseconds: number\r\n}\r\n\r\ninterface Scheduled<AppEvent> {\r\n    after: Milliseconds\r\n    event: AppEvent\r\n}\r\n\r\nexport interface UpdateResult<State, AppEvent> {\r\n    state: State\r\n    render?: boolean\r\n    schedule?: Scheduled<AppEvent>[]\r\n    dispatch?: AppEvent[]\r\n}\r\n\r\ntype Update<State, AppEvent> = (state: State, event: AppEvent) => UpdateResult<State, AppEvent>\r\n\r\ninterface Properties<State, AppEvent> {\r\n    state: State\r\n    view: View<State, AppEvent>\r\n    update: Update<State, AppEvent>\r\n    window: Window\r\n    document: Document\r\n    requestAnimationFrame: (callback: () => void) => void\r\n    setTimeout: (callback: () => void, milliseconds: number) => void\r\n}\r\n\r\nexport const run = <State, AppEvent>(properties: Properties<State, AppEvent>): Dispatch<AppEvent> => {\r\n    let { state, view, update, window, document, requestAnimationFrame, setTimeout } = properties\r\n    let renderer = webGL2Renderer<AppEvent>({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        window,\r\n        document,\r\n    })\r\n    let renderQueued = false\r\n    const scheduleRender = () => {\r\n        if (!renderQueued) {\r\n            renderQueued = true\r\n            requestAnimationFrame(() => {\r\n                renderer = render(renderer, view(state))\r\n                renderQueued = false\r\n            })\r\n        }\r\n    }\r\n    const dispatch = (event: AppEvent) => {\r\n        const { state: newState, render, schedule, dispatch: dispatchEvents } = update(state, event)\r\n        state = newState\r\n        if (render) scheduleRender()\r\n        for (const { after, event } of schedule ?? []) {\r\n            const { milliseconds } = after\r\n            setTimeout(() => dispatch(event), milliseconds)\r\n        }\r\n        for (const event of dispatchEvents ?? []) dispatch(event)\r\n    }\r\n    renderer.dispatch = dispatch\r\n    document.body.appendChild(renderer.canvas)\r\n    document.addEventListener(\"pointerdown\", p => {\r\n        renderer = pointerDown<AppEvent, WebGL2Renderer<AppEvent>>(renderer, transformPointer(p))\r\n    })\r\n    window.addEventListener(\"resize\", () => {\r\n        renderer.size = { width: window.innerWidth, height: window.innerHeight }\r\n        scheduleRender()\r\n    })\r\n    scheduleRender()\r\n    return dispatch\r\n}\r\n","import { CrossAxisAlignment, MainAxisAlignment } from \"./ui/alignment\"\r\nimport { AppEvent, EventKind, update } from \"./event\"\r\nimport { identity } from \"./linear_algebra/matrix3x3\"\r\nimport { run, transformPointer } from \"./ui/run\"\r\nimport { Body, Finder, Input, InputTargetKind, Node, Output, State, Theme, VirtualKeyboardKind } from \"./state\"\r\nimport { text, stack, scene, row, container, column, Connection, UI } from './ui'\r\nimport { Document } from './ui/dom'\r\n\r\nconst spacer = (size: number): UI<AppEvent> =>\r\n    container({ width: size, height: size })\r\n\r\nconst intersperse = <T>(array: T[], seperator: T): T[] => {\r\n    const result = [array[0]]\r\n    for (const element of array.slice(1)) {\r\n        result.push(seperator, element)\r\n    }\r\n    return result\r\n}\r\n\r\nconst inputUi = (theme: Theme, { name, selected }: Input, nodeIndex: number, inputIndex: number): UI<AppEvent> =>\r\n    container({\r\n        onClick: {\r\n            kind: EventKind.CLICKED_INPUT,\r\n            inputPath: { nodeIndex: nodeIndex, inputIndex: inputIndex }\r\n        }\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            container({\r\n                id: `input ${nodeIndex} ${inputIndex}`,\r\n                width: 14,\r\n                height: 14,\r\n                color: selected ? theme.selectedInput : theme.input,\r\n            }),\r\n            spacer(4),\r\n            text(name)\r\n        ])\r\n    )\r\n\r\nconst inputsUi = (theme: Theme, inputs: Input[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            inputs.map((input, inputIndex) => inputUi(theme, input, nodeIndex, inputIndex)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\nconst outputUi = (theme: Theme, { name, selected }: Output, nodeIndex: number, outputIndex: number): UI<AppEvent> =>\r\n    container({\r\n        onClick: {\r\n            kind: EventKind.CLICKED_OUTPUT,\r\n            outputPath: { nodeIndex: nodeIndex, outputIndex: outputIndex }\r\n        }\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            container({\r\n                id: `output ${nodeIndex} ${outputIndex}`,\r\n                width: 14,\r\n                height: 14,\r\n                color: selected ? theme.selectedInput : theme.input,\r\n            }),\r\n        ])\r\n    )\r\n\r\n\r\nconst outputsUi = (theme: Theme, outputs: Output[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            outputs.map((output, outputIndex) => outputUi(theme, output, nodeIndex, outputIndex)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\nconst numberUi = (theme: Theme, body: Body, nodeIndex: number): UI<AppEvent> =>\r\n    container({\r\n        color: body.editing ? theme.selectedInput : theme.background,\r\n        padding: 5,\r\n        onClick: {\r\n            kind: EventKind.CLICKED_NUMBER,\r\n            nodeIndex\r\n        }\r\n    },\r\n        text(body.value.toString()))\r\n\r\nconst nodeUi = (theme: Theme, { name, x, y, inputs, body, outputs }: Node, index: number): UI<AppEvent> => {\r\n    const rowEntries: UI<AppEvent>[] = []\r\n    if (inputs.length) rowEntries.push(inputsUi(theme, inputs, index))\r\n    if (inputs.length && outputs.length) rowEntries.push(spacer(15))\r\n    if (body !== undefined) rowEntries.push(numberUi(theme, body, index), spacer(15))\r\n    if (outputs.length) rowEntries.push(outputsUi(theme, outputs, index))\r\n    return container(\r\n        {\r\n            color: theme.node,\r\n            padding: 4,\r\n            x, y,\r\n            onClick: {\r\n                kind: EventKind.CLICKED_NODE,\r\n                index: index\r\n            }\r\n        },\r\n        column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            row(rowEntries)\r\n        ])\r\n    )\r\n}\r\n\r\nconst finder = ({ search, options }: Finder, theme: Theme): UI<AppEvent> =>\r\n    column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n        container({ height: 10 }),\r\n        container({ color: theme.node, padding: 4 },\r\n            column([\r\n                container({ color: theme.background, width: 300, padding: 4 },\r\n                    text({ color: theme.input, size: 24 }, search.length ? search : \"Search ...\")),\r\n                container({ width: 10, height: 10 }),\r\n                ...options.map((option, i) =>\r\n                    container<AppEvent>({\r\n                        padding: 4,\r\n                        onClick: {\r\n                            kind: EventKind.CLICKED_FINDER_OPTION,\r\n                            option\r\n                        }\r\n                    },\r\n                        text({\r\n                            size: 18,\r\n                            color: i == 0 ? theme.input : { red: 255, green: 255, blue: 255, alpha: 255 }\r\n                        }, option)\r\n                    )\r\n                )\r\n            ])\r\n        )\r\n    ])\r\n\r\nconst virtualKey = (key: string): UI<AppEvent> =>\r\n    container({\r\n        padding: 10,\r\n        onClick: {\r\n            kind: EventKind.VIRTUAL_KEYDOWN,\r\n            key\r\n        }\r\n    }, text({ size: 24 }, key))\r\n\r\nconst virtualKeys = (keys: string[]) =>\r\n    row(keys.map(c => virtualKey(c)))\r\n\r\nconst alphabeticVirtualKeyboard = (theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.SPACE_BETWEEN }, [\r\n            container({ padding: 4, color: theme.node },\r\n                column([\r\n                    virtualKeys(['1', '2', '3', '4', '5']),\r\n                    virtualKeys(['q', 'w', 'e', 'r', 't']),\r\n                    virtualKeys(['a', 's', 'd', 'f', 'g']),\r\n                    virtualKeys(['z', 'x', 'c', 'v']),\r\n                    virtualKeys(['sft', 'space']),\r\n                ])\r\n            ),\r\n            container({ padding: 4, color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(['6', '7', '8', '9', '0']),\r\n                    virtualKeys(['y', 'u', 'i', 'o', 'p']),\r\n                    virtualKeys(['h', 'j', 'k', 'l']),\r\n                    virtualKeys(['b', 'n', 'm', 'del']),\r\n                    virtualKeys(['space', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\nconst numericVirtualKeyboard = (theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n            container({ padding: 4, color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(['1', '2', '3', '4']),\r\n                    virtualKeys(['5', '6', '7', '8']),\r\n                    virtualKeys(['9', '0', 'del']),\r\n                    virtualKeys(['.', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\nconst virtualKeyboard = (theme: Theme, kind: VirtualKeyboardKind) => {\r\n    switch (kind) {\r\n        case VirtualKeyboardKind.ALPHABETIC: return alphabeticVirtualKeyboard(theme)\r\n        case VirtualKeyboardKind.NUMERIC: return numericVirtualKeyboard(theme)\r\n    }\r\n}\r\n\r\n\r\nconst view = (state: State): UI<AppEvent> => {\r\n    const nodes: UI<AppEvent>[] = []\r\n    state.graph.nodes.forEach((node, i) => {\r\n        if (i !== state.draggedNode) nodes.push(nodeUi(state.theme, node, i))\r\n    })\r\n    if (state.draggedNode !== null) {\r\n        const i = state.draggedNode\r\n        nodes.push(nodeUi(state.theme, state.graph.nodes[i], i))\r\n    }\r\n    const connections: Connection[] = state.graph.edges.map(({ input, output }) => ({\r\n        from: `output ${output.nodeIndex} ${output.outputIndex}`,\r\n        to: `input ${input.nodeIndex} ${input.inputIndex}`,\r\n        color: state.theme.connection\r\n    }))\r\n    const stacked: UI<AppEvent>[] = [\r\n        container({ color: state.theme.background, onClick: { kind: EventKind.CLICKED_BACKGROUND } }),\r\n        scene({ camera: state.camera, children: nodes, connections }),\r\n    ]\r\n    if (state.finder.show) stacked.push(finder(state.finder, state.theme))\r\n    if (state.virtualKeyboard.show) stacked.push(virtualKeyboard(state.theme, state.virtualKeyboard.kind))\r\n    return stack(stacked)\r\n}\r\n\r\nconst initialState: State = {\r\n    graph: {\r\n        nodes: [\r\n            {\r\n                name: \"Number\",\r\n                inputs: [],\r\n                body: { value: 5, editing: false },\r\n                outputs: [\r\n                    { name: \"out\", selected: false, edgeIndices: [0] },\r\n                ],\r\n                x: 25,\r\n                y: 25\r\n            },\r\n            {\r\n                name: \"Number\",\r\n                inputs: [],\r\n                body: { value: 10, editing: false },\r\n                outputs: [\r\n                    { name: \"out\", selected: false, edgeIndices: [1] },\r\n                ],\r\n                x: 25,\r\n                y: 100\r\n            },\r\n            {\r\n                name: \"Add\",\r\n                inputs: [\r\n                    { name: \"x\", selected: false, edgeIndices: [0] },\r\n                    { name: \"y\", selected: false, edgeIndices: [1] }\r\n                ],\r\n                outputs: [\r\n                    { name: \"out\", selected: false, edgeIndices: [2] },\r\n                ],\r\n                x: 150,\r\n                y: 50\r\n            },\r\n            {\r\n                name: \"Number\",\r\n                inputs: [],\r\n                body: { value: 15, editing: false },\r\n                outputs: [\r\n                    { name: \"out\", selected: false, edgeIndices: [3] },\r\n                ],\r\n                x: 175,\r\n                y: 150\r\n            },\r\n            {\r\n                name: \"Divide\",\r\n                inputs: [\r\n                    { name: \"x\", selected: false, edgeIndices: [2] },\r\n                    { name: \"y\", selected: false, edgeIndices: [3] }\r\n                ],\r\n                outputs: [\r\n                    { name: \"out\", selected: false, edgeIndices: [4] },\r\n                ],\r\n                x: 350,\r\n                y: 50\r\n            },\r\n            {\r\n                name: \"Log\",\r\n                inputs: [\r\n                    { name: \"value\", selected: false, edgeIndices: [4] },\r\n                ],\r\n                outputs: [],\r\n                x: 550,\r\n                y: 50\r\n            },\r\n        ],\r\n        edges: [\r\n            {\r\n                output: { nodeIndex: 0, outputIndex: 0 },\r\n                input: { nodeIndex: 2, inputIndex: 0 },\r\n            },\r\n            {\r\n                output: { nodeIndex: 1, outputIndex: 0 },\r\n                input: { nodeIndex: 2, inputIndex: 1 },\r\n            },\r\n            {\r\n                output: { nodeIndex: 2, outputIndex: 0 },\r\n                input: { nodeIndex: 4, inputIndex: 0 },\r\n            },\r\n            {\r\n                output: { nodeIndex: 3, outputIndex: 0 },\r\n                input: { nodeIndex: 4, inputIndex: 1 },\r\n            },\r\n            {\r\n                output: { nodeIndex: 4, outputIndex: 0 },\r\n                input: { nodeIndex: 5, inputIndex: 0 },\r\n            }\r\n        ]\r\n    },\r\n    zooming: false,\r\n    dragging: false,\r\n    draggedNode: null,\r\n    pointers: [],\r\n    pointerDistance: 0,\r\n    pointerCenter: [0, 0],\r\n    camera: identity(),\r\n    selectedOutput: null,\r\n    selectedInput: null,\r\n    theme: {\r\n        background: { red: 2, green: 22, blue: 39, alpha: 255 },\r\n        node: { red: 41, green: 95, blue: 120, alpha: 255 },\r\n        input: { red: 188, green: 240, blue: 192, alpha: 255 },\r\n        selectedInput: { red: 175, green: 122, blue: 208, alpha: 255 },\r\n        connection: { red: 255, green: 255, blue: 255, alpha: 255 },\r\n    },\r\n    potentialDoubleClick: false,\r\n    nodePlacementLocation: { x: 0, y: 0 },\r\n    finder: {\r\n        search: '',\r\n        options: [],\r\n        show: false\r\n    },\r\n    virtualKeyboard: {\r\n        show: false,\r\n        kind: VirtualKeyboardKind.ALPHABETIC\r\n    },\r\n    inputTarget: { kind: InputTargetKind.NONE },\r\n    operations: {\r\n        \"Number\": {\r\n            name: \"Number\",\r\n            inputs: [],\r\n            body: 0,\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Add\": {\r\n            name: \"Add\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Subtract\": {\r\n            name: \"Subtract\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Multiply\": {\r\n            name: \"Multiply\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Divide\": {\r\n            name: \"Divide\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Equal\": {\r\n            name: \"Equal\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Less Than\": {\r\n            name: \"Less Than\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Log\": {\r\n            name: \"Log\",\r\n            inputs: [\"value\"],\r\n            outputs: []\r\n        }\r\n    }\r\n}\r\n\r\nconst dispatch = run({\r\n    state: initialState,\r\n    view,\r\n    update,\r\n    window,\r\n    document: document as Document,\r\n    requestAnimationFrame,\r\n    setTimeout\r\n})\r\n\r\nif (typeof PointerEvent.prototype.getCoalescedEvents === 'function') {\r\n    document.addEventListener('pointermove', (e) => {\r\n        e.getCoalescedEvents().forEach(p => {\r\n            dispatch({\r\n                kind: EventKind.POINTER_MOVE,\r\n                pointer: transformPointer(p)\r\n            })\r\n        })\r\n    })\r\n} else {\r\n    document.addEventListener('pointermove', p =>\r\n        dispatch({\r\n            kind: EventKind.POINTER_MOVE,\r\n            pointer: transformPointer(p)\r\n        })\r\n    )\r\n}\r\n\r\ndocument.addEventListener(\"pointerdown\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_DOWN,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener(\"pointerup\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_UP,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener('wheel', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.WHEEL,\r\n        x: e.clientX,\r\n        y: e.clientY,\r\n        deltaY: e.deltaY,\r\n    })\r\n}, { passive: false })\r\n\r\ndocument.addEventListener('contextmenu', e => {\r\n    e.preventDefault()\r\n})\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    document.body.requestFullscreen()\r\n})\r\n\r\ndocument.addEventListener('keydown', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.KEYDOWN,\r\n        key: e.key\r\n    })\r\n})"],"names":["$9b5b1345df3acfe9$export$6595504a60e1f77c","MainAxisAlignment1","$9b5b1345df3acfe9$export$66a3248d846611ce","CrossAxisAlignment1","$f4c0df53f29f413e$export$fad298d038a96a64","haystack","needle","haystackIndex","needleIndex","length","n","toLowerCase","$2a9d6d4b688c9d90$export$b74061472fe7c07","width","height","$2a9d6d4b688c9d90$export$d73ee8ef04f5226a","x","y","$2a9d6d4b688c9d90$export$dcdf75081b88279d","$2a9d6d4b688c9d90$export$84b43e5e8429f175","matrices","head","tail","reduce","a","b","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","$2a9d6d4b688c9d90$export$dbb85424dca880d0","b1","b2","b3","$2a9d6d4b688c9d90$export$70ae2c07e401031b","idet","$9a57707492d0f60d$export$f24224f1c91d8156","c","Math","sqrt","pow","$0b89d474933103bc$export$52710c6013234220","VirtualKeyboardKind1","$0b89d474933103bc$export$c59a831e29c6eb0","InputTargetKind1","$d7336fab2a6e7c56$export$50508d7849040d51","EventKind1","$d7336fab2a6e7c56$var$updateFinderOptions","state","finder","options","Object","keys","operations","filter","item","search","$d7336fab2a6e7c56$export$a72e97d68c48a4a","show","virtualKeyboard","kind","ALPHABETIC","inputTarget","FINDER","potentialDoubleClick","$d7336fab2a6e7c56$var$closeFinder","NONE","$d7336fab2a6e7c56$var$insertOperationFromFinder","name","operation","_","camera","nodePlacementLocation","graph","nodes","push","inputs","map","input","selected","edgeIndices","outputs","output","body","undefined","value","editing","$3aa357479a49b085$var$inWorldSpace","x0","y0","x1","y1","pointer","$3aa357479a49b085$export$e6e29dfeb5ef19c1","renderer","i","clickHandlers","onClick","worldSpace","dispatch","$b6ca04fcd3e6f123$var$newBatch","textureIndex","triangles","vertices","colors","vertexIndices","textureCoordinates","cameraIndex","lines","$b6ca04fcd3e6f123$export$2c575fa1d20488bd","ts","from","to","offset","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","first","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$b6ca04fcd3e6f123$export$1e96939139b396da","layers","connections","idToWorldSpace","start","stop","num","step","Array","$b6ca04fcd3e6f123$var$linspace","batches","batch","batchTextureIndex","toString","forEach","layer","z","geometries","entries","parseInt","geometry","index","cs","scale","color","p","red","green","blue","alpha","samples","$f82cd7e5241fa075$export$eea5d8c438131c40","cameraStack","cameras","stack","transform","$f82cd7e5241fa075$export$3c901611250dc02c","slice","$f82cd7e5241fa075$export$d14f39ee728c5da5","pop","$f82cd7e5241fa075$export$86ad693455315c84","_0","_1","$fd89ce3675dee463$export$83d5419fac007c8c","ui","constraints","measureText","childLayout","$1e3ba84e9ce044db$export$b3219800bda33a1f","child","size","maxWidth","maxHeight","$fd89ce3675dee463$export$efb2657d225c129a","layout1","childOffset","$1e3ba84e9ce044db$export$42a7622cbf932bb","$fd89ce3675dee463$export$edc8554b50279bf4","layout2","geometry1","$1e3ba84e9ce044db$export$df3f009e3d155b20","$518015a6e3cc694d$export$4e0c71f277ca26b3","args","properties","children","$1e3ba84e9ce044db$export$8984f19c96d30531","COLUMN","mainAxisAlignment","START","crossAxisAlignment","$518015a6e3cc694d$export$f8ce731bdfd45dc7","initial","totalChildHeight","result","acc","max","$518015a6e3cc694d$export$5a1548308f4d4391","freeSpaceY","CENTER","END","SPACE_EVENLY","SPACE_BETWEEN","addYStart","addYCenter","addYEnd","addYSpaceEvenly","addYSpaceBetween","addY","offsetXStart","offsetXCenter","offsetXEnd","offsetX","childGeometry","$518015a6e3cc694d$export$9f45e883ef2b80c0","layout","nextZ","$8a99d960732a172f$var$transformPadding","padding","top","right","bottom","left","$8a99d960732a172f$export$34e0f9847d4c02dd","id","CONTAINER","$8a99d960732a172f$export$a4e80cd8d85917bb","$8a99d960732a172f$export$7c88ce694bad6320","fill","$8a99d960732a172f$export$6f2a7b3ebfc2cfa0","$9e4edab979495f0d$export$120ff0929b202a6d","ROW","$9e4edab979495f0d$export$4076779b9674714b","totalChildWidth","$9e4edab979495f0d$export$90e65e88c1393562","freeSpaceX","addXStart","addXCenter","addXEnd","addXSpaceEvenly","addXSpaceBetween","addX","offsetYStart","offsetYCenter","offsetYEnd","offsetY","$9e4edab979495f0d$export$1152b7e6303a2c68","$864b15efd9f5e1a7$export$33aff30b8aa0934e","SCENE","$864b15efd9f5e1a7$export$9e03d30774b30061","$864b15efd9f5e1a7$export$7a4266c2aa024d65","$864b15efd9f5e1a7$export$7b2ec4d82804e47f","entry","$d380360335f9e6c0$export$b008c3d2ea57ca56","$d380360335f9e6c0$export$218db93a2e8965d","$d380360335f9e6c0$export$13c8b19be38670b3","$2d5075f154be1094$export$6f093cfa640b7166","str","TEXT","font","family","$2d5075f154be1094$export$801f12fcd9ba2788","measurements","width1","widths","$2d5075f154be1094$var$vertices","$2d5075f154be1094$var$colors","$2d5075f154be1094$var$vertexIndices","$2d5075f154be1094$export$f543e72c4af89828","textLayout1","flat","$2d5075f154be1094$export$3d02b268fb89b14d","UIKind1","STACK","$e364cd7af35feef1$export$533b26079ad0b4b","reducer","accumulator","combine","$cce0295d6d688136$export$1be1fc439b849fdf","handlers","needed","$3d1ad3352b3daee3$export$1be1fc439b849fdf","lookup","$0c1fb5dcb73854b4$export$1be1fc439b849fdf","entryGeometry","newGeometry","$d33a6e3c77e8a82f$export$1be1fc439b849fdf","$8fb27619ef3752ba$export$59ff82fc918bd7e3","$8fb27619ef3752ba$export$1be1fc439b849fdf","$cbb8ce85e6a0780d$export$b3890eb0ae9dca99","clear","uiLayout","minWidth","minHeight","uiGeometry","$8fb27619ef3752ba$exports","draw","$2561bfce8bbd3fa5$export$ce2766bf4a8721d3","constructor","window1","document1","canvas","gl1","program1","textures1","textMeasurementsCache","window","document","gl","program","textures","this","COLOR_BUFFER_BIT","attributes","texture","bindTexture","TEXTURE_2D","bindBuffer","ARRAY_BUFFER","buffer","bufferData","Float32Array","STATIC_DRAW","Uint8Array","ELEMENT_ARRAY_BUFFER","Uint16Array","drawElements","TRIANGLES","UNSIGNED_SHORT","count","drawArrays","LINES","getTextureMeasurements","dpr","key","get","createElement","ctx","getContext","rows","current","$2561bfce8bbd3fa5$var$nearestPowerOfTwo","cellSize","style","textAlign","textBaseline","fillStyle","clearRect","String","fromCharCode","metric","ceil","floor","fillText","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","$2561bfce8bbd3fa5$var$createTextMeasurements","newMeasurements","set","devicePixelRatio","indices","f","$2561bfce8bbd3fa5$var$mapString","charCodeAt","uniforms","uniformMatrix3fv","projection","viewport","_size","data","_cameras","location","createBuffer","vertexShader","vertexShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","$2561bfce8bbd3fa5$var$createVertexShader","fragmentShader","FRAGMENT_SHADER","$2561bfce8bbd3fa5$var$createFragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","log","getShaderInfoLog","useProgram","vertexArrayObject","createVertexArray","bindVertexArray","FLOAT","$2561bfce8bbd3fa5$var$bindVertices","$2561bfce8bbd3fa5$var$bindColors","bindAttribLocation","enableVertexAttribArray","vertexAttribPointer","$2561bfce8bbd3fa5$var$bindTextureCoordinates","vertexAttribIPointer","getUniformLocation","$13904534c2e00d0c$export$479aac53993fd71","clientX","clientY","pointerId","$b4e14b6b8da86996$var$spacer","$b4e14b6b8da86996$var$intersperse","array","seperator","element","$b4e14b6b8da86996$var$inputsUi","theme","nodeIndex","inputIndex","CLICKED_INPUT","inputPath","selectedInput","$b4e14b6b8da86996$var$inputUi","$b4e14b6b8da86996$var$outputsUi","outputIndex","CLICKED_OUTPUT","outputPath","$b4e14b6b8da86996$var$outputUi","$b4e14b6b8da86996$var$nodeUi","rowEntries","background","CLICKED_NUMBER","$b4e14b6b8da86996$var$numberUi","node","CLICKED_NODE","$b4e14b6b8da86996$var$virtualKeys","$b4e14b6b8da86996$var$virtualKey","VIRTUAL_KEYDOWN","$b4e14b6b8da86996$var$virtualKeyboard","$b4e14b6b8da86996$var$alphabeticVirtualKeyboard","NUMERIC","$b4e14b6b8da86996$var$numericVirtualKeyboard","$b4e14b6b8da86996$var$dispatch","view","update","requestAnimationFrame","setTimeout","$2561bfce8bbd3fa5$export$94781114c991ae1c","innerWidth","innerHeight","renderQueued","scheduleRender","event","newState","render","render1","schedule","dispatchEvents","after","event1","milliseconds","event2","appendChild","addEventListener","edges","zooming","dragging","draggedNode","pointers","pointerDistance","pointerCenter","selectedOutput","connection","Number","Add","Subtract","Multiply","Divide","Equal","Log","stacked","CLICKED_BACKGROUND","option","CLICKED_FINDER_OPTION","$b4e14b6b8da86996$var$finder","POINTER_DOWN","DOUBLE_CLICK","DOUBLE_CLICK_TIMEOUT","$d7336fab2a6e7c56$var$pointerDown","POINTER_UP","findIndex","splice","$d7336fab2a6e7c56$var$pointerUp","POINTER_MOVE","rerender","dx","dy","scaling","p0","p1","x2","y2","distance","previousDistance","previousCenter","move","zoom","moveBack","$d7336fab2a6e7c56$var$pointerMove","$d7336fab2a6e7c56$var$clickedNode","WHEEL","deltaY","$d7336fab2a6e7c56$var$wheel","edgeIndex","$d7336fab2a6e7c56$var$clickedInput","$d7336fab2a6e7c56$var$clickedOutput","$d7336fab2a6e7c56$var$doubleClickTimeout","$d7336fab2a6e7c56$var$doubleClick","KEYDOWN","NUMBER","newValue","parseFloat","$d7336fab2a6e7c56$var$keyDown","$d7336fab2a6e7c56$var$virtualKeyDown","$d7336fab2a6e7c56$var$clickedFinderOption","$d7336fab2a6e7c56$var$clickedNumber","$d7336fab2a6e7c56$var$clickedBackground","PointerEvent","prototype","getCoalescedEvents","e","preventDefault","passive","requestFullscreen"],"version":3,"file":"index.577657a1.js.map"}