{"mappings":"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","sources":["src/fuzzy_find.ts","src/linear_algebra/matrix3x3.ts","src/linear_algebra/vector3.ts","src/graph/update.ts","src/state.ts","src/event.ts","src/ui/pointer_down.ts","src/ui/batch_geometry.ts","src/ui/camera_stack.ts","src/ui/center.ts","src/ui/alignment.ts","src/ui/column.ts","src/ui/container.ts","src/ui/row.ts","src/ui/scene.ts","src/ui/stack.ts","src/ui/text.ts","src/ui/index.ts","src/ui/reduce.ts","src/ui/gather_on_click_handlers.ts","src/ui/id_to_world_space.ts","src/ui/layer_geometry.ts","src/ui/gather_connections.ts","src/ui/reducer.ts","src/ui/render.ts","src/ui/webgl2.ts","src/ui/run.ts","src/ui/view/context_menu.ts","src/ui/view/index.ts","src/index.ts","src/graph/model.ts"],"sourcesContent":["export interface FuzzyFind {\r\n    haystack: string\r\n    needle: string\r\n}\r\n\r\nexport const fuzzyFind = ({ haystack, needle }: FuzzyFind): boolean => {\r\n    let haystackIndex = 0\r\n    let needleIndex = 0\r\n    while (needleIndex < needle.length) {\r\n        const n = needle[needleIndex].toLowerCase()\r\n        while (haystackIndex < haystack.length && n !== haystack[haystackIndex].toLowerCase()) {\r\n            ++haystackIndex\r\n        }\r\n        if (haystackIndex === haystack.length) return false\r\n        ++needleIndex\r\n    }\r\n    return true\r\n}\r\n","import { Size } from \"../ui\"\r\nimport { Vector3 } from \"./vector3\"\r\n\r\nexport type Matrix3x3 = Readonly<number[]>\r\n\r\nexport const identity = (): Matrix3x3 => [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n]\r\n\r\nexport const projection = ({ width, height }: Size): Matrix3x3 => [\r\n    2 / width, 0, -1,\r\n    0, -2 / height, 1,\r\n    0, 0, 1\r\n]\r\n\r\nexport const translate = (x: number, y: number): Matrix3x3 => [\r\n    1, 0, x,\r\n    0, 1, y,\r\n    0, 0, 1\r\n]\r\n\r\nexport const scale = (x: number, y: number): Matrix3x3 => [\r\n    x, 0, 0,\r\n    0, y, 0,\r\n    0, 0, 1\r\n]\r\n\r\nexport const rotate = (radians: number): Matrix3x3 => {\r\n    const c = Math.cos(radians)\r\n    const s = Math.sin(radians)\r\n    return [\r\n        c, s, 0,\r\n        -s, c, 0,\r\n        0, 0, 1\r\n    ]\r\n}\r\n\r\nexport const multiplyMatrices = (...matrices: Matrix3x3[]) => {\r\n    const [head, ...tail] = matrices\r\n    return tail.reduce((a, b) => {\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return [\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ]\r\n    }, head)\r\n}\r\n\r\nexport const multiplyMatrixVector = (a: Matrix3x3, b: Vector3): Vector3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b1 = b[0]\r\n    const b2 = b[1]\r\n    const b3 = b[2]\r\n    const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n    const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n    const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n    return [c1, c2, c3]\r\n}\r\n\r\nexport const inverse = (a: Matrix3x3): Matrix3x3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b11 = a22 * a33 - a23 * a32\r\n    const b12 = a21 * a33 - a23 * a31\r\n    const b13 = a21 * a32 - a22 * a31\r\n    const b21 = a12 * a33 - a13 * a32\r\n    const b22 = a11 * a33 - a13 * a31\r\n    const b23 = a11 * a32 - a12 * a31\r\n    const b31 = a12 * a23 - a13 * a22\r\n    const b32 = a11 * a23 - a13 * a21\r\n    const b33 = a11 * a22 - a12 * a21\r\n    const det = a31 * b31 - a32 * b32 + a33 * b33\r\n    const idet = 1 / det\r\n    return [\r\n        idet * b11, idet * -b21, idet * b31,\r\n        idet * -b12, idet * b22, idet * -b32,\r\n        idet * b13, idet * -b23, idet * b33\r\n    ]\r\n}","export type Vector3 = number[]\r\n\r\nexport const length = ([a, b, c]: Vector3) =>\r\n    Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))","import { Body, Edge, GenerateUUID, Graph, Inputs, Node, Operation, Outputs, Position, UUID } from \"./model\"\r\n\r\ninterface AddNodeInputs {\r\n    graph: Graph\r\n    operation: Operation\r\n    position: Position\r\n    generateUUID: GenerateUUID\r\n}\r\n\r\ninterface AddNodeOutputs {\r\n    graph: Graph\r\n    node: UUID\r\n}\r\n\r\nexport const addNode = ({ graph, operation, position, generateUUID }: AddNodeInputs): AddNodeOutputs => {\r\n    const nodeUUID = generateUUID()\r\n    const inputs: Inputs = { ...graph.inputs }\r\n    const inputUUIDs = []\r\n    for (const name of operation.inputs) {\r\n        const uuid = generateUUID()\r\n        inputs[uuid] = {\r\n            uuid,\r\n            node: nodeUUID,\r\n            name\r\n        }\r\n        inputUUIDs.push(uuid)\r\n    }\r\n    const outputs: Outputs = { ...graph.outputs }\r\n    const outputUUIDs = []\r\n    for (const name of operation.outputs) {\r\n        const uuid = generateUUID()\r\n        outputs[uuid] = {\r\n            uuid,\r\n            node: nodeUUID,\r\n            name,\r\n            edges: []\r\n        }\r\n        outputUUIDs.push(uuid)\r\n    }\r\n    const node: Node = {\r\n        uuid: nodeUUID,\r\n        name: operation.name,\r\n        inputs: inputUUIDs,\r\n        outputs: outputUUIDs,\r\n        position\r\n    }\r\n    if (operation.body !== undefined) {\r\n        const body: Body = {\r\n            uuid: generateUUID(),\r\n            node: nodeUUID,\r\n            value: operation.body\r\n        }\r\n        return {\r\n            graph: {\r\n                ...graph,\r\n                nodes: { ...graph.nodes, [node.uuid]: { ...node, body: body.uuid } },\r\n                inputs,\r\n                outputs,\r\n                bodys: { ...graph.bodys, [body.uuid]: body }\r\n            },\r\n            node: nodeUUID\r\n        }\r\n    } else {\r\n        return {\r\n            graph: {\r\n                ...graph,\r\n                nodes: { ...graph.nodes, [node.uuid]: node },\r\n                inputs,\r\n                outputs\r\n            },\r\n            node: nodeUUID\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeNode = (graph: Graph, node: UUID): Graph => {\r\n    const nodes = { ...graph.nodes }\r\n    const removedNode = nodes[node]\r\n    delete nodes[node]\r\n    const edgeUUIDs: UUID[] = []\r\n    for (const input of removedNode.inputs) {\r\n        const edge = graph.inputs[input].edge\r\n        if (edge) edgeUUIDs.push(edge)\r\n    }\r\n    for (const output of removedNode.outputs) {\r\n        for (const edge of graph.outputs[output].edges) {\r\n            edgeUUIDs.push(edge)\r\n        }\r\n    }\r\n    const edges = { ...graph.edges }\r\n    const inputs = { ...graph.inputs }\r\n    const outputs = { ...graph.outputs }\r\n    for (const uuid of edgeUUIDs) {\r\n        const edge = edges[uuid]\r\n        const input = inputs[edge.input]\r\n        inputs[edge.input] = {\r\n            ...input,\r\n            edge: undefined\r\n        }\r\n        const output = outputs[edge.output]\r\n        outputs[edge.output] = {\r\n            ...output,\r\n            edges: output.edges.filter(e => e !== uuid)\r\n        }\r\n        delete edges[uuid]\r\n    }\r\n    for (const input of removedNode.inputs) delete inputs[input]\r\n    for (const output of removedNode.outputs) delete outputs[output]\r\n    return {\r\n        ...graph,\r\n        nodes,\r\n        edges,\r\n        inputs,\r\n        outputs\r\n    }\r\n}\r\n\r\nexport const removeInputEdge = (graph: Graph, input: UUID): Graph => {\r\n    const edgeUUID = graph.inputs[input].edge\r\n    if (edgeUUID) {\r\n        const edge = graph.edges[edgeUUID]\r\n        const output = graph.outputs[edge.output]\r\n        const outputs = {\r\n            ...graph.outputs,\r\n            [edge.output]: {\r\n                ...output,\r\n                edges: output.edges.filter(e => e !== edge.uuid)\r\n            }\r\n        }\r\n        const input = graph.inputs[edge.input]\r\n        const inputs = {\r\n            ...graph.inputs,\r\n            [edge.input]: {\r\n                ...input,\r\n                edge: undefined\r\n            }\r\n        }\r\n        const edges = { ...graph.edges }\r\n        delete edges[edgeUUID]\r\n        return {\r\n            ...graph,\r\n            outputs,\r\n            inputs,\r\n            edges\r\n        }\r\n    } else {\r\n        return graph\r\n    }\r\n}\r\n\r\n\r\nexport const removeOutputEdges = (graph: Graph, output: UUID): Graph => {\r\n    const edges = { ...graph.edges }\r\n    const inputs = { ...graph.inputs }\r\n    const outputs = { ...graph.outputs }\r\n    for (const uuid of graph.outputs[output].edges) {\r\n        const edge = graph.edges[uuid]\r\n        const input = inputs[edge.input]\r\n        inputs[edge.input] = {\r\n            ...input,\r\n            edge: undefined\r\n        }\r\n        const output = outputs[edge.output]\r\n        outputs[edge.output] = {\r\n            ...output,\r\n            edges: output.edges.filter(e => e !== uuid)\r\n        }\r\n        delete edges[uuid]\r\n    }\r\n    return {\r\n        ...graph,\r\n        outputs,\r\n        inputs,\r\n        edges\r\n    }\r\n}\r\n\r\n\r\ninterface AddEdgeInputs {\r\n    graph: Graph\r\n    input: UUID\r\n    output: UUID\r\n    generateUUID: GenerateUUID\r\n}\r\n\r\ninterface AddEdgeOutputs {\r\n    graph: Graph\r\n    edge: UUID\r\n}\r\n\r\nexport const addEdge = ({ graph, input, output, generateUUID }: AddEdgeInputs): AddEdgeOutputs => {\r\n    const edge: Edge = {\r\n        uuid: generateUUID(),\r\n        input,\r\n        output\r\n    }\r\n    const inputs: Inputs = {\r\n        ...graph.inputs,\r\n        [input]: {\r\n            ...graph.inputs[input],\r\n            edge: edge.uuid\r\n        }\r\n    }\r\n    const currentOutput = graph.outputs[output]\r\n    const outputs: Outputs = {\r\n        ...graph.outputs,\r\n        [output]: {\r\n            ...currentOutput,\r\n            edges: [...currentOutput.edges, edge.uuid]\r\n        }\r\n    }\r\n    return {\r\n        graph: {\r\n            ...graph,\r\n            inputs,\r\n            outputs,\r\n            edges: {\r\n                ...graph.edges,\r\n                [edge.uuid]: edge\r\n            }\r\n        },\r\n        edge: edge.uuid\r\n    }\r\n}\r\n\r\nexport const changeNodePosition = (graph: Graph, node: UUID, transform: (position: Position) => Position): Graph => {\r\n    const currentNode = graph.nodes[node]\r\n    return {\r\n        ...graph,\r\n        nodes: {\r\n            ...graph.nodes,\r\n            [node]: {\r\n                ...currentNode,\r\n                position: transform(currentNode.position)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport const changeBodyValue = (graph: Graph, body: UUID, transform: (value: number) => number): Graph => {\r\n    const currentBody = graph.bodys[body]\r\n    return {\r\n        ...graph,\r\n        bodys: {\r\n            ...graph.bodys,\r\n            [body]: {\r\n                ...currentBody,\r\n                value: transform(currentBody.value)\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { identity, Matrix3x3 } from \"./linear_algebra/matrix3x3\"\r\nimport { Pointer, Color } from \"./ui\"\r\nimport { Graph, Operations, Position, UUID, emptyGraph, GenerateUUID } from './graph/model'\r\nimport { addEdge, addNode, changeBodyValue } from \"./graph/update\"\r\n\r\nexport interface Theme {\r\n    readonly background: Color\r\n    readonly node: Color\r\n    readonly selectedNode: Color\r\n    readonly input: Color\r\n    readonly selectedInput: Color\r\n    readonly connection: Color\r\n}\r\n\r\nexport interface Finder {\r\n    readonly search: string\r\n    readonly show: boolean\r\n    readonly options: Readonly<string[]>\r\n    readonly openTimeout: boolean\r\n}\r\n\r\nexport enum VirtualKeyboardKind {\r\n    ALPHABETIC,\r\n    NUMERIC\r\n}\r\n\r\nexport interface VirtualKeyboard {\r\n    readonly show: boolean\r\n    readonly kind: VirtualKeyboardKind\r\n}\r\n\r\nexport enum InputTargetKind {\r\n    FINDER,\r\n    NUMBER,\r\n    NONE\r\n}\r\n\r\nexport interface FinderInputTarget {\r\n    readonly kind: InputTargetKind.FINDER\r\n}\r\n\r\nexport interface NumberInputTarget {\r\n    readonly kind: InputTargetKind.NUMBER,\r\n    readonly body: UUID\r\n}\r\n\r\nexport interface NoInputTarget {\r\n    readonly kind: InputTargetKind.NONE,\r\n}\r\n\r\nexport type InputTarget =\r\n    | FinderInputTarget\r\n    | NumberInputTarget\r\n    | NoInputTarget\r\n\r\n\r\nexport enum SelectedKind {\r\n    NODE,\r\n    INPUT,\r\n    OUTPUT,\r\n    BODY,\r\n    NONE\r\n}\r\n\r\nexport interface SelectedNode {\r\n    kind: SelectedKind.NODE\r\n    node: UUID\r\n}\r\n\r\n\r\nexport interface SelectedInput {\r\n    kind: SelectedKind.INPUT\r\n    input: UUID\r\n}\r\n\r\nexport interface SelectedOutput {\r\n    kind: SelectedKind.OUTPUT\r\n    output: UUID\r\n}\r\n\r\nexport interface SelectedBody {\r\n    kind: SelectedKind.BODY\r\n    body: UUID\r\n}\r\n\r\nexport interface SelectedNone {\r\n    kind: SelectedKind.NONE\r\n}\r\n\r\nexport type Selected =\r\n    | SelectedNode\r\n    | SelectedInput\r\n    | SelectedOutput\r\n    | SelectedBody\r\n    | SelectedNone\r\n\r\nexport interface State {\r\n    readonly graph: Graph\r\n    readonly nodeOrder: Readonly<UUID[]>\r\n    readonly zooming: boolean\r\n    readonly dragging: boolean\r\n    readonly pointers: Readonly<Pointer[]>\r\n    readonly pointerDistance: number\r\n    readonly pointerCenter: Position\r\n    readonly selected: Selected\r\n    readonly nodePlacementLocation: Position\r\n    readonly finder: Finder\r\n    readonly virtualKeyboard: VirtualKeyboard\r\n    readonly inputTarget: InputTarget\r\n    readonly camera: Readonly<Matrix3x3>\r\n    readonly operations: Readonly<Operations>\r\n    readonly theme: Theme\r\n}\r\n\r\nexport const emptyState = (): State => ({\r\n    graph: emptyGraph(),\r\n    nodeOrder: [],\r\n    zooming: false,\r\n    dragging: false,\r\n    pointers: [],\r\n    pointerDistance: 0,\r\n    pointerCenter: { x: 0, y: 0 },\r\n    camera: identity(),\r\n    selected: { kind: SelectedKind.NONE },\r\n    theme: {\r\n        background: { red: 2, green: 22, blue: 39, alpha: 255 },\r\n        node: { red: 41, green: 95, blue: 120, alpha: 255 },\r\n        selectedNode: { red: 23, green: 54, blue: 69, alpha: 255 },\r\n        input: { red: 188, green: 240, blue: 192, alpha: 255 },\r\n        selectedInput: { red: 175, green: 122, blue: 208, alpha: 255 },\r\n        connection: { red: 255, green: 255, blue: 255, alpha: 255 },\r\n    },\r\n    nodePlacementLocation: { x: 0, y: 0 },\r\n    finder: {\r\n        search: '',\r\n        options: [],\r\n        show: false,\r\n        openTimeout: false\r\n    },\r\n    virtualKeyboard: {\r\n        show: false,\r\n        kind: VirtualKeyboardKind.ALPHABETIC\r\n    },\r\n    inputTarget: { kind: InputTargetKind.NONE },\r\n    operations: {}\r\n})\r\n\r\nexport const demoState = (generateUUID: GenerateUUID): State => {\r\n    const state = {\r\n        ...emptyState(),\r\n        operations: {\r\n            \"Number\": {\r\n                name: \"Number\",\r\n                inputs: [],\r\n                body: 0,\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Add\": {\r\n                name: \"Add\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Subtract\": {\r\n                name: \"Subtract\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Multiply\": {\r\n                name: \"Multiply\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Divide\": {\r\n                name: \"Divide\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Equal\": {\r\n                name: \"Equal\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Less Than\": {\r\n                name: \"Less Than\",\r\n                inputs: [\"x\", \"y\"],\r\n                outputs: [\"out\"]\r\n            },\r\n            \"Print\": {\r\n                name: \"Print\",\r\n                inputs: [\"value\"],\r\n                outputs: []\r\n            }\r\n        }\r\n    }\r\n    const { graph: graph0, node: number0 } = addNode({\r\n        graph: state.graph,\r\n        operation: state.operations[\"Number\"],\r\n        position: { x: 25, y: 20 },\r\n        generateUUID\r\n    })\r\n    const graph1 = changeBodyValue(graph0, graph0.nodes[number0].body!, () => 10)\r\n    const { graph: graph2, node: number1 } = addNode({\r\n        graph: graph1,\r\n        operation: state.operations[\"Number\"],\r\n        position: { x: 55, y: 105 },\r\n        generateUUID\r\n    })\r\n    const graph3 = changeBodyValue(graph2, graph2.nodes[number1].body!, () => 25)\r\n    const { graph: graph4, node: add } = addNode({\r\n        graph: graph3,\r\n        operation: state.operations[\"Add\"],\r\n        position: { x: 175, y: 55 },\r\n        generateUUID\r\n    })\r\n    const { graph: graph5 } = addEdge({\r\n        graph: graph4,\r\n        input: graph4.nodes[add].inputs[0],\r\n        output: graph4.nodes[number0].outputs[0],\r\n        generateUUID\r\n    })\r\n    const { graph: graph6 } = addEdge({\r\n        graph: graph5,\r\n        input: graph5.nodes[add].inputs[1],\r\n        output: graph5.nodes[number1].outputs[0],\r\n        generateUUID\r\n    })\r\n    const { graph: graph7, node: number2 } = addNode({\r\n        graph: graph6,\r\n        operation: state.operations[\"Number\"],\r\n        position: { x: 225, y: 145 },\r\n        generateUUID\r\n    })\r\n    const graph8 = changeBodyValue(graph7, graph7.nodes[number2].body!, () => 5)\r\n    const { graph: graph9, node: div } = addNode({\r\n        graph: graph8,\r\n        operation: state.operations[\"Divide\"],\r\n        position: { x: 355, y: 75 },\r\n        generateUUID\r\n    })\r\n    const { graph: graph10 } = addEdge({\r\n        graph: graph9,\r\n        input: graph9.nodes[div].inputs[0],\r\n        output: graph9.nodes[add].outputs[0],\r\n        generateUUID\r\n    })\r\n    const { graph: graph11 } = addEdge({\r\n        graph: graph10,\r\n        input: graph10.nodes[div].inputs[1],\r\n        output: graph10.nodes[number2].outputs[0],\r\n        generateUUID\r\n    })\r\n    const { graph: graph12, node: print } = addNode({\r\n        graph: graph11,\r\n        operation: state.operations[\"Print\"],\r\n        position: { x: 535, y: 85 },\r\n        generateUUID\r\n    })\r\n    const { graph: graph13 } = addEdge({\r\n        graph: graph12,\r\n        input: graph12.nodes[print].inputs[0],\r\n        output: graph12.nodes[div].outputs[0],\r\n        generateUUID\r\n    })\r\n    return {\r\n        ...state,\r\n        graph: graph13,\r\n        nodeOrder: [number0, number1, add, number2, div, print]\r\n    }\r\n}","import { fuzzyFind } from \"./fuzzy_find\"\r\nimport { multiplyMatrices, multiplyMatrixVector, scale, translate } from \"./linear_algebra/matrix3x3\"\r\nimport { length } from \"./linear_algebra/vector3\"\r\nimport { UpdateResult } from \"./ui/run\"\r\nimport { InputTargetKind, SelectedKind, State, VirtualKeyboardKind } from \"./state\"\r\nimport { GenerateUUID, Operation, Position, UUID } from './graph/model'\r\nimport { Pointer } from \"./ui\"\r\nimport { addEdge, addNode, changeBodyValue, changeNodePosition, removeInputEdge, removeNode, removeOutputEdges } from \"./graph/update\"\r\n\r\nexport enum EventKind {\r\n    POINTER_MOVE,\r\n    POINTER_DOWN,\r\n    POINTER_UP,\r\n    CLICKED_NODE,\r\n    WHEEL,\r\n    CLICKED_INPUT,\r\n    CLICKED_OUTPUT,\r\n    OPEN_FINDER_TIMEOUT,\r\n    KEYDOWN,\r\n    VIRTUAL_KEYDOWN,\r\n    CLICKED_FINDER_OPTION,\r\n    CLICKED_NUMBER,\r\n    CLICKED_BACKGROUND,\r\n    DELETE_NODE,\r\n    DELETE_INPUT_EDGE,\r\n    DELETE_OUTPUT_EDGES,\r\n}\r\n\r\nexport interface PointerMove {\r\n    readonly kind: EventKind.POINTER_MOVE\r\n    readonly pointer: Pointer\r\n}\r\n\r\nexport interface PointerDown {\r\n    readonly kind: EventKind.POINTER_DOWN\r\n    readonly pointer: Pointer\r\n}\r\n\r\nexport interface PointerUp {\r\n    readonly kind: EventKind.POINTER_UP\r\n    readonly pointer: Pointer\r\n}\r\n\r\nexport interface ClickedNode {\r\n    readonly kind: EventKind.CLICKED_NODE\r\n    readonly node: UUID\r\n}\r\n\r\nexport interface Wheel {\r\n    readonly kind: EventKind.WHEEL\r\n    readonly position: Position\r\n    readonly deltaY: number\r\n}\r\n\r\nexport interface ClickedInput {\r\n    readonly kind: EventKind.CLICKED_INPUT\r\n    readonly input: UUID\r\n}\r\n\r\nexport interface ClickedOutput {\r\n    readonly kind: EventKind.CLICKED_OUTPUT\r\n    readonly output: UUID\r\n}\r\n\r\nexport interface OpenFinderTimeout {\r\n    readonly kind: EventKind.OPEN_FINDER_TIMEOUT\r\n}\r\n\r\nexport interface KeyDown {\r\n    readonly kind: EventKind.KEYDOWN\r\n    readonly key: string\r\n}\r\n\r\nexport interface VirtualKeyDown {\r\n    readonly kind: EventKind.VIRTUAL_KEYDOWN\r\n    readonly key: string\r\n}\r\n\r\nexport interface ClickedFinderOption {\r\n    readonly kind: EventKind.CLICKED_FINDER_OPTION\r\n    readonly option: string\r\n}\r\n\r\nexport interface ClickedNumber {\r\n    readonly kind: EventKind.CLICKED_NUMBER,\r\n    readonly body: UUID\r\n}\r\n\r\nexport interface ClickedBackground {\r\n    readonly kind: EventKind.CLICKED_BACKGROUND,\r\n}\r\n\r\nexport interface DeleteNode {\r\n    readonly kind: EventKind.DELETE_NODE,\r\n    readonly node: UUID\r\n}\r\n\r\nexport interface DeleteInputEdge {\r\n    readonly kind: EventKind.DELETE_INPUT_EDGE,\r\n    readonly input: UUID\r\n}\r\n\r\nexport interface DeleteOutputEdges {\r\n    readonly kind: EventKind.DELETE_OUTPUT_EDGES,\r\n    readonly output: UUID\r\n}\r\n\r\n\r\nexport type AppEvent =\r\n    | PointerMove\r\n    | PointerDown\r\n    | PointerUp\r\n    | ClickedNode\r\n    | Wheel\r\n    | ClickedInput\r\n    | ClickedOutput\r\n    | OpenFinderTimeout\r\n    | KeyDown\r\n    | VirtualKeyDown\r\n    | ClickedFinderOption\r\n    | ClickedNumber\r\n    | ClickedBackground\r\n    | DeleteNode\r\n    | DeleteInputEdge\r\n    | DeleteOutputEdges\r\n\r\n\r\nconst pointerDown = (state: State, event: PointerDown): UpdateResult<State, AppEvent> => {\r\n    if (state.inputTarget.kind !== InputTargetKind.NONE) return { state }\r\n    const pointers = [...state.pointers, event.pointer]\r\n    if (pointers.length > 1) {\r\n        return {\r\n            state: {\r\n                ...state,\r\n                finder: { ...state.finder, openTimeout: false },\r\n                dragging: false,\r\n                zooming: pointers.length === 2,\r\n                pointers\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            state: {\r\n                ...state,\r\n                dragging: true,\r\n                pointers\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst pointerUp = (state: State, event: PointerUp): UpdateResult<State, AppEvent> => {\r\n    const pointers = state.pointers.filter(p => p.id !== event.pointer.id)\r\n    switch (pointers.length) {\r\n        case 1: return {\r\n            state: {\r\n                ...state,\r\n                pointers,\r\n                zooming: false,\r\n                dragging: true,\r\n                pointerDistance: 0\r\n            }\r\n        }\r\n        case 0: return {\r\n            state: {\r\n                ...state,\r\n                pointers,\r\n                dragging: false,\r\n                pointerDistance: 0\r\n            }\r\n        }\r\n        default: return { state: { ...state, pointers } }\r\n    }\r\n}\r\n\r\nexport const changeNth = <T>(xs: Readonly<T[]>, i: number, x: T): T[] =>\r\n    [...xs.slice(0, i), x, ...xs.slice(i + 1)]\r\n\r\nconst pointerMove = (state: State, event: PointerMove): UpdateResult<State, AppEvent> => {\r\n    if (!state.dragging && !state.zooming) {\r\n        const nodePlacementLocation = !state.finder.show ?\r\n            event.pointer.position :\r\n            state.nodePlacementLocation\r\n        return { state: { ...state, nodePlacementLocation } }\r\n    } else {\r\n        const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n        const pointer = state.pointers[index]\r\n        const pointers = changeNth(state.pointers, index, event.pointer)\r\n        if (state.dragging) {\r\n            const dx = event.pointer.position.x - pointer.position.x\r\n            const dy = event.pointer.position.y - pointer.position.y\r\n            if (state.selected.kind === SelectedKind.NODE) {\r\n                const scaling = length(multiplyMatrixVector(state.camera, [0, 1, 0]))\r\n                const graph = changeNodePosition(state.graph, state.selected.node, p => ({\r\n                    x: p.x + dx * scaling,\r\n                    y: p.y + dy * scaling,\r\n                }))\r\n                return {\r\n                    state: { ...state, pointers, graph },\r\n                    render: true\r\n                }\r\n            } else {\r\n                const camera = multiplyMatrices(state.camera, translate(-dx, -dy))\r\n                return {\r\n                    state: { ...state, pointers, camera },\r\n                    render: true\r\n                }\r\n            }\r\n        } else {\r\n            // must be zooming\r\n            const [p0, p1] = [pointers[0], pointers[1]]\r\n            const { x: x1, y: y1 } = p0.position\r\n            const { x: x2, y: y2 } = p1.position\r\n            const pointerDistance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n            const previousDistance = state.pointerDistance\r\n            const previousCenter = state.pointerCenter\r\n            const x = (p0.position.x + p1.position.x) / 2\r\n            const y = (p0.position.y + p1.position.y) / 2\r\n            const pointerCenter = { x, y }\r\n            if (previousDistance > 0) {\r\n                const move = translate(x, y)\r\n                const zoom = Math.pow(2, (previousDistance - pointerDistance) * 0.01)\r\n                const moveBack = translate(-x, -y)\r\n                const dx = x - previousCenter.x\r\n                const dy = y - previousCenter.y\r\n                const camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack, translate(-dx, -dy))\r\n                return {\r\n                    state: { ...state, pointerCenter, pointerDistance, pointers, camera },\r\n                    render: true\r\n                }\r\n            } else {\r\n                return { state: { ...state, pointerCenter, pointerDistance, pointers } }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst clickedNode = (state: State, event: ClickedNode): UpdateResult<State, AppEvent> => {\r\n    const nodeOrder = state.nodeOrder.filter(uuid => uuid !== event.node)\r\n    nodeOrder.push(event.node)\r\n    return {\r\n        state: {\r\n            ...state,\r\n            selected: {\r\n                kind: SelectedKind.NODE,\r\n                node: event.node,\r\n            },\r\n            inputTarget: { kind: InputTargetKind.NONE },\r\n            virtualKeyboard: { kind: VirtualKeyboardKind.ALPHABETIC, show: false },\r\n            nodeOrder\r\n        },\r\n        render: true\r\n    }\r\n}\r\n\r\nconst wheel = (state: State, event: Wheel): UpdateResult<State, AppEvent> => {\r\n    const move = translate(event.position.x, event.position.y)\r\n    const zoom = Math.pow(2, event.deltaY * 0.01)\r\n    const moveBack = translate(-event.position.x, -event.position.y)\r\n    const camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack)\r\n    return {\r\n        state: { ...state, camera },\r\n        render: true\r\n    }\r\n}\r\n\r\nconst clickedInput = (state: State, event: ClickedInput, generateUUID: GenerateUUID): UpdateResult<State, AppEvent> => {\r\n    if (state.selected.kind === SelectedKind.OUTPUT) {\r\n        const input = state.graph.inputs[event.input]\r\n        const output = state.graph.outputs[state.selected.output]\r\n        if (input.node === output.node) {\r\n            return { state }\r\n        } else {\r\n            const graph0 = input.edge !== undefined ?\r\n                removeInputEdge(state.graph, input.uuid) :\r\n                state.graph\r\n            const { graph: graph1 } = addEdge({\r\n                graph: graph0,\r\n                input: event.input,\r\n                output: state.selected.output,\r\n                generateUUID\r\n            })\r\n            return {\r\n                state: {\r\n                    ...state,\r\n                    selected: { kind: SelectedKind.NONE },\r\n                    graph: graph1\r\n                },\r\n                render: true\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            state: {\r\n                ...state,\r\n                selected: { kind: SelectedKind.INPUT, input: event.input },\r\n                virtualKeyboard: { kind: VirtualKeyboardKind.ALPHABETIC, show: false },\r\n                inputTarget: { kind: InputTargetKind.NONE }\r\n            },\r\n            render: true\r\n        }\r\n    }\r\n}\r\n\r\nconst clickedOutput = (state: State, event: ClickedOutput, generateUUID: GenerateUUID): UpdateResult<State, AppEvent> => {\r\n    if (state.selected.kind === SelectedKind.INPUT) {\r\n        const input = state.graph.inputs[state.selected.input]\r\n        const output = state.graph.outputs[event.output]\r\n        if (output.node === input.node) {\r\n            return { state }\r\n        } else {\r\n            const graph0 = input.edge !== undefined ?\r\n                removeInputEdge(state.graph, input.uuid) :\r\n                state.graph\r\n            const { graph: graph1 } = addEdge({\r\n                graph: graph0,\r\n                input: state.selected.input,\r\n                output: event.output,\r\n                generateUUID\r\n            })\r\n            return {\r\n                state: {\r\n                    ...state,\r\n                    selected: { kind: SelectedKind.NONE },\r\n                    graph: graph1\r\n                },\r\n                render: true\r\n            }\r\n        }\r\n    } else {\r\n        return {\r\n            state: {\r\n                ...state,\r\n                selected: { kind: SelectedKind.OUTPUT, output: event.output },\r\n                virtualKeyboard: { kind: VirtualKeyboardKind.ALPHABETIC, show: false },\r\n                inputTarget: { kind: InputTargetKind.NONE }\r\n            },\r\n            render: true\r\n        }\r\n    }\r\n}\r\n\r\nconst openFinderTimeout = (state: State, _: OpenFinderTimeout): UpdateResult<State, AppEvent> => ({\r\n    state: {\r\n        ...state,\r\n        finder: { ...state.finder, openTimeout: false }\r\n    }\r\n})\r\n\r\nconst updateFinderOptions = (state: State): State => {\r\n    const options = Object.keys(state.operations)\r\n        .filter(item => fuzzyFind({ haystack: item, needle: state.finder.search }))\r\n    return { ...state, finder: { ...state.finder, options } }\r\n}\r\n\r\nexport const openFinder = (state: State): State =>\r\n    updateFinderOptions({\r\n        ...state,\r\n        finder: {\r\n            show: true,\r\n            search: '',\r\n            options: [],\r\n            openTimeout: false\r\n        },\r\n        virtualKeyboard: {\r\n            show: true,\r\n            kind: VirtualKeyboardKind.ALPHABETIC\r\n        },\r\n        inputTarget: { kind: InputTargetKind.FINDER },\r\n    })\r\n\r\n\r\nconst closeFinder = (state: State): State => ({\r\n    ...state,\r\n    finder: {\r\n        show: false,\r\n        search: '',\r\n        options: [],\r\n        openTimeout: false\r\n    },\r\n    virtualKeyboard: {\r\n        show: false,\r\n        kind: VirtualKeyboardKind.ALPHABETIC\r\n    },\r\n    inputTarget: { kind: InputTargetKind.NONE },\r\n    selected: { kind: SelectedKind.NONE }\r\n})\r\n\r\nconst insertOperationFromFinder = (state: State, name: string, generateUUID: GenerateUUID): UpdateResult<State, AppEvent> => {\r\n    const operation = state.operations[name]\r\n    const [x, y, _] = multiplyMatrixVector(\r\n        state.camera,\r\n        [state.nodePlacementLocation.x, state.nodePlacementLocation.y, 1]\r\n    )\r\n    const { state: nextState } = addNodeToGraph({ state, operation, position: { x, y }, generateUUID })\r\n    return {\r\n        state: closeFinder(nextState),\r\n        render: true\r\n    }\r\n}\r\n\r\nconst updateFinderSearch = (state: State, transform: (search: string) => string): UpdateResult<State, AppEvent> => ({\r\n    state: updateFinderOptions({\r\n        ...state,\r\n        finder: {\r\n            ...state.finder,\r\n            search: transform(state.finder.search)\r\n        }\r\n    }),\r\n    render: true\r\n})\r\n\r\nconst updateBodyValue = (state: State, body: UUID, transform: (value: number) => number): UpdateResult<State, AppEvent> => {\r\n    return {\r\n        state: {\r\n            ...state,\r\n            graph: changeBodyValue(state.graph, body, transform)\r\n        },\r\n        render: true\r\n    }\r\n}\r\n\r\ninterface AddNodeInputs {\r\n    state: State\r\n    operation: Operation\r\n    position: Position\r\n    generateUUID: GenerateUUID\r\n}\r\n\r\ninterface AddNodeOutputs {\r\n    state: State\r\n    node: UUID\r\n}\r\n\r\n\r\nexport const addNodeToGraph = ({ state, operation, position, generateUUID }: AddNodeInputs): AddNodeOutputs => {\r\n    const { graph, node } = addNode({ graph: state.graph, operation, position, generateUUID })\r\n    return {\r\n        state: {\r\n            ...state,\r\n            graph,\r\n            nodeOrder: [...state.nodeOrder, node]\r\n        },\r\n        node\r\n    }\r\n}\r\n\r\nexport const removeNodeFromGraph = (state: State, node: UUID): State => ({\r\n    ...state,\r\n    graph: removeNode(state.graph, node),\r\n    nodeOrder: state.nodeOrder.filter(n => n !== node),\r\n    selected: { kind: SelectedKind.NONE }\r\n})\r\n\r\nconst keyDown = (state: State, { key }: KeyDown, generateUUID: GenerateUUID): UpdateResult<State, AppEvent> => {\r\n    switch (state.inputTarget.kind) {\r\n        case InputTargetKind.FINDER:\r\n            switch (key) {\r\n                case 'Backspace':\r\n                    return updateFinderSearch(state, search => search.slice(0, -1))\r\n                case 'Shift':\r\n                case 'Alt':\r\n                case 'Control':\r\n                case 'Meta':\r\n                case 'Tab':\r\n                    return { state }\r\n                case 'Enter':\r\n                    if (state.finder.options.length > 0) {\r\n                        const name = state.finder.options[0]\r\n                        return insertOperationFromFinder(state, name, generateUUID)\r\n                    } else {\r\n                        return { state: closeFinder(state), render: true }\r\n                    }\r\n                case 'Escape':\r\n                    return { state: closeFinder(state), render: true }\r\n                default:\r\n                    return updateFinderSearch(state, search => search + key)\r\n            }\r\n        case InputTargetKind.NUMBER:\r\n            switch (key) {\r\n                case 'Backspace':\r\n                    return updateBodyValue(state, state.inputTarget.body, value => {\r\n                        let newValue = value.toString().slice(0, -1)\r\n                        return newValue === '' ? 0 : parseFloat(newValue)\r\n                    })\r\n                case '1':\r\n                case '2':\r\n                case '3':\r\n                case '4':\r\n                case '5':\r\n                case '6':\r\n                case '7':\r\n                case '8':\r\n                case '9':\r\n                case '0':\r\n                    return updateBodyValue(state, state.inputTarget.body, value => parseFloat(value.toString() + key))\r\n                case 'Enter':\r\n                case 'Escape':\r\n                    return {\r\n                        state: {\r\n                            ...state,\r\n                            virtualKeyboard: {\r\n                                show: false,\r\n                                kind: VirtualKeyboardKind.ALPHABETIC\r\n                            },\r\n                            inputTarget: { kind: InputTargetKind.NONE },\r\n                            selected: { kind: SelectedKind.NONE }\r\n                        },\r\n                        render: true\r\n                    }\r\n                default:\r\n                    return { state }\r\n            }\r\n        case InputTargetKind.NONE:\r\n            switch (key) {\r\n                case 'f':\r\n                    return { state: openFinder(state), render: true }\r\n                case 'd':\r\n                    switch (state.selected.kind) {\r\n                        case SelectedKind.NODE:\r\n                            return {\r\n                                state: removeNodeFromGraph(state, state.selected.node),\r\n                                render: true\r\n                            }\r\n                        case SelectedKind.INPUT:\r\n                            return {\r\n                                state: {\r\n                                    ...state,\r\n                                    graph: removeInputEdge(state.graph, state.selected.input),\r\n                                    selected: { kind: SelectedKind.NONE },\r\n                                },\r\n                                render: true\r\n                            }\r\n                        case SelectedKind.OUTPUT:\r\n                            return {\r\n                                state: {\r\n                                    ...state,\r\n                                    graph: removeOutputEdges(state.graph, state.selected.output),\r\n                                    selected: { kind: SelectedKind.NONE },\r\n                                },\r\n                                render: true\r\n                            }\r\n                        default:\r\n                            return { state }\r\n                    }\r\n                case 'Escape':\r\n                    if (state.selected.kind === SelectedKind.NONE) {\r\n                        return { state }\r\n                    } else {\r\n                        return {\r\n                            state: {\r\n                                ...state,\r\n                                selected: { kind: SelectedKind.NONE },\r\n                            },\r\n                            render: true\r\n                        }\r\n                    }\r\n                default:\r\n                    return { state }\r\n            }\r\n    }\r\n}\r\n\r\nconst virtualKeyDown = (state: State, { key }: VirtualKeyDown, generateUUID: GenerateUUID): UpdateResult<State, AppEvent> => {\r\n    switch (state.inputTarget.kind) {\r\n        case InputTargetKind.FINDER:\r\n            switch (key) {\r\n                case 'del':\r\n                    return updateFinderSearch(state, search => search.slice(0, -1))\r\n                case 'sft':\r\n                    return { state }\r\n                case 'space':\r\n                    return updateFinderSearch(state, search => search + ' ')\r\n                case 'ret':\r\n                    if (state.finder.options.length > 0) {\r\n                        const name = state.finder.options[0]\r\n                        return insertOperationFromFinder(state, name, generateUUID)\r\n                    } else {\r\n                        return { state: closeFinder(state), render: true }\r\n                    }\r\n                default:\r\n                    return updateFinderSearch(state, search => search + key)\r\n            }\r\n        case InputTargetKind.NUMBER:\r\n            switch (key) {\r\n                case 'del':\r\n                    return updateBodyValue(state, state.inputTarget.body, value => {\r\n                        let newValue = value.toString().slice(0, -1)\r\n                        return newValue === '' ? 0 : parseFloat(newValue)\r\n                    })\r\n                case '1':\r\n                case '2':\r\n                case '3':\r\n                case '4':\r\n                case '5':\r\n                case '6':\r\n                case '7':\r\n                case '8':\r\n                case '9':\r\n                case '0':\r\n                case '.':\r\n                    return updateBodyValue(state, state.inputTarget.body, value => parseFloat(value.toString() + key))\r\n                case 'ret':\r\n                    return {\r\n                        state: {\r\n                            ...state,\r\n                            virtualKeyboard: {\r\n                                show: false,\r\n                                kind: VirtualKeyboardKind.ALPHABETIC\r\n                            },\r\n                            inputTarget: { kind: InputTargetKind.NONE },\r\n                            selected: { kind: SelectedKind.NONE }\r\n                        },\r\n                        render: true\r\n                    }\r\n                default:\r\n                    return { state }\r\n            }\r\n        case InputTargetKind.NONE:\r\n            return { state }\r\n    }\r\n}\r\n\r\nconst clickedFinderOption = (state: State, { option }: ClickedFinderOption, generateUUID: GenerateUUID): UpdateResult<State, AppEvent> =>\r\n    insertOperationFromFinder(state, option, generateUUID)\r\n\r\nexport const openNumericKeyboard = (state: State, body: UUID): State => ({\r\n    ...state,\r\n    virtualKeyboard: {\r\n        show: true,\r\n        kind: VirtualKeyboardKind.NUMERIC\r\n    },\r\n    inputTarget: {\r\n        kind: InputTargetKind.NUMBER,\r\n        body\r\n    },\r\n    selected: {\r\n        kind: SelectedKind.BODY,\r\n        body\r\n    }\r\n})\r\n\r\nconst clickedNumber = (state: State, { body }: ClickedNumber): UpdateResult<State, AppEvent> => ({\r\n    state: openNumericKeyboard(closeFinder(state), body),\r\n    render: true\r\n})\r\n\r\nconst clickedBackground = (state: State): UpdateResult<State, AppEvent> => {\r\n    if (state.finder.show) {\r\n        return {\r\n            state: closeFinder(state),\r\n            render: true\r\n        }\r\n    } else if (state.finder.openTimeout) {\r\n        return {\r\n            state: openFinder({\r\n                ...state,\r\n                nodePlacementLocation: state.pointers[0].position,\r\n                dragging: false\r\n            }),\r\n            render: true\r\n        }\r\n    } else {\r\n        return {\r\n            state: {\r\n                ...state,\r\n                finder: {\r\n                    ...state.finder,\r\n                    openTimeout: true\r\n                },\r\n                inputTarget: { kind: InputTargetKind.NONE },\r\n                virtualKeyboard: {\r\n                    kind: VirtualKeyboardKind.ALPHABETIC,\r\n                    show: false\r\n                },\r\n                selected: { kind: SelectedKind.NONE }\r\n            },\r\n            schedule: [\r\n                { after: { milliseconds: 300 }, event: { kind: EventKind.OPEN_FINDER_TIMEOUT } }\r\n            ],\r\n            render: true\r\n        }\r\n    }\r\n}\r\n\r\nconst deleteNode = (state: State, { node }: DeleteNode): UpdateResult<State, AppEvent> => ({\r\n    state: removeNodeFromGraph(state, node),\r\n    render: true\r\n})\r\n\r\nconst deleteInputEdge = (state: State, { input }: DeleteInputEdge): UpdateResult<State, AppEvent> => ({\r\n    state: {\r\n        ...state,\r\n        graph: removeInputEdge(state.graph, input),\r\n        selected: { kind: SelectedKind.NONE },\r\n    },\r\n    render: true\r\n})\r\n\r\nconst deleteOutputEdges = (state: State, { output }: DeleteOutputEdges): UpdateResult<State, AppEvent> => ({\r\n    state: {\r\n        ...state,\r\n        graph: removeOutputEdges(state.graph, output),\r\n        selected: { kind: SelectedKind.NONE },\r\n    },\r\n    render: true\r\n})\r\n\r\nexport const update = (generateUUID: GenerateUUID, state: State, event: AppEvent): UpdateResult<State, AppEvent> => {\r\n    switch (event.kind) {\r\n        case EventKind.POINTER_DOWN: return pointerDown(state, event)\r\n        case EventKind.POINTER_UP: return pointerUp(state, event)\r\n        case EventKind.POINTER_MOVE: return pointerMove(state, event)\r\n        case EventKind.CLICKED_NODE: return clickedNode(state, event)\r\n        case EventKind.WHEEL: return wheel(state, event)\r\n        case EventKind.CLICKED_INPUT: return clickedInput(state, event, generateUUID)\r\n        case EventKind.CLICKED_OUTPUT: return clickedOutput(state, event, generateUUID)\r\n        case EventKind.OPEN_FINDER_TIMEOUT: return openFinderTimeout(state, event)\r\n        case EventKind.KEYDOWN: return keyDown(state, event, generateUUID)\r\n        case EventKind.VIRTUAL_KEYDOWN: return virtualKeyDown(state, event, generateUUID)\r\n        case EventKind.CLICKED_FINDER_OPTION: return clickedFinderOption(state, event, generateUUID)\r\n        case EventKind.CLICKED_NUMBER: return clickedNumber(state, event)\r\n        case EventKind.CLICKED_BACKGROUND: return clickedBackground(state)\r\n        case EventKind.DELETE_NODE: return deleteNode(state, event)\r\n        case EventKind.DELETE_INPUT_EDGE: return deleteInputEdge(state, event)\r\n        case EventKind.DELETE_OUTPUT_EDGES: return deleteOutputEdges(state, event)\r\n    }\r\n}\r\n","import { Renderer, Pointer, WorldSpace } from \".\"\r\n\r\nconst inWorldSpace = ({ x0, y0, x1, y1 }: WorldSpace, pointer: Pointer) =>\r\n    x0 <= pointer.position.x && pointer.position.x <= x1 &&\r\n    y0 <= pointer.position.y && pointer.position.y <= y1\r\n\r\nexport const pointerDown = <AppEvent, R extends Renderer<AppEvent>>(renderer: R, pointer: Pointer): R => {\r\n    for (let i = renderer.clickHandlers.length; i > 0; --i) {\r\n        for (const { onClick, worldSpace } of renderer.clickHandlers[i - 1]) {\r\n            if (inWorldSpace(worldSpace, pointer)) {\r\n                renderer.dispatch(onClick)\r\n                return renderer\r\n            }\r\n        }\r\n    }\r\n    return renderer\r\n}\r\n","import { Connections } from \"./gather_connections\"\r\nimport { Layers } from \"./layer_geometry\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\nimport { WorldSpace } from \".\"\r\n\r\nexport interface Triangles {\r\n    vertices: number[]\r\n    vertexIndices: number[]\r\n    colors: number[]\r\n    textureIndex: number\r\n    textureCoordinates: number[]\r\n    cameraIndex: number[]\r\n}\r\n\r\nexport interface Lines {\r\n    vertices: number[]\r\n    colors: number[]\r\n}\r\n\r\n\r\nexport interface Batch {\r\n    triangles: Triangles\r\n    lines: Lines\r\n}\r\n\r\nconst newBatch = (textureIndex: number): Batch => ({\r\n    triangles: {\r\n        vertices: [],\r\n        colors: [],\r\n        vertexIndices: [],\r\n        textureIndex,\r\n        textureCoordinates: [],\r\n        cameraIndex: []\r\n    },\r\n    lines: {\r\n        vertices: [],\r\n        colors: []\r\n    }\r\n})\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nexport function* cubicBezier(ts: number[], from: WorldSpace, to: WorldSpace, offset: number): Generator<number> {\r\n    const p0x = (from.x0 + from.x1) / 2\r\n    const p0y = (from.y0 + from.y1) / 2\r\n    const p1x = p0x + offset\r\n    const p1y = p0y\r\n    const p3x = (to.x0 + to.x1) / 2\r\n    const p3y = (to.y0 + to.y1) / 2\r\n    const p2x = p3x - offset\r\n    const p2y = p3y\r\n    let lastX = 0\r\n    let lastY = 0\r\n    let first = true\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (first) {\r\n            yield x\r\n            yield y\r\n            first = false\r\n        } else {\r\n            yield lastX\r\n            yield lastY\r\n        }\r\n        yield x\r\n        yield y\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n}\r\n\r\n\r\nexport const batchGeometry = (layers: Layers, connections: Connections, idToWorldSpace: IdToWorldSpace): Batch[] => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const batches: Batch[] = []\r\n    let batch = newBatch(0)\r\n    let batchTextureIndex = batch.triangles.textureIndex.toString()\r\n    layers.forEach((layer, z) => {\r\n        for (const [textureIndex, geometries] of Object.entries(layer)) {\r\n            if (batchTextureIndex !== textureIndex) {\r\n                if (batch.triangles.vertices.length !== 0) batches.push(batch)\r\n                batch = newBatch(parseInt(textureIndex))\r\n                batchTextureIndex = textureIndex\r\n            }\r\n            for (const geometry of geometries) {\r\n                const offset = batch.triangles.vertices.length / 2\r\n                batch.triangles.vertices.push(...geometry.vertices)\r\n                batch.triangles.colors.push(...geometry.colors)\r\n                for (const index of geometry.vertexIndices) {\r\n                    batch.triangles.vertexIndices.push(index + offset)\r\n                }\r\n                batch.triangles.textureCoordinates.push(...geometry.textureCoordinates)\r\n                batch.triangles.cameraIndex.push(...geometry.cameraIndex)\r\n            }\r\n        }\r\n        if (connections.length > z) {\r\n            for (const { connections: cs, scale } of connections[z]) {\r\n                const offset = 50 * scale\r\n                for (const { from, to, color } of cs) {\r\n                    for (const p of cubicBezier(ts, idToWorldSpace[from], idToWorldSpace[to], offset)) {\r\n                        batch.lines.vertices.push(p)\r\n                    }\r\n                    const { red, green, blue, alpha } = color\r\n                    for (let i = 0; i < samples * 2; ++i) batch.lines.colors.push(red, green, blue, alpha)\r\n                }\r\n            }\r\n            if (batch.lines.vertices.length !== 0) {\r\n                batches.push(batch)\r\n                batch = newBatch(0)\r\n            }\r\n        }\r\n    })\r\n    if (batch.triangles.vertices.length !== 0) batches.push(batch)\r\n    return batches\r\n}","import { WorldSpace } from \".\"\r\nimport { identity, inverse, Matrix3x3, multiplyMatrixVector } from \"../linear_algebra/matrix3x3\"\r\n\r\nexport interface CameraStack {\r\n    cameras: Matrix3x3[]\r\n    stack: number[]\r\n    transform: Matrix3x3\r\n}\r\n\r\nexport const initCameraStack = (): CameraStack => {\r\n    const camera = identity()\r\n    return {\r\n        cameras: [identity()],\r\n        stack: [0],\r\n        transform: inverse(camera)\r\n    }\r\n}\r\n\r\nexport const pushCamera = (cameraStack: CameraStack, camera: Matrix3x3): void => {\r\n    const index = cameraStack.cameras.length\r\n    cameraStack.cameras.push(camera)\r\n    cameraStack.stack.push(index)\r\n    cameraStack.transform = inverse(camera)\r\n}\r\n\r\nexport const activeCamera = (cameraStack: CameraStack): number => cameraStack.stack.slice(-1)[0]\r\n\r\nexport const popCamera = (cameraStack: CameraStack): void => {\r\n    cameraStack.stack.pop()\r\n    cameraStack.transform = inverse(cameraStack.cameras[activeCamera(cameraStack)])\r\n}\r\n\r\nexport const transformWorldSpace = (cameraStack: CameraStack, worldSpace: WorldSpace): WorldSpace => {\r\n    const [x0, y0, _0] = multiplyMatrixVector(cameraStack.transform, [worldSpace.x0, worldSpace.y0, 1])\r\n    const [x1, y1, _1] = multiplyMatrixVector(cameraStack.transform, [worldSpace.x1, worldSpace.y1, 1])\r\n    return { x0, y0, x1, y1 }\r\n}\r\n","import { Constraints, Entry, Geometry, geometry, layout, Layout, MeasureText, Offset, Size, UI, UIKind, WorldSpace, traverse } from \".\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface CenterLayout {\r\n    readonly size: Size\r\n    readonly child: Layout\r\n}\r\n\r\nexport interface CenterGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly child: Geometry\r\n}\r\n\r\nexport interface Center<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.CENTER\r\n    readonly child: UI<AppEvent>\r\n}\r\n\r\nexport const center = <AppEvent>(child: UI<AppEvent>): Center<AppEvent> => {\r\n    return {\r\n        kind: UIKind.CENTER,\r\n        child\r\n    }\r\n}\r\n\r\nexport const centerLayout = <AppEvent>(ui: Center<AppEvent>, constraints: Constraints, measureText: MeasureText): CenterLayout => {\r\n    const childLayout = layout(ui.child, constraints, measureText)\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, child: childLayout }\r\n}\r\n\r\nexport const centerGeometry = <AppEvent>(ui: Center<AppEvent>, layout: CenterLayout, offset: Offset, cameraStack: CameraStack): CenterGeometry => {\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    const childLayout = layout.child\r\n    const childOffset = {\r\n        x: offset.x + layout.size.width / 2 - childLayout.size.width / 2,\r\n        y: offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n    }\r\n    const childGeometry = geometry(ui.child, childLayout, childOffset, cameraStack)\r\n    return {\r\n        worldSpace,\r\n        child: childGeometry\r\n    }\r\n}\r\n\r\nexport function* centerTraverse<AppEvent>(ui: Center<AppEvent>, layout: CenterLayout, geometry: CenterGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield* traverse(ui.child, layout.child, geometry.child, z + 1)\r\n}","export enum MainAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END,\r\n    SPACE_EVENLY,\r\n    SPACE_BETWEEN\r\n}\r\n\r\nexport enum CrossAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END\r\n}","import { Constraints, Entry, geometry, Geometry, Layout, layout, MeasureText, Offset, Size, traverse, UI, UIKind, WorldSpace } from \".\"\r\nimport { MainAxisAlignment, CrossAxisAlignment } from \"./alignment\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface ColumnLayout {\r\n    readonly size: Size\r\n    readonly totalChildHeight: number\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface ColumnGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Column<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.COLUMN,\r\n    readonly mainAxisAlignment: MainAxisAlignment\r\n    readonly crossAxisAlignment: CrossAxisAlignment\r\n    readonly children: UI<AppEvent>[]\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\nexport function column<AppEvent>(children: UI<AppEvent>[]): Column<AppEvent>\r\nexport function column<AppEvent>(properties: Properties, children: UI<AppEvent>[]): Column<AppEvent>\r\nexport function column<AppEvent>(...args: any[]): Column<AppEvent> {\r\n    const [properties, children]: [Properties, UI<AppEvent>[]] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.COLUMN,\r\n        mainAxisAlignment: properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        crossAxisAlignment: properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    }\r\n}\r\n\r\nexport const columnLayout = <AppEvent>(ui: Column<AppEvent>, constraints: Constraints, measureText: MeasureText): ColumnLayout => {\r\n    const initialChildren: Layout[] = []\r\n    const initial = {\r\n        children: initialChildren,\r\n        width: 0,\r\n        totalChildHeight: 0\r\n    }\r\n    const result = ui.children.reduce((acc, child) => {\r\n        const childLayout = layout(child, constraints, measureText)\r\n        acc.children.push(childLayout)\r\n        acc.totalChildHeight += childLayout.size.height\r\n        acc.width = Math.max(acc.width, childLayout.size.width)\r\n        return acc\r\n    }, initial)\r\n    const { children, width, totalChildHeight } = result\r\n    const height = ui.mainAxisAlignment == MainAxisAlignment.START ? totalChildHeight : constraints.maxHeight\r\n    return {\r\n        size: { width, height },\r\n        totalChildHeight,\r\n        children\r\n    }\r\n}\r\n\r\nexport const columnGeometry = <AppEvent>(ui: Column<AppEvent>, layout: ColumnLayout, offset: Offset, cameraStack: CameraStack): ColumnGeometry => {\r\n    const initialChildren: Geometry[] = []\r\n    const freeSpaceY = layout.size.height - layout.totalChildHeight\r\n    const initial = {\r\n        children: initialChildren,\r\n        y: (() => {\r\n            switch (ui.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return offset.y\r\n                case MainAxisAlignment.CENTER: return offset.y + freeSpaceY / 2\r\n                case MainAxisAlignment.END: return offset.y + freeSpaceY\r\n                case MainAxisAlignment.SPACE_EVENLY: return offset.y + freeSpaceY / (ui.children.length + 1)\r\n                case MainAxisAlignment.SPACE_BETWEEN: return offset.y\r\n            }\r\n        })(),\r\n    }\r\n    const addYStart = (childLayout: Layout) => childLayout.size.height\r\n    const addYCenter = (childLayout: Layout) => childLayout.size.height\r\n    const addYEnd = (childLayout: Layout) => childLayout.size.height\r\n    const addYSpaceEvenly = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (ui.children.length + 1)\r\n    const addYSpaceBetween = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (ui.children.length - 1)\r\n    const addY = (() => {\r\n        switch (ui.mainAxisAlignment) {\r\n            case MainAxisAlignment.START: return addYStart\r\n            case MainAxisAlignment.CENTER: return addYCenter\r\n            case MainAxisAlignment.END: return addYEnd\r\n            case MainAxisAlignment.SPACE_EVENLY: return addYSpaceEvenly\r\n            case MainAxisAlignment.SPACE_BETWEEN: return addYSpaceBetween\r\n        }\r\n    })()\r\n    const offsetXStart = (_: Layout) => offset.x\r\n    const offsetXCenter = (childLayout: Layout) => offset.x + layout.size.width / 2 - childLayout.size.width / 2\r\n    const offsetXEnd = (childLayout: Layout) => offset.x + layout.size.width - childLayout.size.width\r\n    const offsetX = (() => {\r\n        switch (ui.crossAxisAlignment) {\r\n            case CrossAxisAlignment.START: return offsetXStart\r\n            case CrossAxisAlignment.CENTER: return offsetXCenter\r\n            case CrossAxisAlignment.END: return offsetXEnd\r\n        }\r\n    })()\r\n    const result = ui.children.reduce((acc, child, i) => {\r\n        const childLayout = layout.children[i]\r\n        const childOffset = { x: offsetX(childLayout), y: acc.y }\r\n        const childGeometry = geometry(child, childLayout, childOffset, cameraStack)\r\n        acc.children.push(childGeometry)\r\n        acc.y += addY(childLayout)\r\n        return acc\r\n    }, initial)\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height\r\n    })\r\n    return { worldSpace, children: result.children }\r\n}\r\n\r\nexport function* columnTraverse<AppEvent>(ui: Column<AppEvent>, layout: ColumnLayout, geometry: ColumnGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    const nextZ = z + 1\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        yield* traverse(child, layout.children[i], geometry.children[i], nextZ)\r\n        i += 1\r\n    }\r\n}","import { UI, Size, Layout, Constraints, MeasureText, UIKind, layout, Color, Offset, WorldSpace, Geometry, geometry, Entry, traverse, } from '.'\r\nimport { CameraStack, transformWorldSpace, activeCamera } from './camera_stack'\r\n\r\nexport interface ContainerLayout {\r\n    readonly size: Size\r\n    readonly child?: Layout\r\n}\r\n\r\nexport interface ContainerGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly vertices: number[]\r\n    readonly colors: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly child?: Geometry\r\n}\r\n\r\nexport interface Padding {\r\n    readonly top: number\r\n    readonly right: number\r\n    readonly bottom: number\r\n    readonly left: number\r\n}\r\n\r\nexport interface Container<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.CONTAINER,\r\n    readonly padding: Padding\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly child?: UI<AppEvent>\r\n}\r\n\r\ninterface Properties<AppEvent> {\r\n    readonly padding?: number\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly onClick?: AppEvent\r\n    readonly id?: string\r\n}\r\n\r\nconst transformPadding = (padding?: number): Padding => {\r\n    if (padding) return { top: padding, right: padding, bottom: padding, left: padding }\r\n    return { top: 0, right: 0, bottom: 0, left: 0 }\r\n}\r\n\r\nexport const container = <AppEvent>({ padding, width, height, color, x, y, onClick, id }: Properties<AppEvent>, child?: UI<AppEvent>): Container<AppEvent> => {\r\n    return {\r\n        kind: UIKind.CONTAINER,\r\n        padding: transformPadding(padding),\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        color,\r\n        onClick,\r\n        id,\r\n        child\r\n    }\r\n}\r\n\r\nexport const containerLayout = <AppEvent>(ui: Container<AppEvent>, constraints: Constraints, measureText: MeasureText): ContainerLayout => {\r\n    const { top, right, bottom, left } = ui.padding\r\n    if (ui.child) {\r\n        const childLayout = layout(ui.child, constraints, measureText)\r\n        const width = ui.width ?? childLayout.size.width + left + right\r\n        const height = ui.height ?? childLayout.size.height + top + bottom\r\n        return {\r\n            size: { width, height },\r\n            child: childLayout\r\n        }\r\n    }\r\n    const width = (() => {\r\n        if (ui.width) return ui.width + left + right\r\n        return constraints.maxWidth\r\n    })()\r\n    const height = (() => {\r\n        if (ui.height) return ui.height + top + bottom\r\n        return constraints.maxHeight\r\n    })()\r\n    return { size: { width, height } }\r\n}\r\n\r\nexport const containerGeometry = <AppEvent>(ui: Container<AppEvent>, layout: ContainerLayout, offset: Offset, cameraStack: CameraStack): ContainerGeometry => {\r\n    const x0 = offset.x + (ui.x ?? 0)\r\n    const x1 = x0 + layout.size.width\r\n    const y0 = offset.y + (ui.y ?? 0)\r\n    const y1 = y0 + layout.size.height\r\n    const worldSpace = transformWorldSpace(cameraStack, { x0, x1, y0, y1 })\r\n    const childGeometry = (() => {\r\n        if (ui.child) {\r\n            const childLayout = layout.child!\r\n            const childOffset = {\r\n                x: x0 + ui.padding.left,\r\n                y: y0 + ui.padding.top\r\n            }\r\n            return geometry(ui.child, childLayout, childOffset, cameraStack)\r\n        }\r\n        return undefined\r\n    })()\r\n    if (ui.color) {\r\n        const { red, green, blue, alpha } = ui.color\r\n        return {\r\n            worldSpace,\r\n            vertices: [\r\n                x0, y0,\r\n                x0, y1,\r\n                x1, y0,\r\n                x1, y1,\r\n            ],\r\n            colors: [\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n                red, green, blue, alpha,\r\n            ],\r\n            vertexIndices: [\r\n                0, 1, 2,\r\n                1, 2, 3\r\n            ],\r\n            cameraIndex: Array(4).fill(activeCamera(cameraStack)),\r\n            textureIndex: 0,\r\n            textureCoordinates: Array(8).fill(0),\r\n            child: childGeometry\r\n        }\r\n    }\r\n    return {\r\n        worldSpace,\r\n        vertices: [],\r\n        colors: [],\r\n        vertexIndices: [],\r\n        cameraIndex: [],\r\n        textureIndex: 0,\r\n        textureCoordinates: [],\r\n        child: childGeometry\r\n    }\r\n}\r\n\r\nexport function* containerTraverse<AppEvent>(ui: Container<AppEvent>, layout: ContainerLayout, geometry: ContainerGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    if (ui.child) {\r\n        const childLayout = layout.child!\r\n        const childGeometry = geometry.child!\r\n        yield* traverse(ui.child, childLayout, childGeometry, z + 1)\r\n    }\r\n}","import { Constraints, Layout, MeasureText, Size, UI, UIKind, layout, Geometry, Offset, geometry, WorldSpace, Entry, traverse } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"./alignment\"\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface RowLayout {\r\n    readonly size: Size\r\n    readonly totalChildWidth: number\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface RowGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Row<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.ROW,\r\n    readonly mainAxisAlignment: MainAxisAlignment\r\n    readonly crossAxisAlignment: CrossAxisAlignment\r\n    readonly children: UI<AppEvent>[]\r\n}\r\n\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\nexport function row<AppEvent>(children: UI<AppEvent>[]): Row<AppEvent>\r\nexport function row<AppEvent>(properties: Properties, children: UI<AppEvent>[]): Row<AppEvent>\r\nexport function row<AppEvent>(...args: any[]): Row<AppEvent> {\r\n    const [properties, children]: [Properties, UI<AppEvent>[]] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.ROW,\r\n        mainAxisAlignment: properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        crossAxisAlignment: properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    }\r\n}\r\n\r\nexport const rowLayout = <AppEvent>(ui: Row<AppEvent>, constraints: Constraints, measureText: MeasureText): RowLayout => {\r\n    const initialChildren: Layout[] = []\r\n    const initial = {\r\n        children: initialChildren,\r\n        totalChildWidth: 0,\r\n        height: 0\r\n    }\r\n    const result = ui.children.reduce((acc, child) => {\r\n        const childLayout = layout(child, constraints, measureText)\r\n        acc.children.push(childLayout)\r\n        acc.totalChildWidth += childLayout.size.width\r\n        acc.height = Math.max(acc.height, childLayout.size.height)\r\n        return acc\r\n    }, initial)\r\n    const { children, totalChildWidth, height } = result\r\n    const width = ui.mainAxisAlignment == MainAxisAlignment.START ? totalChildWidth : constraints.maxWidth\r\n    return { size: { width, height }, totalChildWidth, children }\r\n}\r\n\r\nexport const rowGeometry = <AppEvent>(ui: Row<AppEvent>, layout: RowLayout, offset: Offset, cameraStack: CameraStack): RowGeometry => {\r\n    const initialChildren: Geometry[] = []\r\n    const freeSpaceX = layout.size.width - layout.totalChildWidth\r\n    const initial = {\r\n        children: initialChildren,\r\n        x: (() => {\r\n            switch (ui.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return offset.x\r\n                case MainAxisAlignment.CENTER: return offset.x + freeSpaceX / 2\r\n                case MainAxisAlignment.END: return offset.x + freeSpaceX\r\n                case MainAxisAlignment.SPACE_EVENLY: return offset.x + freeSpaceX / (ui.children.length + 1)\r\n                case MainAxisAlignment.SPACE_BETWEEN: return offset.x\r\n            }\r\n        })(),\r\n    }\r\n    const addXStart = (childLayout: Layout) => childLayout.size.width\r\n    const addXCenter = (childLayout: Layout) => childLayout.size.width\r\n    const addXEnd = (childLayout: Layout) => childLayout.size.width\r\n    const addXSpaceEvenly = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (ui.children.length + 1)\r\n    const addXSpaceBetween = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (ui.children.length - 1)\r\n    const addX = (() => {\r\n        switch (ui.mainAxisAlignment) {\r\n            case MainAxisAlignment.START: return addXStart\r\n            case MainAxisAlignment.CENTER: return addXCenter\r\n            case MainAxisAlignment.END: return addXEnd\r\n            case MainAxisAlignment.SPACE_EVENLY: return addXSpaceEvenly\r\n            case MainAxisAlignment.SPACE_BETWEEN: return addXSpaceBetween\r\n        }\r\n    })()\r\n    const offsetYStart = (_: Layout) => offset.y\r\n    const offsetYCenter = (childLayout: Layout) => offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n    const offsetYEnd = (childLayout: Layout) => offset.y + layout.size.height - childLayout.size.height\r\n    const offsetY = (() => {\r\n        switch (ui.crossAxisAlignment) {\r\n            case CrossAxisAlignment.START: return offsetYStart\r\n            case CrossAxisAlignment.CENTER: return offsetYCenter\r\n            case CrossAxisAlignment.END: return offsetYEnd\r\n        }\r\n    })()\r\n    const result = ui.children.reduce((acc, child, i) => {\r\n        const childLayout = layout.children[i]\r\n        const childOffset = { x: acc.x, y: offsetY(childLayout) }\r\n        const childGeometry = geometry(child, childLayout, childOffset, cameraStack)\r\n        acc.children.push(childGeometry)\r\n        acc.x += addX(childLayout)\r\n        return acc\r\n    }, initial)\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    return { worldSpace, children: result.children }\r\n}\r\n\r\nexport function* rowTraverse<AppEvent>(ui: Row<AppEvent>, layout: RowLayout, geometry: RowGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    const nextZ = z + 1\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        yield* traverse(child, layout.children[i], geometry.children[i], nextZ)\r\n        i += 1\r\n    }\r\n}","import { Connection, Constraints, Entry, geometry, Geometry, layout, Layout, MeasureText, Offset, Size, traverse, UI, UIKind, WorldSpace } from \".\"\r\nimport { Matrix3x3 } from \"../linear_algebra/matrix3x3\"\r\nimport { CameraStack, popCamera, pushCamera, transformWorldSpace } from \"./camera_stack\"\r\n\r\nexport interface SceneLayout {\r\n    readonly size: Size\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface SceneGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Scene<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.SCENE\r\n    readonly camera: Matrix3x3\r\n    readonly children: UI<AppEvent>[]\r\n    readonly connections: Connection[]\r\n}\r\n\r\nexport interface Properties<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly camera: Matrix3x3\r\n    readonly children: UI<AppEvent>[]\r\n    readonly connections?: Connection[]\r\n}\r\n\r\nexport const scene = <AppEvent>({ id, onClick, camera, children, connections }: Properties<AppEvent>): Scene<AppEvent> => ({\r\n    id, onClick, kind: UIKind.SCENE, camera, children, connections: connections ?? []\r\n})\r\n\r\nexport const sceneLayout = <AppEvent>(ui: Scene<AppEvent>, constraints: Constraints, measureText: MeasureText): SceneLayout => {\r\n    const children = ui.children.map(c => layout(c, constraints, measureText))\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, children }\r\n}\r\n\r\nexport const sceneGeometry = <AppEvent>(ui: Scene<AppEvent>, layout: SceneLayout, offset: Offset, cameraStack: CameraStack): SceneGeometry => {\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height\r\n    })\r\n    pushCamera(cameraStack, ui.camera)\r\n    const children = ui.children.map((c, i) => geometry(c, layout.children[i], offset, cameraStack))\r\n    popCamera(cameraStack)\r\n    return { worldSpace, children }\r\n}\r\n\r\nexport function* sceneTraverse<AppEvent>(ui: Scene<AppEvent>, layout: SceneLayout, geometry: SceneGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        for (const entry of traverse(child, layout.children[i], geometry.children[i], z)) {\r\n            yield entry\r\n            z = Math.max(z, entry.z)\r\n        }\r\n        i++\r\n        z++\r\n    }\r\n}\r\n","import { Constraints, Geometry, layout, Layout, MeasureText, Offset, Size, UI, UIKind, WorldSpace, geometry, Entry, traverse } from \".\";\r\nimport { CameraStack, transformWorldSpace } from \"./camera_stack\";\r\n\r\nexport interface StackLayout {\r\n    readonly size: Size\r\n    readonly children: Layout[]\r\n}\r\n\r\nexport interface StackGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly children: Geometry[]\r\n}\r\n\r\nexport interface Stack<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    kind: UIKind.STACK\r\n    children: UI<AppEvent>[]\r\n}\r\n\r\nexport const stack = <AppEvent>(children: UI<AppEvent>[]): Stack<AppEvent> => ({\r\n    kind: UIKind.STACK,\r\n    children\r\n})\r\n\r\nexport const stackLayout = <AppEvent>(ui: Stack<AppEvent>, constraints: Constraints, measureText: MeasureText): StackLayout => {\r\n    const children = ui.children.map(c => layout(c, constraints, measureText))\r\n    const width = constraints.maxWidth\r\n    const height = constraints.maxHeight\r\n    return { size: { width, height }, children }\r\n}\r\n\r\nexport const stackGeometry = <AppEvent>(ui: Stack<AppEvent>, layout: StackLayout, offset: Offset, cameraStack: CameraStack): StackGeometry => {\r\n    const children = ui.children.map((c, i) => geometry(c, layout.children[i], offset, cameraStack))\r\n    const worldSpace = transformWorldSpace(cameraStack, {\r\n        x0: offset.x,\r\n        y0: offset.y,\r\n        x1: offset.x + layout.size.width,\r\n        y1: offset.y + layout.size.height,\r\n    })\r\n    return { worldSpace, children }\r\n}\r\n\r\nexport function* stackTraverse<AppEvent>(ui: Stack<AppEvent>, layout: StackLayout, geometry: StackGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n    let i = 0\r\n    for (const child of ui.children) {\r\n        for (const entry of traverse(child, layout.children[i], geometry.children[i], z)) {\r\n            yield entry\r\n            z = Math.max(z, entry.z)\r\n        }\r\n        i += 1\r\n        z += 1\r\n    }\r\n}","import { Color, Constraints, Entry, Font, MeasureText, Offset, Size, TextMeasurements, UIKind, WorldSpace } from \".\";\r\nimport { activeCamera, CameraStack, transformWorldSpace } from \"./camera_stack\";\r\n\r\nexport interface TextLayout {\r\n    readonly measurements: TextMeasurements\r\n    readonly size: Size\r\n}\r\n\r\nexport interface TextGeometry {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly colors: number[]\r\n    readonly vertices: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n}\r\n\r\nexport interface Text<AppEvent> {\r\n    readonly id?: string\r\n    readonly onClick?: AppEvent\r\n    readonly kind: UIKind.TEXT\r\n    readonly font: Font\r\n    readonly color: Color\r\n    readonly str: string\r\n}\r\n\r\ninterface Properties {\r\n    readonly font?: string\r\n    readonly size?: number\r\n    readonly color?: Color\r\n}\r\n\r\nexport function text<AppEvent>(str: string): Text<AppEvent>\r\nexport function text<AppEvent>(properties: Properties, str: string): Text<AppEvent>\r\nexport function text<AppEvent>(...args: any[]): Text<AppEvent> {\r\n    const [properties, str]: [Properties, string] = (() =>\r\n        typeof args[0] == 'string' ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return {\r\n        kind: UIKind.TEXT,\r\n        font: {\r\n            family: properties.font ?? \"monospace\",\r\n            size: properties.size ?? 14\r\n        },\r\n        color: properties.color ?? { red: 255, green: 255, blue: 255, alpha: 255 },\r\n        str\r\n    }\r\n}\r\n\r\nexport const textLayout = <AppEvent>({ font, str }: Text<AppEvent>, _: Constraints, measureText: MeasureText): TextLayout => {\r\n    const measurements = measureText(font, str)\r\n    const width = measurements.widths.reduce((acc, width) => acc + width)\r\n    const size = { width, height: font.size }\r\n    return { measurements, size }\r\n}\r\n\r\nconst vertices = (widths: number[], height: number, offset: Offset) => {\r\n    const result = []\r\n    let offsetX = offset.x\r\n    const y0 = offset.y\r\n    const y1 = offset.y + height\r\n    for (const width of widths) {\r\n        const x0 = offsetX\r\n        const x1 = offsetX + width\r\n        result.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        )\r\n        offsetX += width\r\n    }\r\n    return result\r\n}\r\n\r\nconst colors = (n: number, { red, green, blue, alpha }: Color) => {\r\n    const result = []\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n        )\r\n    }\r\n    return result\r\n}\r\n\r\nconst vertexIndices = (n: number) => {\r\n    const result = []\r\n    let offset = 0\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            offset, offset + 1, offset + 2,\r\n            offset + 1, offset + 2, offset + 3\r\n        )\r\n        offset += 4\r\n    }\r\n    return result\r\n}\r\n\r\nexport const textGeometry = <AppEvent>(ui: Text<AppEvent>, layout: TextLayout, offset: Offset, cameraStack: CameraStack): TextGeometry => {\r\n    const textLayout = layout as TextLayout\r\n    const { measurements } = textLayout\r\n    const { textureIndex, textureCoordinates, widths } = measurements\r\n    return {\r\n        worldSpace: transformWorldSpace(cameraStack, {\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        }),\r\n        textureIndex,\r\n        textureCoordinates: textureCoordinates.flat(),\r\n        colors: colors(widths.length, ui.color),\r\n        vertices: vertices(widths, ui.font.size, offset),\r\n        vertexIndices: vertexIndices(widths.length),\r\n        cameraIndex: Array(widths.length * 4).fill(activeCamera(cameraStack))\r\n    }\r\n}\r\n\r\nexport function* textTraverse<AppEvent>(ui: Text<AppEvent>, layout: TextLayout, geometry: TextGeometry, z: number): Generator<Entry<AppEvent>> {\r\n    yield { ui, layout, geometry, z }\r\n}","import { Center, CenterLayout, centerLayout, CenterGeometry, centerGeometry, centerTraverse } from './center'\r\nimport { Column, ColumnLayout, columnLayout, ColumnGeometry, columnGeometry, columnTraverse } from './column'\r\nimport { Container, ContainerLayout, containerLayout, ContainerGeometry, containerGeometry, containerTraverse } from './container'\r\nimport { Row, RowLayout, rowLayout, RowGeometry, rowGeometry, rowTraverse } from './row'\r\nimport { Scene, SceneLayout, sceneLayout, SceneGeometry, sceneGeometry, sceneTraverse } from './scene'\r\nimport { Stack, StackLayout, stackLayout, StackGeometry, stackGeometry, stackTraverse } from './stack'\r\nimport { Text, TextLayout, textLayout, TextGeometry, textGeometry, textTraverse } from './text'\r\nimport { CameraStack } from './camera_stack'\r\nimport { Matrix3x3 } from '../linear_algebra/matrix3x3'\r\nimport { Batch } from './batch_geometry'\r\nimport { ClickHandlers } from './gather_on_click_handlers'\r\nimport { Position } from '../graph/model'\r\n\r\nexport { center } from './center'\r\nexport { column } from './column'\r\nexport { container } from './container'\r\nexport { row } from './row'\r\nexport { scene } from './scene'\r\nexport { stack } from './stack'\r\nexport { text } from './text'\r\n\r\nexport enum UIKind {\r\n    CENTER,\r\n    COLUMN,\r\n    CONTAINER,\r\n    ROW,\r\n    SCENE,\r\n    STACK,\r\n    TEXT,\r\n}\r\n\r\nexport type UI<AppEvent> =\r\n    | Center<AppEvent>\r\n    | Column<AppEvent>\r\n    | Container<AppEvent>\r\n    | Row<AppEvent>\r\n    | Scene<AppEvent>\r\n    | Stack<AppEvent>\r\n    | Text<AppEvent>\r\n\r\nexport interface Color {\r\n    red: number\r\n    green: number\r\n    blue: number\r\n    alpha: number\r\n}\r\n\r\nexport interface Size {\r\n    readonly width: number\r\n    readonly height: number\r\n}\r\n\r\nexport interface Constraints {\r\n    readonly minWidth: number\r\n    readonly maxWidth: number\r\n    readonly minHeight: number\r\n    readonly maxHeight: number\r\n}\r\n\r\nexport type Layout =\r\n    | CenterLayout\r\n    | ColumnLayout\r\n    | ContainerLayout\r\n    | RowLayout\r\n    | SceneLayout\r\n    | StackLayout\r\n    | TextLayout\r\n\r\nexport interface Font {\r\n    readonly family: string\r\n    readonly size: number\r\n}\r\n\r\nexport interface TextMeasurements {\r\n    readonly widths: number[]\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[][]\r\n}\r\n\r\nexport type MeasureText = (font: Font, str: string) => TextMeasurements\r\n\r\nexport const layout = <AppEvent>(ui: UI<AppEvent>, constraints: Constraints, measureText: MeasureText): Layout => {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            return centerLayout(ui, constraints, measureText)\r\n        case UIKind.COLUMN:\r\n            return columnLayout(ui, constraints, measureText)\r\n        case UIKind.CONTAINER:\r\n            return containerLayout(ui, constraints, measureText)\r\n        case UIKind.ROW:\r\n            return rowLayout(ui, constraints, measureText)\r\n        case UIKind.SCENE:\r\n            return sceneLayout(ui, constraints, measureText)\r\n        case UIKind.STACK:\r\n            return stackLayout(ui, constraints, measureText)\r\n        case UIKind.TEXT:\r\n            return textLayout(ui, constraints, measureText)\r\n    }\r\n}\r\n\r\nexport interface Offset {\r\n    readonly x: number\r\n    readonly y: number\r\n}\r\n\r\nexport interface WorldSpace {\r\n    readonly x0: number\r\n    readonly y0: number\r\n    readonly x1: number\r\n    readonly y1: number\r\n}\r\n\r\nexport type Geometry =\r\n    | CenterGeometry\r\n    | ColumnGeometry\r\n    | ContainerGeometry\r\n    | RowGeometry\r\n    | SceneGeometry\r\n    | StackGeometry\r\n    | TextGeometry\r\n\r\nexport const geometry = <AppEvent>(ui: UI<AppEvent>, layout: Layout, offset: Offset, cameraStack: CameraStack): Geometry => {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            return centerGeometry(ui, layout as CenterLayout, offset, cameraStack)\r\n        case UIKind.COLUMN:\r\n            return columnGeometry(ui, layout as ColumnLayout, offset, cameraStack)\r\n        case UIKind.CONTAINER:\r\n            return containerGeometry(ui, layout as ContainerLayout, offset, cameraStack)\r\n        case UIKind.ROW:\r\n            return rowGeometry(ui, layout as RowLayout, offset, cameraStack)\r\n        case UIKind.SCENE:\r\n            return sceneGeometry(ui, layout as SceneLayout, offset, cameraStack)\r\n        case UIKind.STACK:\r\n            return stackGeometry(ui, layout as StackLayout, offset, cameraStack)\r\n        case UIKind.TEXT:\r\n            return textGeometry(ui, layout as TextLayout, offset, cameraStack)\r\n    }\r\n}\r\n\r\nexport interface Entry<AppEvent> {\r\n    readonly ui: UI<AppEvent>\r\n    readonly layout: Layout\r\n    readonly geometry: Geometry\r\n    readonly z: number\r\n}\r\n\r\nexport function* traverse<AppEvent>(ui: UI<AppEvent>, layout: Layout, geometry: Geometry, z: number): Generator<Entry<AppEvent>> {\r\n    switch (ui.kind) {\r\n        case UIKind.CENTER:\r\n            yield* centerTraverse(ui, layout as CenterLayout, geometry as CenterGeometry, z)\r\n            break\r\n        case UIKind.COLUMN:\r\n            yield* columnTraverse(ui, layout as ColumnLayout, geometry as ColumnGeometry, z)\r\n            break\r\n        case UIKind.CONTAINER:\r\n            yield* containerTraverse(ui, layout as ContainerLayout, geometry as ContainerGeometry, z)\r\n            break\r\n        case UIKind.ROW:\r\n            yield* rowTraverse(ui, layout as RowLayout, geometry as RowGeometry, z)\r\n            break\r\n        case UIKind.SCENE:\r\n            yield* sceneTraverse(ui, layout as SceneLayout, geometry as SceneGeometry, z)\r\n            break\r\n        case UIKind.STACK:\r\n            yield* stackTraverse(ui, layout as StackLayout, geometry as StackGeometry, z)\r\n            break\r\n        case UIKind.TEXT:\r\n            yield* textTraverse(ui, layout as TextLayout, geometry as TextGeometry, z)\r\n            break\r\n    }\r\n}\r\n\r\nexport interface Connection {\r\n    from: string\r\n    to: string\r\n    color: Color\r\n}\r\n\r\nexport interface Renderer<AppEvent> {\r\n    size: Size\r\n    cameras: Matrix3x3[]\r\n    clickHandlers: ClickHandlers<AppEvent>\r\n    clear: () => void\r\n    draw: (batch: Batch) => void\r\n    measureText: MeasureText\r\n    dispatch: (event: AppEvent) => void\r\n}\r\n\r\nexport interface Pointer {\r\n    id: number\r\n    position: Position\r\n}","import { UI, Geometry, Layout, Entry, traverse } from \".\";\r\n\r\nexport interface Reducer<AppEvent, T> {\r\n    initial: () => T\r\n    combine: (accumulator: T, entry: Entry<AppEvent>) => T\r\n}\r\n\r\nexport const reduce = <AppEvent, T>(ui: UI<AppEvent>, layout: Layout, geometry: Geometry, reducer: Reducer<AppEvent, T>): T => {\r\n    const accumulator = reducer.initial()\r\n    for (const entry of traverse(ui, layout, geometry, 0)) {\r\n        reducer.combine(accumulator, entry)\r\n    }\r\n    return accumulator\r\n}","import { Entry, WorldSpace } from \".\"\r\n\r\nexport interface ClickHandler<AppEvent> {\r\n    onClick: AppEvent\r\n    worldSpace: WorldSpace\r\n}\r\n\r\nexport type ClickHandlers<AppEvent> = ClickHandler<AppEvent>[][]\r\n\r\nexport const initial = <AppEvent>(): ClickHandlers<AppEvent> => []\r\n\r\nexport const combine = <AppEvent>(handlers: ClickHandlers<AppEvent>, entry: Entry<AppEvent>): ClickHandlers<AppEvent> => {\r\n    if (entry.ui.onClick === undefined) return handlers\r\n    const needed = entry.z - handlers.length + 1\r\n    for (let i = 0; i < needed; ++i) handlers.push([])\r\n    handlers[entry.z].push({\r\n        onClick: entry.ui.onClick,\r\n        worldSpace: entry.geometry.worldSpace\r\n    })\r\n    return handlers\r\n}\r\n","import { Entry, WorldSpace } from \".\"\r\n\r\nexport type IdToWorldSpace = { [id: string]: WorldSpace }\r\n\r\nexport const initial = (): IdToWorldSpace => ({})\r\n\r\nexport const combine = <AppEvent>(lookup: IdToWorldSpace, entry: Entry<AppEvent>): IdToWorldSpace => {\r\n    if (!entry.ui.id) return lookup\r\n    lookup[entry.ui.id] = entry.geometry.worldSpace\r\n    return lookup\r\n}","import { Entry, UIKind } from \".\"\r\nimport { ContainerGeometry } from \"./container\"\r\nimport { TextGeometry } from \"./text\"\r\n\r\ntype Geometry = ContainerGeometry | TextGeometry\r\nexport type Layer = { [textureIndex: number]: Geometry[] }\r\nexport type Layers = Layer[]\r\n\r\nexport const initial = (): Layers => []\r\n\r\nexport const combine = <AppEvent>(layers: Layers, entry: Entry<AppEvent>): Layers => {\r\n    switch (entry.ui.kind) {\r\n        case UIKind.CONTAINER:\r\n        case UIKind.TEXT:\r\n            const entryGeometry = entry.geometry as Geometry\r\n            if (entryGeometry.vertices.length == 0) return layers\r\n            const needed = entry.z - layers.length + 1\r\n            for (let i = 0; i < needed; ++i) layers.push({})\r\n            const layer = layers[entry.z]\r\n            const geometry = (() => {\r\n                const geometry = layer[entryGeometry.textureIndex]\r\n                if (geometry) return geometry\r\n                const newGeometry: Geometry[] = []\r\n                layer[entryGeometry.textureIndex] = newGeometry\r\n                return newGeometry\r\n            })()\r\n            geometry.push(entryGeometry)\r\n            return layers\r\n        default:\r\n            return layers\r\n    }\r\n}\r\n","import { Entry, Connection, UIKind } from \".\"\r\nimport { inverse, multiplyMatrixVector } from \"../linear_algebra/matrix3x3\"\r\nimport { length } from \"../linear_algebra/vector3\"\r\n\r\nexport interface ConnectionsAndScale {\r\n    connections: Connection[]\r\n    scale: number\r\n}\r\n\r\nexport type Connections = ConnectionsAndScale[][]\r\n\r\nexport const initial = (): Connections => []\r\n\r\nexport const combine = <AppEvent>(connections: Connections, entry: Entry<AppEvent>): Connections => {\r\n    if (entry.ui.kind == UIKind.SCENE) {\r\n        if (entry.ui.connections.length === 0) return connections\r\n        const needed = entry.z - connections.length + 1\r\n        for (let i = 0; i < needed; ++i) connections.push([])\r\n        const layer = connections[entry.z]\r\n        layer.push({\r\n            connections: entry.ui.connections,\r\n            scale: length(multiplyMatrixVector(inverse(entry.ui.camera), [0, 1, 0]))\r\n        })\r\n        return connections\r\n    }\r\n    return connections\r\n}\r\n","import { Entry } from \".\"\r\nimport { ClickHandlers } from \"./gather_on_click_handlers\"\r\nimport * as gatherOnClickHandlers from \"./gather_on_click_handlers\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\nimport * as buildIdToWorldSpace from \"./id_to_world_space\"\r\nimport { Layers } from \"./layer_geometry\"\r\nimport * as layerGeometry from \"./layer_geometry\"\r\nimport { Connections } from \"./gather_connections\"\r\nimport * as gatherConnections from \"./gather_connections\"\r\n\r\nexport interface Accumulator<AppEvent> {\r\n    layers: Layers,\r\n    clickHandlers: ClickHandlers<AppEvent>,\r\n    idToWorldSpace: IdToWorldSpace\r\n    connections: Connections\r\n}\r\n\r\nexport const initial = <AppEvent>(): Accumulator<AppEvent> => ({\r\n    layers: layerGeometry.initial(),\r\n    clickHandlers: gatherOnClickHandlers.initial(),\r\n    idToWorldSpace: buildIdToWorldSpace.initial(),\r\n    connections: gatherConnections.initial()\r\n})\r\n\r\nexport const combine = <AppEvent>(acc: Accumulator<AppEvent>, entry: Entry<AppEvent>): Accumulator<AppEvent> => ({\r\n    layers: layerGeometry.combine(acc.layers, entry),\r\n    clickHandlers: gatherOnClickHandlers.combine(acc.clickHandlers, entry),\r\n    idToWorldSpace: buildIdToWorldSpace.combine(acc.idToWorldSpace, entry),\r\n    connections: gatherConnections.combine(acc.connections, entry)\r\n})\r\n","import { batchGeometry } from \"./batch_geometry\"\r\nimport { initCameraStack } from \"./camera_stack\"\r\nimport { reduce } from \"./reduce\"\r\nimport { UI, layout, geometry, Renderer } from \".\"\r\nimport * as reducer from './reducer'\r\nimport { Accumulator } from './reducer'\r\n\r\nexport const render = <AppEvent, R extends Renderer<AppEvent>>(renderer: R, ui: UI<AppEvent>): R => {\r\n    const { width, height } = renderer.size\r\n    renderer.clear()\r\n    const constraints = {\r\n        minWidth: 0,\r\n        maxWidth: width,\r\n        minHeight: 0,\r\n        maxHeight: height\r\n    }\r\n    const uiLayout = layout(ui, constraints, renderer.measureText)\r\n    const offsets = { x: 0, y: 0 }\r\n    const cameraStack = initCameraStack()\r\n    const uiGeometry = geometry(ui, uiLayout, offsets, cameraStack)\r\n    const { layers, clickHandlers, connections, idToWorldSpace } = reduce<AppEvent, Accumulator<AppEvent>>(ui, uiLayout, uiGeometry, reducer)\r\n    const batches = batchGeometry(layers, connections, idToWorldSpace)\r\n    renderer.cameras = cameraStack.cameras\r\n    renderer.clickHandlers = clickHandlers\r\n    for (const batch of batches) renderer.draw(batch)\r\n    return renderer\r\n}\r\n","import { Batch } from \"./batch_geometry\";\r\nimport { Font, TextMeasurements, Size } from \".\";\r\nimport { Matrix3x3, projection } from \"../linear_algebra/matrix3x3\";\r\nimport { Document, WebGL2Context, Buffer, UniformLocation, Shader, Program, Canvas, Texture, Window } from \"./dom\";\r\nimport { ClickHandlers } from \"./gather_on_click_handlers\";\r\n\r\ninterface Attribute {\r\n    location: number\r\n    buffer: Buffer\r\n}\r\n\r\ninterface Attributes {\r\n    vertices: Attribute\r\n    vertexIndices: Buffer\r\n    colors: Attribute\r\n    textureCoordinates: Attribute\r\n    cameraIndex: Attribute\r\n}\r\n\r\ninterface Uniforms {\r\n    projection: UniformLocation\r\n    texture: UniformLocation\r\n    cameras: UniformLocation\r\n}\r\n\r\nexport enum ProgramKind { DATA, ERROR }\r\n\r\ninterface ProgramData {\r\n    kind: ProgramKind.DATA\r\n    vertexShader: Shader\r\n    fragmentShader: Shader\r\n    program: Program\r\n    attributes: Attributes\r\n    uniforms: Uniforms\r\n}\r\n\r\nexport interface ProgramError {\r\n    kind: ProgramKind.ERROR\r\n    vertexInfoLog: string | null\r\n    fragmentInfoLog: string | null\r\n}\r\n\r\n\r\ntype DevicePixelRatio = number\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\nconst createTextMeasurements = (document: Document, gl: WebGL2Context, font: Font, dpr: DevicePixelRatio) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(font.size * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * dpr\r\n    canvas.height = size * dpr\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(dpr, dpr)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = `${font.size}px ${font.family}`\r\n    ctx.fillStyle = 'white'\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const height = font.size\r\n    const widths: number[] = []\r\n    const textureCoordinates: number[][] = []\r\n    for (let i = 0; i < totalCells; ++i) {\r\n        const c = String.fromCharCode(i)\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        widths.push(width)\r\n        const x0 = x / size\r\n        const x1 = (x + width) / size\r\n        const y0 = y / size\r\n        const y1 = (y + height) / size\r\n        textureCoordinates.push([\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        ])\r\n    }\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas\r\n    )\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return { widths, textureCoordinates, texture }\r\n}\r\n\r\nconst mapString = <T>(str: string, f: (c: string, i: number) => T): Array<T> => {\r\n    let result = []\r\n    for (let i = 0; i < str.length; ++i) {\r\n        result.push(f(str[i], i))\r\n    }\r\n    return result\r\n}\r\n\r\nexport class WebGL2Renderer<AppEvent> {\r\n    _size: Size\r\n    _cameras: Matrix3x3[]\r\n    kind: ProgramKind.DATA = ProgramKind.DATA\r\n\r\n    constructor(\r\n        public window: Window,\r\n        public document: Document,\r\n        public canvas: Canvas,\r\n        public gl: WebGL2Context,\r\n        public program: ProgramData,\r\n        public textures: Texture[],\r\n        public textMeasurementsCache: Map<string, TextMeasurements>,\r\n        public clickHandlers: ClickHandlers<AppEvent>,\r\n        public dispatch: (event: AppEvent) => void\r\n    ) {\r\n    }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    set size(size: Size) {\r\n        const { gl, program, window } = this\r\n        const { uniforms } = program\r\n        const { canvas } = gl\r\n        gl.uniformMatrix3fv(uniforms.projection, /*transpose*/true, projection(size))\r\n        canvas.width = size.width * window.devicePixelRatio\r\n        canvas.height = size.height * window.devicePixelRatio\r\n        canvas.style.width = `${size.width}px`\r\n        canvas.style.height = `${size.height}px`\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this._size = size\r\n    }\r\n\r\n    get size() { return this._size }\r\n\r\n    set cameras(cameras: Matrix3x3[]) {\r\n        const { gl, program } = this\r\n        const { uniforms } = program\r\n        const data: number[] = []\r\n        for (const camera of cameras) data.push(...camera)\r\n        gl.uniformMatrix3fv(uniforms.cameras, /*transpose*/true, data)\r\n        this._cameras = cameras\r\n    }\r\n\r\n    get cameras() { return this._cameras }\r\n\r\n    draw = ({ triangles, lines }: Batch) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        {\r\n            const { vertices, colors, vertexIndices, textureCoordinates, textureIndex, cameraIndex } = triangles\r\n            if (vertices.length !== 0) {\r\n                const texture = textures[textureIndex]\r\n                gl.bindTexture(gl.TEXTURE_2D, texture)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndex), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.vertexIndices)\r\n                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n                gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n            }\r\n        }\r\n        {\r\n            const { vertices, colors } = lines\r\n            if (vertices.length !== 0) {\r\n                const texture = textures[0]\r\n                const count = vertices.length / 2\r\n                gl.bindTexture(gl.TEXTURE_2D, texture)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(Array(count * 2).fill(0)), gl.STATIC_DRAW)\r\n                gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n                gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(Array(count).fill(0)), gl.STATIC_DRAW)\r\n                gl.drawArrays(gl.LINES, /*first*/0, count)\r\n            }\r\n        }\r\n    }\r\n\r\n    getTextureMeasurements = (font: Font, dpr: DevicePixelRatio) => {\r\n        const { document, gl } = this\r\n        const key = `${dpr} ${font.size} ${font.family}`\r\n        const measurements = this.textMeasurementsCache.get(key)\r\n        if (measurements) return measurements\r\n        const { texture, widths, textureCoordinates } = createTextMeasurements(document, gl, font, dpr)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newMeasurements = { widths, textureIndex, textureCoordinates }\r\n        this.textMeasurementsCache.set(key, newMeasurements)\r\n        return newMeasurements\r\n    }\r\n\r\n    measureText = (font: Font, str: string) => {\r\n        const { window } = this\r\n        const dpr = window.devicePixelRatio\r\n        const { widths, textureIndex, textureCoordinates } = this.getTextureMeasurements(font, dpr)\r\n        const indices = mapString(str, c => c.charCodeAt(0))\r\n        return {\r\n            widths: indices.map(i => widths[i]),\r\n            textureIndex,\r\n            textureCoordinates: indices.map(i => textureCoordinates[i]),\r\n        }\r\n    }\r\n}\r\n\r\nconst createVertexShader = (gl: WebGL2Context, attributes: Attributes): Shader => {\r\n    const { vertices, colors, textureCoordinates, cameraIndex } = attributes\r\n    const vertexShaderSource = `#version 300 es\r\n  uniform mat3 u_projection;\r\n  uniform mat3 u_cameras[8];\r\n\r\n  layout(location = ${vertices.location}) in vec2 a_vertex;\r\n  layout(location = ${colors.location}) in vec4 a_color;\r\n  layout(location = ${textureCoordinates.location}) in vec2 a_textureCoordinates;\r\n  layout(location = ${cameraIndex.location}) in uint a_cameraIndex;\r\n\r\n  out vec4 v_color;\r\n  out vec2 v_textureCoordinates;\r\n\r\n  void main() {\r\n    mat3 camera = u_cameras[a_cameraIndex];\r\n    mat3 transform = u_projection * inverse(camera);\r\n    gl_Position = vec4((transform * vec3(a_vertex, 1)).xy, 0, 1);\r\n    v_color = a_color / 255.0;\r\n    v_textureCoordinates = a_textureCoordinates;\r\n  }\r\n  `\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n    gl.shaderSource(vertexShader, vertexShaderSource)\r\n    gl.compileShader(vertexShader)\r\n    return vertexShader\r\n}\r\n\r\nconst createFragmentShader = (gl: WebGL2Context): Shader => {\r\n    const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec4 v_color;\r\n  in vec2 v_textureCoordinates;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  void main() {\r\n    fragColor = texture(u_texture, v_textureCoordinates) * v_color;\r\n  }\r\n  `\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n    gl.compileShader(fragmentShader)\r\n    return fragmentShader\r\n}\r\n\r\nconst bindVertices = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_vertex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindColors = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_color')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindTextureCoordinates = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_textureCoordinates')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindCameraIndex = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_cameraIndex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribIPointer(\r\n        location,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst createProgram = (gl: WebGL2Context): ProgramData | ProgramError => {\r\n    const attributes: Attributes = {\r\n        vertices: {\r\n            location: 0,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        colors: {\r\n            location: 1,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        textureCoordinates: {\r\n            location: 2,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        cameraIndex: {\r\n            location: 3,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        vertexIndices: gl.createBuffer()!\r\n    }\r\n    const vertexShader = createVertexShader(gl, attributes)\r\n    const fragmentShader = createFragmentShader(gl)\r\n    const program = gl.createProgram()!\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        return {\r\n            kind: ProgramKind.ERROR,\r\n            vertexInfoLog: gl.getShaderInfoLog(vertexShader),\r\n            fragmentInfoLog: gl.getShaderInfoLog(fragmentShader),\r\n        }\r\n    }\r\n    gl.useProgram(program)\r\n    const vertexArrayObject = gl.createVertexArray()!\r\n    gl.bindVertexArray(vertexArrayObject)\r\n    bindVertices(gl, program, attributes.vertices)\r\n    bindColors(gl, program, attributes.colors)\r\n    bindTextureCoordinates(gl, program, attributes.textureCoordinates)\r\n    bindCameraIndex(gl, program, attributes.cameraIndex)\r\n    const uniforms: Uniforms = {\r\n        projection: gl.getUniformLocation(program, 'u_projection')!,\r\n        texture: gl.getUniformLocation(program, 'u_texture')!,\r\n        cameras: gl.getUniformLocation(program, 'u_cameras')!\r\n    }\r\n    return {\r\n        kind: ProgramKind.DATA,\r\n        vertexShader,\r\n        fragmentShader,\r\n        program,\r\n        attributes,\r\n        uniforms\r\n    }\r\n}\r\n\r\ninterface Parameters<AppEvent> {\r\n    width: number\r\n    height: number\r\n    document: Document\r\n    window: Window\r\n    dispatch?: (event: AppEvent) => void\r\n}\r\n\r\nexport const webGL2Renderer = <AppEvent>({ width, height, document, window, dispatch }: Parameters<AppEvent>): WebGL2Renderer<AppEvent> | ProgramError => {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.style.touchAction = 'none'\r\n    const gl = canvas.getContext('webgl2')!\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n    gl.depthMask(false)\r\n    gl.activeTexture(gl.TEXTURE0)\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n    gl.clearColor(0, 0, 0, 1)\r\n    const program = createProgram(gl)\r\n    if (program.kind == ProgramKind.ERROR) return program\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255])\r\n    )\r\n    const renderer = new WebGL2Renderer<AppEvent>(\r\n        window,\r\n        document,\r\n        canvas,\r\n        gl,\r\n        program,\r\n        [texture],\r\n        new Map(),\r\n        [],\r\n        dispatch ?? (() => { })\r\n    )\r\n    renderer.size = { width, height }\r\n    return renderer\r\n}","import { pointerDown } from \"./pointer_down\"\r\nimport { render } from \"./render\"\r\nimport { ProgramError, ProgramKind, WebGL2Renderer, webGL2Renderer } from \"./webgl2\"\r\nimport { Pointer, UI } from \".\"\r\nimport { Document, Window, PointerEvent } from \"./dom\"\r\n\r\nexport const transformPointer = (p: PointerEvent): Pointer => ({\r\n    id: p.pointerId,\r\n    position: { x: p.clientX, y: p.clientY }\r\n})\r\n\r\nexport type Dispatch<AppEvent> = (event: AppEvent) => void\r\n\r\ntype View<State, AppEvent> = (state: State) => UI<AppEvent>\r\n\r\ninterface Milliseconds {\r\n    milliseconds: number\r\n}\r\n\r\ninterface Scheduled<AppEvent> {\r\n    after: Milliseconds\r\n    event: AppEvent\r\n}\r\n\r\nexport interface UpdateResult<State, AppEvent> {\r\n    state: State\r\n    render?: boolean\r\n    schedule?: Scheduled<AppEvent>[]\r\n    dispatch?: AppEvent[]\r\n}\r\n\r\ntype Update<State, AppEvent> = (state: State, event: AppEvent) => UpdateResult<State, AppEvent>\r\n\r\ninterface Properties<State, AppEvent> {\r\n    state: State\r\n    view: View<State, AppEvent>\r\n    update: Update<State, AppEvent>\r\n    window: Window\r\n    document: Document\r\n    requestAnimationFrame: (callback: () => void) => void\r\n    setTimeout: (callback: () => void, milliseconds: number) => void\r\n    pointerDown: (dispatch: Dispatch<AppEvent>, pointer: Pointer) => void\r\n}\r\n\r\nexport interface Success<AppEvent> {\r\n    kind: ProgramKind.DATA\r\n    dispatch: Dispatch<AppEvent>\r\n}\r\n\r\nexport const run = <State, AppEvent>(properties: Properties<State, AppEvent>): Success<AppEvent> | ProgramError => {\r\n    let { state, view, update, window, document, requestAnimationFrame, setTimeout } = properties\r\n    const renderer_or_error = webGL2Renderer<AppEvent>({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        window,\r\n        document,\r\n    })\r\n    switch (renderer_or_error.kind) {\r\n        case ProgramKind.ERROR:\r\n            return renderer_or_error\r\n        case ProgramKind.DATA:\r\n            let renderer = renderer_or_error\r\n            let renderQueued = false\r\n            const scheduleRender = () => {\r\n                if (!renderQueued) {\r\n                    renderQueued = true\r\n                    requestAnimationFrame(() => {\r\n                        renderer = render(renderer, view(state))\r\n                        renderQueued = false\r\n                    })\r\n                }\r\n            }\r\n            const dispatch = (event: AppEvent) => {\r\n                const { state: newState, render, schedule, dispatch: dispatchEvents } = update(state, event)\r\n                state = newState\r\n                if (render) scheduleRender()\r\n                for (const { after, event } of schedule ?? []) {\r\n                    const { milliseconds } = after\r\n                    setTimeout(() => dispatch(event), milliseconds)\r\n                }\r\n                for (const event of dispatchEvents ?? []) dispatch(event)\r\n            }\r\n            renderer.dispatch = dispatch\r\n            document.body.appendChild(renderer.canvas)\r\n            document.addEventListener(\"pointerdown\", p => {\r\n                const transformed = transformPointer(p)\r\n                properties.pointerDown(dispatch, transformed)\r\n                renderer = pointerDown<AppEvent, WebGL2Renderer<AppEvent>>(renderer, transformed)\r\n            })\r\n            window.addEventListener(\"resize\", () => {\r\n                renderer.size = { width: window.innerWidth, height: window.innerHeight }\r\n                scheduleRender()\r\n            })\r\n            scheduleRender()\r\n            return { kind: ProgramKind.DATA, dispatch }\r\n    }\r\n}\r\n","import { UI, row, column, container, Color, text } from \"..\"\r\nimport { MainAxisAlignment } from \"../alignment\"\r\n\r\nexport interface ContextMenuItem<AppEvent> {\r\n    name: string\r\n    shortcut: string\r\n    onClick: AppEvent\r\n}\r\n\r\ninterface Properties<AppEvent> {\r\n    items: ContextMenuItem<AppEvent>[]\r\n    backgroundColor: Color\r\n}\r\n\r\nexport const contextMenu = <AppEvent>({ items, backgroundColor }: Properties<AppEvent>): UI<AppEvent> =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n            container({ padding: 4, color: backgroundColor },\r\n                column(items.map(({ name, shortcut, onClick }) =>\r\n                    container({\r\n                        padding: 10,\r\n                        onClick\r\n                    }, text({ size: 18 }, `(${shortcut}) ${name}`))\r\n                )))\r\n        ])\r\n    ])","import { CrossAxisAlignment, MainAxisAlignment } from \"../alignment\"\r\nimport { AppEvent, EventKind } from \"../../event\"\r\nimport { Finder, Selected, SelectedKind, State, Theme, VirtualKeyboardKind } from \"../../state\"\r\nimport { text, stack, scene, row, container, column, Connection, UI } from '..'\r\nimport { Body, Graph, Input, Output, UUID } from \"../../graph/model\"\r\nimport { contextMenu, ContextMenuItem } from \"./context_menu\"\r\n\r\n\r\nexport const spacer = (size: number): UI<AppEvent> =>\r\n    container({ width: size, height: size })\r\n\r\n\r\nexport const intersperse = <T>(array: T[], seperator: T): T[] => {\r\n    const result = [array[0]]\r\n    for (const element of array.slice(1)) {\r\n        result.push(seperator, element)\r\n    }\r\n    return result\r\n}\r\n\r\nexport const isSelected = (selected: Selected, uuid: UUID): boolean => {\r\n    switch (selected.kind) {\r\n        case SelectedKind.BODY: return selected.body === uuid\r\n        case SelectedKind.INPUT: return selected.input === uuid\r\n        case SelectedKind.NODE: return selected.node === uuid\r\n        case SelectedKind.NONE: return false\r\n        case SelectedKind.OUTPUT: return selected.output === uuid\r\n    }\r\n}\r\n\r\nexport const inputUi = (theme: Theme, { name, uuid }: Input, selected: Selected): UI<AppEvent> =>\r\n    container({\r\n        onClick: {\r\n            kind: EventKind.CLICKED_INPUT,\r\n            input: uuid\r\n        }\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            container({\r\n                id: uuid,\r\n                width: 14,\r\n                height: 14,\r\n                color: isSelected(selected, uuid) ? theme.selectedInput : theme.input,\r\n            }),\r\n            spacer(4),\r\n            text(name)\r\n        ])\r\n    )\r\n\r\n\r\nexport const inputsUi = (theme: Theme, inputs: Input[], selected: Selected) =>\r\n    column(\r\n        intersperse(\r\n            inputs.map(input => inputUi(theme, input, selected)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\n\r\nexport const outputUi = (theme: Theme, { name, uuid }: Output, selected: Selected): UI<AppEvent> =>\r\n    container({\r\n        onClick: {\r\n            kind: EventKind.CLICKED_OUTPUT,\r\n            output: uuid\r\n        }\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            container({\r\n                id: uuid,\r\n                width: 14,\r\n                height: 14,\r\n                color: isSelected(selected, uuid) ? theme.selectedInput : theme.input,\r\n            }),\r\n        ])\r\n    )\r\n\r\n\r\nexport const outputsUi = (theme: Theme, outputs: Output[], selected: Selected) =>\r\n    column(\r\n        intersperse(\r\n            outputs.map(output => outputUi(theme, output, selected)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\n\r\nexport const numberUi = (theme: Theme, body: Body, selected: Selected): UI<AppEvent> =>\r\n    container({\r\n        color: isSelected(selected, body.uuid) ? theme.selectedInput : theme.background,\r\n        padding: 5,\r\n        onClick: {\r\n            kind: EventKind.CLICKED_NUMBER,\r\n            body: body.uuid\r\n        }\r\n    },\r\n        text(body.value.toString()))\r\n\r\n\r\nexport const nodeUi = (theme: Theme, nodeUUID: UUID, graph: Graph, selected: Selected): UI<AppEvent> => {\r\n    const node = graph.nodes[nodeUUID]\r\n    const rowEntries: UI<AppEvent>[] = []\r\n    if (node.inputs.length) {\r\n        rowEntries.push(inputsUi(theme, node.inputs.map(i => graph.inputs[i]), selected))\r\n    }\r\n    if (node.inputs.length && node.outputs.length) {\r\n        rowEntries.push(spacer(15))\r\n    }\r\n    if (node.body) {\r\n        rowEntries.push(numberUi(theme, graph.bodys[node.body], selected), spacer(15))\r\n    }\r\n    if (node.outputs.length) {\r\n        rowEntries.push(outputsUi(theme, node.outputs.map(o => graph.outputs[o]), selected))\r\n    }\r\n    return container(\r\n        {\r\n            color: isSelected(selected, node.uuid) ? theme.selectedNode : theme.node,\r\n            padding: 4,\r\n            x: node.position.x,\r\n            y: node.position.y,\r\n            onClick: {\r\n                kind: EventKind.CLICKED_NODE,\r\n                node: node.uuid\r\n            }\r\n        },\r\n        column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(node.name),\r\n            spacer(4),\r\n            row(rowEntries)\r\n        ])\r\n    )\r\n}\r\n\r\n\r\nexport const finder = ({ search, options }: Finder, theme: Theme): UI<AppEvent> =>\r\n    column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n        container({ height: 10 }),\r\n        container({ color: theme.node, padding: 4 },\r\n            column([\r\n                container({ color: theme.background, width: 300, padding: 4 },\r\n                    text({ color: theme.input, size: 24 }, search.length ? search : \"Search ...\")),\r\n                container({ width: 10, height: 10 }),\r\n                ...options.map((option, i) =>\r\n                    container<AppEvent>({\r\n                        padding: 4,\r\n                        onClick: {\r\n                            kind: EventKind.CLICKED_FINDER_OPTION,\r\n                            option\r\n                        }\r\n                    },\r\n                        text({\r\n                            size: 18,\r\n                            color: i == 0 ? theme.input : { red: 255, green: 255, blue: 255, alpha: 255 }\r\n                        }, option)\r\n                    )\r\n                )\r\n            ])\r\n        )\r\n    ])\r\n\r\n\r\nexport const virtualKey = (key: string): UI<AppEvent> =>\r\n    container({\r\n        padding: 10,\r\n        onClick: {\r\n            kind: EventKind.VIRTUAL_KEYDOWN,\r\n            key\r\n        }\r\n    }, text({ size: 24 }, key))\r\n\r\n\r\nexport const virtualKeys = (keys: string[]) =>\r\n    row(keys.map(c => virtualKey(c)))\r\n\r\n\r\nexport const alphabeticVirtualKeyboard = (theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.SPACE_BETWEEN }, [\r\n            container({ padding: 4, color: theme.node },\r\n                column([\r\n                    virtualKeys(['1', '2', '3', '4', '5']),\r\n                    virtualKeys(['q', 'w', 'e', 'r', 't']),\r\n                    virtualKeys(['a', 's', 'd', 'f', 'g']),\r\n                    virtualKeys(['z', 'x', 'c', 'v']),\r\n                    virtualKeys(['sft', 'space']),\r\n                ])\r\n            ),\r\n            container({ padding: 4, color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(['6', '7', '8', '9', '0']),\r\n                    virtualKeys(['y', 'u', 'i', 'o', 'p']),\r\n                    virtualKeys(['h', 'j', 'k', 'l']),\r\n                    virtualKeys(['b', 'n', 'm', 'del']),\r\n                    virtualKeys(['space', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\n\r\nexport const numericVirtualKeyboard = (theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n            container({ padding: 4, color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(['1', '2', '3', '4']),\r\n                    virtualKeys(['5', '6', '7', '8']),\r\n                    virtualKeys(['9', '0', 'del']),\r\n                    virtualKeys(['.', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\n\r\nexport const virtualKeyboard = (theme: Theme, kind: VirtualKeyboardKind) => {\r\n    switch (kind) {\r\n        case VirtualKeyboardKind.ALPHABETIC: return alphabeticVirtualKeyboard(theme)\r\n        case VirtualKeyboardKind.NUMERIC: return numericVirtualKeyboard(theme)\r\n    }\r\n}\r\n\r\nexport const selectedMenuItem = (theme: Theme, graph: Graph, selected: Selected): ContextMenuItem<AppEvent> | null => {\r\n    switch (selected.kind) {\r\n        case SelectedKind.NODE:\r\n            return {\r\n                name: 'Delete Node',\r\n                shortcut: 'd',\r\n                onClick: {\r\n                    kind: EventKind.DELETE_NODE,\r\n                    node: selected.node\r\n                }\r\n            }\r\n        case SelectedKind.INPUT:\r\n            if (graph.inputs[selected.input].edge) {\r\n                return {\r\n                    name: 'Delete Edge',\r\n                    shortcut: 'd',\r\n                    onClick: {\r\n                        kind: EventKind.DELETE_INPUT_EDGE,\r\n                        input: selected.input\r\n                    }\r\n                }\r\n            }\r\n            return null\r\n        case SelectedKind.OUTPUT:\r\n            if (graph.outputs[selected.output].edges.length > 0) {\r\n                return {\r\n                    name: 'Delete Edge',\r\n                    shortcut: 'd',\r\n                    onClick: {\r\n                        kind: EventKind.DELETE_OUTPUT_EDGES,\r\n                        output: selected.output\r\n                    }\r\n                }\r\n            }\r\n            return null\r\n        default: return null\r\n    }\r\n}\r\n\r\nexport const view = (state: State): UI<AppEvent> => {\r\n    const nodes = state.nodeOrder\r\n        .map(node =>\r\n            nodeUi(\r\n                state.theme,\r\n                node,\r\n                state.graph,\r\n                state.selected\r\n            )\r\n        )\r\n    const connections: Connection[] = Object.values(state.graph.edges).map(({ input, output }) => ({\r\n        from: output,\r\n        to: input,\r\n        color: state.theme.connection\r\n    }))\r\n    const stacked: UI<AppEvent>[] = [\r\n        container({ color: state.theme.background, onClick: { kind: EventKind.CLICKED_BACKGROUND } }),\r\n        scene({ camera: state.camera, children: nodes, connections }),\r\n    ]\r\n    if (state.finder.show) stacked.push(finder(state.finder, state.theme))\r\n    if (state.virtualKeyboard.show) stacked.push(virtualKeyboard(state.theme, state.virtualKeyboard.kind))\r\n    const menuItem = selectedMenuItem(state.theme, state.graph, state.selected)\r\n    if (menuItem) stacked.push(contextMenu({ items: [menuItem], backgroundColor: state.theme.node }))\r\n    return stack(stacked)\r\n}","import { AppEvent, EventKind, update } from \"./event\"\r\nimport { run, transformPointer } from \"./ui/run\"\r\nimport { view } from './ui/view'\r\nimport { demoState, State } from \"./state\"\r\nimport { Document } from './ui/dom'\r\nimport { ProgramKind } from \"./ui/webgl2\"\r\n\r\nconst generateUUID = () => crypto.randomUUID()\r\n\r\nconst success_or_error = run({\r\n    state: demoState(generateUUID),\r\n    view,\r\n    update: (state: State, event: AppEvent) => update(generateUUID, state, event),\r\n    window,\r\n    document: document as Document,\r\n    requestAnimationFrame,\r\n    setTimeout,\r\n    pointerDown: (dispatch, pointer) => {\r\n        dispatch({\r\n            kind: EventKind.POINTER_DOWN,\r\n            pointer\r\n        })\r\n    }\r\n})\r\n\r\nif (success_or_error.kind == ProgramKind.ERROR) {\r\n    throw success_or_error\r\n}\r\n\r\nconst dispatch = success_or_error.dispatch\r\n\r\nif (typeof PointerEvent.prototype.getCoalescedEvents === 'function') {\r\n    document.addEventListener('pointermove', (e) => {\r\n        e.getCoalescedEvents().forEach(p => {\r\n            dispatch({\r\n                kind: EventKind.POINTER_MOVE,\r\n                pointer: transformPointer(p)\r\n            })\r\n        })\r\n    })\r\n} else {\r\n    document.addEventListener('pointermove', p =>\r\n        dispatch({\r\n            kind: EventKind.POINTER_MOVE,\r\n            pointer: transformPointer(p)\r\n        })\r\n    )\r\n}\r\n\r\ndocument.addEventListener(\"pointerup\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_UP,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener('wheel', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.WHEEL,\r\n        position: { x: e.clientX, y: e.clientY },\r\n        deltaY: e.deltaY,\r\n    })\r\n}, { passive: false })\r\n\r\ndocument.addEventListener('contextmenu', e => {\r\n    e.preventDefault()\r\n})\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    document.body.requestFullscreen()\r\n})\r\n\r\ndocument.addEventListener('keydown', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.KEYDOWN,\r\n        key: e.key\r\n    })\r\n})","export type UUID = string\r\n\r\nexport type GenerateUUID = () => UUID\r\n\r\nexport interface Input {\r\n    readonly uuid: UUID\r\n    readonly node: UUID\r\n    readonly name: string\r\n    readonly edge?: UUID\r\n}\r\n\r\nexport interface Output {\r\n    readonly uuid: UUID\r\n    readonly node: UUID\r\n    readonly name: string\r\n    readonly edges: Readonly<UUID[]>\r\n}\r\n\r\nexport interface Body {\r\n    readonly uuid: UUID\r\n    readonly node: UUID\r\n    readonly value: number\r\n}\r\n\r\nexport interface Position {\r\n    readonly x: number\r\n    readonly y: number\r\n}\r\n\r\nexport interface Node {\r\n    readonly uuid: UUID\r\n    readonly name: string\r\n    readonly inputs: Readonly<UUID[]>\r\n    readonly body?: UUID\r\n    readonly outputs: Readonly<UUID[]>\r\n    readonly position: Position\r\n}\r\n\r\nexport interface Edge {\r\n    readonly uuid: UUID\r\n    readonly input: UUID\r\n    readonly output: UUID\r\n}\r\n\r\nexport type Nodes = { [uuid: UUID]: Node }\r\nexport type Edges = { [uuid: UUID]: Edge }\r\nexport type Inputs = { [uuid: UUID]: Input }\r\nexport type Bodys = { [uuid: UUID]: Body }\r\nexport type Outputs = { [uuid: UUID]: Output }\r\n\r\nexport interface Graph {\r\n    readonly nodes: Readonly<Nodes>\r\n    readonly edges: Readonly<Edges>\r\n    readonly inputs: Readonly<Inputs>\r\n    readonly bodys: Readonly<Bodys>\r\n    readonly outputs: Readonly<Outputs>\r\n}\r\n\r\nexport interface Operation {\r\n    readonly name: string\r\n    readonly inputs: Readonly<string[]>\r\n    readonly body?: number\r\n    readonly outputs: Readonly<string[]>\r\n}\r\n\r\nexport type Operations = { [name: string]: Operation }\r\n\r\nexport const emptyGraph = (): Graph => ({\r\n    nodes: {},\r\n    edges: {},\r\n    inputs: {},\r\n    bodys: {},\r\n    outputs: {},\r\n})"],"names":["$f4c0df53f29f413e$export$fad298d038a96a64","haystack","needle","haystackIndex","needleIndex","length","n","toLowerCase","$2a9d6d4b688c9d90$export$b74061472fe7c07","width","height","$2a9d6d4b688c9d90$export$d73ee8ef04f5226a","x","y","$2a9d6d4b688c9d90$export$dcdf75081b88279d","$2a9d6d4b688c9d90$export$84b43e5e8429f175","matrices","head","tail","reduce","a","b","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","$2a9d6d4b688c9d90$export$dbb85424dca880d0","b1","b2","b3","$2a9d6d4b688c9d90$export$70ae2c07e401031b","idet","$9a57707492d0f60d$export$f24224f1c91d8156","c","Math","sqrt","pow","$225b92eada6eea02$export$2fed3c3ffa8e7fdf","graph","operation","position","generateUUID","nodeUUID","inputs","inputUUIDs","name","uuid","node","push","outputs","outputUUIDs","name1","edges","undefined","body","value","nodes","bodys","$225b92eada6eea02$export$1d0aa160432dfea5","removedNode","edgeUUIDs","input","edge","output","filter","e","input1","output1","$225b92eada6eea02$export$29df27f8a43b7d73","edgeUUID","$225b92eada6eea02$export$c551ecdfdbecb8a","$225b92eada6eea02$export$3b35d6dc248b6d92","currentOutput","$225b92eada6eea02$export$a40a9a25f66c1b6c","transform","currentBody","$0b89d474933103bc$export$52710c6013234220","VirtualKeyboardKind1","$0b89d474933103bc$export$c59a831e29c6eb0","InputTargetKind1","$0b89d474933103bc$export$31efa727e8808a35","SelectedKind1","$d7336fab2a6e7c56$export$50508d7849040d51","EventKind1","$d7336fab2a6e7c56$var$updateFinderOptions","state","options","Object","keys","operations","item","finder","search","$d7336fab2a6e7c56$export$a72e97d68c48a4a","show","openTimeout","virtualKeyboard","kind","ALPHABETIC","inputTarget","FINDER","$d7336fab2a6e7c56$var$closeFinder","NONE","selected","$d7336fab2a6e7c56$var$insertOperationFromFinder","_","camera","nodePlacementLocation","nextState","$d7336fab2a6e7c56$export$71609a29f506e4f6","render","$d7336fab2a6e7c56$var$updateFinderSearch","$d7336fab2a6e7c56$var$updateBodyValue","nodeOrder","$d7336fab2a6e7c56$export$6da59a5b2e9d2d3b","$d7336fab2a6e7c56$export$c1b5afa9b8c6f143","NUMERIC","NUMBER","BODY","$d7336fab2a6e7c56$export$722fbec263ad908a","event","POINTER_DOWN","pointers","pointer","dragging","zooming","$d7336fab2a6e7c56$var$pointerDown","POINTER_UP","p","id","pointerDistance","$d7336fab2a6e7c56$var$pointerUp","POINTER_MOVE","index","findIndex","xs","i","slice","dx","dy","NODE","scaling","currentNode","p0","p1","x1","y1","x2","y2","previousDistance","previousCenter","pointerCenter","move","zoom","moveBack","$d7336fab2a6e7c56$var$pointerMove","CLICKED_NODE","$d7336fab2a6e7c56$var$clickedNode","WHEEL","deltaY","$d7336fab2a6e7c56$var$wheel","CLICKED_INPUT","OUTPUT","graph0","graph1","INPUT","$d7336fab2a6e7c56$var$clickedInput","CLICKED_OUTPUT","$d7336fab2a6e7c56$var$clickedOutput","OPEN_FINDER_TIMEOUT","$d7336fab2a6e7c56$var$openFinderTimeout","KEYDOWN","key","newValue","toString","parseFloat","$d7336fab2a6e7c56$var$keyDown","VIRTUAL_KEYDOWN","$d7336fab2a6e7c56$var$virtualKeyDown","CLICKED_FINDER_OPTION","option","$d7336fab2a6e7c56$var$clickedFinderOption","CLICKED_NUMBER","$d7336fab2a6e7c56$var$clickedNumber","CLICKED_BACKGROUND","schedule","after","milliseconds","$d7336fab2a6e7c56$var$clickedBackground","DELETE_NODE","$d7336fab2a6e7c56$var$deleteNode","DELETE_INPUT_EDGE","$d7336fab2a6e7c56$var$deleteInputEdge","DELETE_OUTPUT_EDGES","$d7336fab2a6e7c56$var$deleteOutputEdges","$3aa357479a49b085$var$inWorldSpace","x0","y0","$3aa357479a49b085$export$e6e29dfeb5ef19c1","renderer","clickHandlers","onClick","worldSpace","dispatch","$b6ca04fcd3e6f123$var$newBatch","textureIndex","triangles","vertices","colors","vertexIndices","textureCoordinates","cameraIndex","lines","$b6ca04fcd3e6f123$export$2c575fa1d20488bd","ts","from","to","offset","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","first","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$b6ca04fcd3e6f123$export$1e96939139b396da","layers","connections","idToWorldSpace","start","stop","num","step","Array","$b6ca04fcd3e6f123$var$linspace","batches","batch","batchTextureIndex","forEach","layer","z","geometries","entries","parseInt","geometry","cs","scale","color","red","green","blue","alpha","samples","$f82cd7e5241fa075$export$eea5d8c438131c40","cameraStack","cameras","stack","$f82cd7e5241fa075$export$3c901611250dc02c","$f82cd7e5241fa075$export$d14f39ee728c5da5","pop","$f82cd7e5241fa075$export$86ad693455315c84","_0","_1","$fd89ce3675dee463$export$83d5419fac007c8c","ui","constraints","measureText","childLayout","$1e3ba84e9ce044db$export$b3219800bda33a1f","child","size","maxWidth","maxHeight","$fd89ce3675dee463$export$efb2657d225c129a","layout1","childOffset","$1e3ba84e9ce044db$export$42a7622cbf932bb","$fd89ce3675dee463$export$edc8554b50279bf4","layout2","geometry1","$1e3ba84e9ce044db$export$df3f009e3d155b20","$9b5b1345df3acfe9$export$6595504a60e1f77c","MainAxisAlignment1","$9b5b1345df3acfe9$export$66a3248d846611ce","CrossAxisAlignment1","$518015a6e3cc694d$export$4e0c71f277ca26b3","args","properties","children","$1e3ba84e9ce044db$export$8984f19c96d30531","COLUMN","mainAxisAlignment","START","crossAxisAlignment","$518015a6e3cc694d$export$f8ce731bdfd45dc7","initial","totalChildHeight","result","acc","max","$518015a6e3cc694d$export$5a1548308f4d4391","freeSpaceY","CENTER","END","SPACE_EVENLY","SPACE_BETWEEN","addYStart","addYCenter","addYEnd","addYSpaceEvenly","addYSpaceBetween","addY","offsetXStart","offsetXCenter","offsetXEnd","offsetX","childGeometry","$518015a6e3cc694d$export$9f45e883ef2b80c0","layout","nextZ","$8a99d960732a172f$var$transformPadding","padding","top","right","bottom","left","$8a99d960732a172f$export$34e0f9847d4c02dd","CONTAINER","$8a99d960732a172f$export$a4e80cd8d85917bb","$8a99d960732a172f$export$7c88ce694bad6320","fill","$8a99d960732a172f$export$6f2a7b3ebfc2cfa0","$9e4edab979495f0d$export$120ff0929b202a6d","ROW","$9e4edab979495f0d$export$4076779b9674714b","totalChildWidth","$9e4edab979495f0d$export$90e65e88c1393562","freeSpaceX","addXStart","addXCenter","addXEnd","addXSpaceEvenly","addXSpaceBetween","addX","offsetYStart","offsetYCenter","offsetYEnd","offsetY","$9e4edab979495f0d$export$1152b7e6303a2c68","$864b15efd9f5e1a7$export$33aff30b8aa0934e","SCENE","$864b15efd9f5e1a7$export$9e03d30774b30061","map","$864b15efd9f5e1a7$export$7a4266c2aa024d65","$864b15efd9f5e1a7$export$7b2ec4d82804e47f","entry","$d380360335f9e6c0$export$b008c3d2ea57ca56","$d380360335f9e6c0$export$218db93a2e8965d","$d380360335f9e6c0$export$13c8b19be38670b3","$2d5075f154be1094$export$6f093cfa640b7166","str","TEXT","font","family","$2d5075f154be1094$export$801f12fcd9ba2788","measurements","width1","widths","$2d5075f154be1094$var$vertices","$2d5075f154be1094$var$colors","$2d5075f154be1094$var$vertexIndices","$2d5075f154be1094$export$f543e72c4af89828","textLayout1","flat","$2d5075f154be1094$export$3d02b268fb89b14d","UIKind1","STACK","$e364cd7af35feef1$export$533b26079ad0b4b","reducer","accumulator","combine","$cce0295d6d688136$export$1be1fc439b849fdf","handlers","needed","$3d1ad3352b3daee3$export$1be1fc439b849fdf","lookup","$0c1fb5dcb73854b4$export$1be1fc439b849fdf","entryGeometry","newGeometry","$d33a6e3c77e8a82f$export$1be1fc439b849fdf","$8fb27619ef3752ba$export$59ff82fc918bd7e3","$8fb27619ef3752ba$export$1be1fc439b849fdf","$cbb8ce85e6a0780d$export$b3890eb0ae9dca99","clear","uiLayout","minWidth","minHeight","uiGeometry","$8fb27619ef3752ba$exports","draw","$2561bfce8bbd3fa5$export$128884f9a44a0f0c","ProgramKind1","$2561bfce8bbd3fa5$export$ce2766bf4a8721d3","constructor","window1","document1","canvas","gl1","program1","textures1","textMeasurementsCache","window","document","gl","program","textures","DATA","this","COLOR_BUFFER_BIT","attributes","texture","bindTexture","TEXTURE_2D","bindBuffer","ARRAY_BUFFER","buffer","bufferData","Float32Array","STATIC_DRAW","Uint8Array","ELEMENT_ARRAY_BUFFER","Uint16Array","drawElements","TRIANGLES","UNSIGNED_SHORT","count","drawArrays","LINES","getTextureMeasurements","dpr","get","createElement","ctx","getContext","rows","current","$2561bfce8bbd3fa5$var$nearestPowerOfTwo","cellSize","style","textAlign","textBaseline","fillStyle","clearRect","String","fromCharCode","metric","ceil","floor","fillText","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","$2561bfce8bbd3fa5$var$createTextMeasurements","newMeasurements","set","devicePixelRatio","indices","f","$2561bfce8bbd3fa5$var$mapString","charCodeAt","uniforms","uniformMatrix3fv","projection","viewport","_size","data","_cameras","location","createBuffer","vertexShader","vertexShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","$2561bfce8bbd3fa5$var$createVertexShader","fragmentShader","FRAGMENT_SHADER","$2561bfce8bbd3fa5$var$createFragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","ERROR","vertexInfoLog","getShaderInfoLog","fragmentInfoLog","useProgram","vertexArrayObject","createVertexArray","bindVertexArray","FLOAT","$2561bfce8bbd3fa5$var$bindVertices","$2561bfce8bbd3fa5$var$bindColors","bindAttribLocation","enableVertexAttribArray","vertexAttribPointer","$2561bfce8bbd3fa5$var$bindTextureCoordinates","vertexAttribIPointer","$2561bfce8bbd3fa5$var$bindCameraIndex","getUniformLocation","$13904534c2e00d0c$export$479aac53993fd71","pointerId","clientX","clientY","$54e6b8fcdb1ed725$export$218b899e1d476006","items","backgroundColor","shortcut","$863f011722aa81d7$export$8cc075c801fd6817","$863f011722aa81d7$export$af200dcf8b7cb5de","array","seperator","element","$863f011722aa81d7$export$e4d153b3e021fb47","$863f011722aa81d7$export$f0aff9ee68de27f8","theme","selectedInput","$863f011722aa81d7$export$60c2cea27aefb32b","$863f011722aa81d7$export$3cbc1f9e6e82ea7","$863f011722aa81d7$export$bb70de462253a3c9","$863f011722aa81d7$export$5b0a3b587d4840d2","rowEntries","background","$863f011722aa81d7$export$26fbed5ffd120939","o","selectedNode","$863f011722aa81d7$export$a0bbe14c4282928","$863f011722aa81d7$export$b5eb6b87d37ec205","$863f011722aa81d7$export$d93574fa032128c2","$863f011722aa81d7$export$97dbacc68eebd98a","$863f011722aa81d7$export$67e5e8cc6531f853","$b4e14b6b8da86996$var$generateUUID","crypto","randomUUID","$b4e14b6b8da86996$var$success_or_error","view","update","requestAnimationFrame","setTimeout","renderer_or_error","$2561bfce8bbd3fa5$export$94781114c991ae1c","innerWidth","innerHeight","renderQueued","scheduleRender","newState","render1","dispatchEvents","event1","event2","appendChild","addEventListener","transformed","pointerDown","connection","Number","Add","Subtract","Multiply","Divide","Equal","Print","number0","graph2","number1","graph3","graph4","add","graph5","graph6","graph7","number2","graph8","graph9","div","graph10","graph11","graph12","print","graph13","values","stacked","$863f011722aa81d7$export$ae58c3420da023e7","menuItem","$863f011722aa81d7$export$ae23235919bbb4a2","dispatch1","$b4e14b6b8da86996$var$dispatch","PointerEvent","prototype","getCoalescedEvents","preventDefault","passive","requestFullscreen"],"version":3,"file":"index.30a7a2a8.js.map"}