{"mappings":"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","sources":["src/components.ts","src/linear_algebra.ts","src/renderer.ts","src/systems/render.ts","src/systems/layout.ts","src/layers.ts","src/systems/geometry.ts","src/systems/ray_cast.ts","src/ui/text.ts","src/ui/center.ts","src/ui/column.ts","src/ui/row.ts","src/ui/container.ts","src/ui/connection.ts","src/ui/scene.ts","src/ecs.ts","src/index.ts"],"sourcesContent":["import { Entity } from \"./ecs\";\r\nimport { Layers } from \"./layers\";\r\nimport { Mat3 } from \"./linear_algebra\";\r\n\r\nexport class UIRoot { constructor(public entity: Entity) { } }\r\n\r\nexport class Text { constructor(public value: string) { } }\r\n\r\nexport class FontSize { constructor(public value: number) { } }\r\n\r\nexport class FontFamily { constructor(public value: string) { } }\r\n\r\nexport class Child { constructor(public entity: Entity) { } }\r\n\r\nexport class Children { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Connections { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Camera { constructor(public entity: Entity) { } }\r\n\r\nexport enum Alignment { START, CENTER, END }\r\n\r\nexport class CrossAxisAlignment { constructor(public alignment: Alignment) { } }\r\n\r\nexport class Width { constructor(public value: number) { } }\r\n\r\nexport class Height { constructor(public value: number) { } }\r\n\r\nexport class Translate {\r\n    constructor(public x: number, public y: number) { }\r\n}\r\n\r\nexport class Transform { constructor(public matrix: Mat3) { } }\r\n\r\nexport class Zoom {\r\n    constructor(\r\n        public scale: number,\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n}\r\n\r\nexport class From { constructor(public entity: Entity) { } }\r\n\r\nexport class To { constructor(public entity: Entity) { } }\r\n\r\nexport interface Hsla {\r\n    h: number\r\n    s: number\r\n    l: number\r\n    a: number\r\n}\r\n\r\nexport class Color {\r\n    h: number\r\n    s: number\r\n    l: number\r\n    a: number\r\n\r\n    constructor({ h, s, l, a }: Hsla) {\r\n        this.h = h\r\n        this.s = s\r\n        this.l = l\r\n        this.a = a\r\n    }\r\n}\r\n\r\nexport class Padding { constructor(public value: number) { } }\r\n\r\nexport class Constraints {\r\n    constructor(\r\n        public minWidth: number,\r\n        public maxWidth: number,\r\n        public minHeight: number,\r\n        public maxHeight: number\r\n    ) { }\r\n}\r\n\r\nexport class Size {\r\n    constructor(\r\n        public width: number,\r\n        public height: number,\r\n    ) { }\r\n}\r\n\r\nexport class Offset {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n\r\n    add = (other: Offset) => new Offset(this.x + other.x, this.y + other.y)\r\n}\r\n\r\nexport class Layout {\r\n    constructor(\r\n        private impl: (self: Entity, constraints: Constraints) => Size\r\n    ) { }\r\n\r\n    layout = (self: Entity, constraints: Constraints) =>\r\n        this.impl(self, constraints)\r\n}\r\n\r\nexport class WorldSpace {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public width: number,\r\n        public height: number\r\n    ) { }\r\n}\r\n\r\nexport class Vertices { constructor(public data: number[]) { } }\r\n\r\nexport class TextureCoordinates { constructor(public data: number[]) { } }\r\n\r\nexport class Colors { constructor(public data: number[]) { } }\r\n\r\nexport class VertexIndices { constructor(public data: number[]) { } }\r\n\r\nexport class CameraIndices { constructor(public data: number[]) { } }\r\n\r\nexport class Geometry {\r\n    constructor(\r\n        private impl: (self: Entity, parentOffset: Offset, layers: Layers, z: number) => void\r\n    ) { }\r\n\r\n    geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) =>\r\n        this.impl(self, parentOffset, layers, z)\r\n}\r\n\r\nexport type OnDragCallback = (entity: Entity, x: number, y: number) => void\r\n\r\nexport class OnDrag { constructor(public callback: OnDragCallback) { } }\r\n\r\nexport type OnClickCallback = (entity: Entity) => void\r\n\r\nexport class OnClick { constructor(public callback: OnClickCallback) { } }","export class Vec3 {\r\n    constructor(public data: number[]) { }\r\n}\r\n\r\nexport class Mat3 {\r\n    constructor(public data: number[]) { }\r\n\r\n    static identity = () => new Mat3([\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1,\r\n    ])\r\n\r\n    static projection = (width: number, height: number) => new Mat3([\r\n        2 / width, 0, -1,\r\n        0, -2 / height, 1,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static translation = (x: number, y: number) => new Mat3([\r\n        1, 0, x,\r\n        0, 1, y,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static rotation = (radians: number) => {\r\n        const c = Math.cos(radians)\r\n        const s = Math.sin(radians)\r\n        return new Mat3([\r\n            c, s, 0,\r\n            -s, c, 0,\r\n            0, 0, 1\r\n        ])\r\n    }\r\n\r\n    static scaling = (x: number, y: number) => new Mat3([\r\n        x, 0, 0,\r\n        0, y, 0,\r\n        0, 0, 1\r\n    ])\r\n\r\n    matMul = (other: Mat3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return new Mat3([\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ])\r\n    }\r\n\r\n    vecMul = (other: Vec3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b1 = b[0]\r\n        const b2 = b[1]\r\n        const b3 = b[2]\r\n        const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n        const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n        const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n        return new Vec3([c1, c2, c3])\r\n    }\r\n\r\n    inverse = () => {\r\n        const a = this.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = a22 * a33 - a23 * a32\r\n        const b12 = a21 * a33 - a23 * a31\r\n        const b13 = a21 * a32 - a22 * a31\r\n        const b21 = a12 * a33 - a13 * a32\r\n        const b22 = a11 * a33 - a13 * a31\r\n        const b23 = a11 * a32 - a12 * a31\r\n        const b31 = a12 * a23 - a13 * a22\r\n        const b32 = a11 * a23 - a13 * a21\r\n        const b33 = a11 * a22 - a12 * a21\r\n        const det = a31 * b31 - a32 * b32 + a33 * b33\r\n        const idet = 1 / det\r\n        return new Mat3([\r\n            idet * b11, idet * -b21, idet * b31,\r\n            idet * -b12, idet * b22, idet * -b32,\r\n            idet * b13, idet * -b23, idet * b33\r\n        ])\r\n    }\r\n}","import { Mat3 } from \"./linear_algebra\"\r\n\r\nclass DefaultProgram {\r\n    positionBuffer: WebGLBuffer\r\n    colorBuffer: WebGLBuffer\r\n    textureCoordinatesBuffer: WebGLBuffer\r\n    indexBuffer: WebGLBuffer\r\n    resolutionLocation: WebGLUniformLocation\r\n    devicePixelRatioLocation: WebGLUniformLocation\r\n    matricesLocation: WebGLUniformLocation\r\n    matrixIndexBuffer: WebGLBuffer\r\n\r\n    constructor(gl: WebGL2RenderingContext) {\r\n        const aPositionLocation = 0\r\n        const aTextureCoordinatesLocation = 1\r\n        const aColorLocation = 2\r\n        const aMatrixIndexLocation = 3\r\n\r\n        const vertexShaderSource = `#version 300 es\r\n  uniform float u_devicePixelRatio;\r\n  uniform mat3 u_matrices[10];\r\n\r\n  layout(location = ${aPositionLocation}) in vec2 a_position;\r\n  layout(location = ${aTextureCoordinatesLocation}) in vec2 a_textureCoordinates;\r\n  layout(location = ${aColorLocation}) in vec4 a_color;\r\n  layout(location = ${aMatrixIndexLocation}) in uint a_matrixIndex;\r\n\r\n  out vec2 v_textureCoordinates;\r\n  out vec4 v_color;\r\n\r\n  void main() {\r\n    gl_Position = vec4((u_matrices[a_matrixIndex] * vec3(a_position, 1)).xy, 0, 1);\r\n    v_textureCoordinates = a_textureCoordinates * u_devicePixelRatio;\r\n    v_color = a_color;\r\n  }\r\n  `\r\n        const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec2 v_textureCoordinates;\r\n  in vec4 v_color;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  vec4 hslToRgb(in vec4 hsl) {\r\n    float h = hsl.x / 360.0;\r\n    vec3 rgb = clamp(abs(mod(h * 6.0 + vec3(0.0,4.0,2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\r\n    return vec4(hsl.z + hsl.y * (rgb - 0.5) * (1.0 - abs(2.0 * hsl.z - 1.0)), hsl.w);\r\n  }\r\n\r\n  void main() {\r\n    ivec2 size = textureSize(u_texture, 0);\r\n    vec2 coordinate = v_textureCoordinates / vec2(float(size.x), float(size.y));\r\n    fragColor = texture(u_texture, coordinate) * hslToRgb(v_color);\r\n  }\r\n  `\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n        gl.shaderSource(vertexShader, vertexShaderSource)\r\n        gl.compileShader(vertexShader)\r\n\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n        gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n        gl.compileShader(fragmentShader)\r\n\r\n        const program = gl.createProgram()!\r\n        gl.attachShader(program, vertexShader)\r\n        gl.attachShader(program, fragmentShader)\r\n        gl.linkProgram(program)\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            console.log(gl.getShaderInfoLog(vertexShader))\r\n            console.log(gl.getShaderInfoLog(fragmentShader))\r\n        }\r\n\r\n        gl.useProgram(program)\r\n\r\n        const vertexArrayObject = gl.createVertexArray()!\r\n        gl.bindVertexArray(vertexArrayObject)\r\n\r\n        this.positionBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aPositionLocation, 'a_position')\r\n        gl.enableVertexAttribArray(aPositionLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer)\r\n        gl.vertexAttribPointer(\r\n            aPositionLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.textureCoordinatesBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aTextureCoordinatesLocation, 'a_textureCoordinates')\r\n        gl.enableVertexAttribArray(aTextureCoordinatesLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordinatesBuffer)\r\n        gl.vertexAttribPointer(\r\n            aTextureCoordinatesLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.colorBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aColorLocation, 'a_color')\r\n        gl.enableVertexAttribArray(aColorLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer)\r\n        gl.vertexAttribPointer(\r\n            aColorLocation,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.matrixIndexBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aMatrixIndexLocation, 'a_matrixIndex')\r\n        gl.enableVertexAttribArray(aMatrixIndexLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.matrixIndexBuffer)\r\n        gl.vertexAttribIPointer(\r\n            aMatrixIndexLocation,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.indexBuffer = gl.createBuffer()!\r\n        this.devicePixelRatioLocation = gl.getUniformLocation(program, 'u_devicePixelRatio')!\r\n        this.matricesLocation = gl.getUniformLocation(program, 'u_matrices')!\r\n    }\r\n}\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\ninterface Metric {\r\n    x: number\r\n    y: number\r\n    width: number\r\n    height: number\r\n}\r\n\r\nclass FontAtlas {\r\n    constructor(\r\n        public texture: number,\r\n        public metrics: Metric[],\r\n        public fontFamily: string,\r\n        public fontSize: number,\r\n    ) { }\r\n\r\n    metric = (c: string) => this.metrics[c.charCodeAt(0)]\r\n}\r\n\r\ninterface DrawData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    vertexIndices: number[]\r\n    cameraIndices: number[]\r\n}\r\n\r\ninterface DrawLineData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    cameraIndices: number[]\r\n}\r\n\r\nconst createFontMetrics = (gl: WebGL2RenderingContext, texture: WebGLTexture, font: string, fontSize: number) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(fontSize * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * window.devicePixelRatio\r\n    canvas.height = size * window.devicePixelRatio\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = font\r\n    ctx.fillStyle = 'white'\r\n    const ascii = Array.from({ length: totalCells }, (v, i) => i)\r\n    const chars = ascii.map(c => String.fromCharCode(c))\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const metrics = chars.map((c, i) => {\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const height = fontSize\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        return {\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height\r\n        }\r\n    })\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas)\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return metrics\r\n}\r\n\r\nexport class Renderer {\r\n    gl: WebGL2RenderingContext\r\n    canvas: HTMLCanvasElement\r\n    program: DefaultProgram\r\n    width: number\r\n    height: number\r\n    fontAtlasses: Map<string, FontAtlas>\r\n    textures: WebGLTexture[]\r\n    devicePixelRatio: number\r\n\r\n    constructor(width: number, height: number) {\r\n        const canvas = document.createElement('canvas')\r\n        canvas.style.touchAction = 'none'\r\n        const gl = canvas.getContext('webgl2')!\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0)\r\n        gl.enable(gl.BLEND)\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n        gl.depthMask(false)\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n        gl.activeTexture(gl.TEXTURE0)\r\n        this.gl = gl\r\n        this.canvas = canvas\r\n        this.program = new DefaultProgram(gl)\r\n        this.fontAtlasses = new Map()\r\n        this.textures = []\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.setSize(width, height)\r\n        const texture = gl.createTexture()!\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255]))\r\n        this.textures.push(texture)\r\n    }\r\n\r\n    setSize = (width: number, height: number) => {\r\n        const { gl, canvas } = this\r\n        canvas.width = width * window.devicePixelRatio\r\n        canvas.height = height * window.devicePixelRatio\r\n        gl.uniform2f(this.program.resolutionLocation, canvas.width, canvas.height)\r\n        gl.uniform1f(this.program.devicePixelRatioLocation, window.devicePixelRatio)\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this.width = width\r\n        this.height = height\r\n        if (this.devicePixelRatio == window.devicePixelRatio) return\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.recreateFontAtlasses()\r\n    }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    setMatrices = (matrices: Mat3[]) => {\r\n        const { gl } = this\r\n        const data: number[] = []\r\n        for (const matrix of matrices) {\r\n            data.push(...matrix.data)\r\n        }\r\n        gl.uniformMatrix3fv(this.program.matricesLocation, /*transpose*/true, /*data*/data)\r\n    }\r\n\r\n    draw = ({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices }: DrawData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.matrixIndexBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors, textureCoordinates, cameraIndices }: DrawLineData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.matrixIndexBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndices), gl.STATIC_DRAW)\r\n        gl.drawArrays(gl.LINES, 0, vertices.length / 2)\r\n    }\r\n\r\n    recreateFontAtlasses = () => {\r\n        for (const [font, fontAtlas] of this.fontAtlasses) {\r\n            const texture = this.textures[fontAtlas.texture]\r\n            const metrics = createFontMetrics(this.gl, texture, font, fontAtlas.fontSize)\r\n            fontAtlas.metrics = metrics\r\n        }\r\n    }\r\n\r\n    fontAtlas = (fontFamily: string, fontSize: number): FontAtlas => {\r\n        const font = `${fontSize}px ${fontFamily}`\r\n        const atlas = this.fontAtlasses.get(font)\r\n        if (atlas) return atlas\r\n        const { gl } = this\r\n        const texture = gl.createTexture()!\r\n        const metrics = createFontMetrics(gl, texture, font, fontSize)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newAtlas = new FontAtlas(textureIndex, metrics, fontFamily, fontSize)\r\n        this.fontAtlasses.set(font, newAtlas)\r\n        return newAtlas\r\n    }\r\n}","import { Renderer } from \"../renderer\";\r\nimport { ECS } from \"../ecs\";\r\nimport { CameraIndices, Colors, TextureCoordinates, VertexIndices, Vertices } from \"../components\";\r\nimport { Layers } from \"../layers\";\r\nimport { layout, geometry } from './'\r\nimport { Mat3 } from \"../linear_algebra\";\r\n\r\nconst renderTriangles = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let vertexIndices: number[] = []\r\n    let cameraIndices: number[] = []\r\n    let previousTexture: number = -1\r\n    for (const layer of layers.layers) {\r\n        for (const [texture, entities] of layer) {\r\n            if (texture != previousTexture) {\r\n                if (vertices.length) {\r\n                    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices })\r\n                    vertices = []\r\n                    colors = []\r\n                    textureCoordinates = []\r\n                    vertexIndices = []\r\n                    cameraIndices = []\r\n                }\r\n                previousTexture = texture\r\n                gl.bindTexture(gl.TEXTURE_2D, renderer.textures[texture])\r\n            }\r\n            for (const entity of entities) {\r\n                const offset = vertices.length / 2\r\n                vertices.push(...entity.get(Vertices)!.data)\r\n                colors.push(...entity.get(Colors)!.data)\r\n                textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n                for (const index of entity.get(VertexIndices)!.data) {\r\n                    vertexIndices.push(offset + index)\r\n                }\r\n                cameraIndices.push(...entity.get(CameraIndices)!.data)\r\n            }\r\n        }\r\n    }\r\n    if (vertices.length == 0) return\r\n    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices })\r\n}\r\n\r\nconst renderLines = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let cameraIndices: number[] = []\r\n    gl.bindTexture(gl.TEXTURE_2D, renderer.textures[0])\r\n    for (const entity of layers.lines) {\r\n        vertices.push(...entity.get(Vertices)!.data)\r\n        colors.push(...entity.get(Colors)!.data)\r\n        textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n        cameraIndices.push(...entity.get(CameraIndices)!.data)\r\n    }\r\n    if (vertices.length == 0) return\r\n    renderer.drawLines({ vertices, colors, textureCoordinates, cameraIndices })\r\n}\r\n\r\nexport const render = (ecs: ECS) => {\r\n    layout(ecs)\r\n    const layers = geometry(ecs)\r\n    const renderer = ecs.get(Renderer)!\r\n    const projection = Mat3.projection(renderer.width, renderer.height)\r\n    renderer.setMatrices(layers.cameras.map(camera => projection.matMul(camera.inverse())))\r\n    renderer.clear()\r\n    renderTriangles(renderer, layers)\r\n    renderLines(renderer, layers)\r\n    ecs.set(layers)\r\n}","import { Constraints, Layout, UIRoot } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nexport const layout = (ecs: ECS) => {\r\n    const { width, height } = ecs.get(Renderer)!\r\n    const ui = ecs.get(UIRoot)!.entity\r\n    const constraints = new Constraints(0, width, 0, height)\r\n    ui.get(Layout)!.layout(ui, constraints)\r\n}","import { Entity } from \"./ecs\";\r\nimport { Mat3 } from \"./linear_algebra\";\r\n\r\ninterface Data {\r\n    z: number\r\n    texture: number\r\n    entity: Entity\r\n}\r\n\r\nexport class Layers {\r\n    layers: Map<number, Entity[]>[]\r\n    lines: Entity[]\r\n    cameras: Mat3[]\r\n    activeCamera: number\r\n\r\n    constructor() {\r\n        this.layers = []\r\n        this.lines = []\r\n        this.cameras = [Mat3.identity()]\r\n        this.activeCamera = 0\r\n    }\r\n\r\n    pushAndSetActiveCamera = (camera: Mat3) => {\r\n        this.activeCamera = this.cameras.length\r\n        this.cameras.push(camera)\r\n    }\r\n\r\n    push = ({ z, texture, entity }: Data): void => {\r\n        for (let i = this.layers.length; i < z + 1; ++i) {\r\n            this.layers.push(new Map())\r\n        }\r\n        const layer = this.layers[z]\r\n        const entities = layer.get(texture)\r\n        if (entities) {\r\n            entities.push(entity)\r\n            return\r\n        }\r\n        layer.set(texture, [entity])\r\n    }\r\n}","import { UIRoot, Geometry, Offset } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nexport const geometry = (ecs: ECS): Layers => {\r\n    const layers = new Layers()\r\n    const ui = ecs.get(UIRoot)!.entity\r\n    ui.get(Geometry)!.geometry(ui, new Offset(0, 0), layers, 0)\r\n    return layers\r\n}","import { WorldSpace } from \"../components\"\r\nimport { ECS, Entity } from \"../ecs\"\r\nimport { Layers } from \"../layers\"\r\nimport { Mat3, Vec3 } from \"../linear_algebra\"\r\n\r\nexport function* rayCast(ecs: ECS, camera: Mat3, vec: Vec3): Generator<Entity> {\r\n    const [mx, my, _] = camera.vecMul(vec).data\r\n    for (const layer of ecs.get(Layers)!.layers.reverse()) {\r\n        for (const entities of layer.values()) {\r\n            for (const entity of entities) {\r\n                const { x, y, width, height } = entity.get(WorldSpace)!\r\n                if (mx > x && mx < x + width && my > y && my < y + height) {\r\n                    yield entity\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Layout,\r\n    Text,\r\n    FontSize,\r\n    FontFamily,\r\n    Constraints,\r\n    Color,\r\n    Offset,\r\n    Geometry,\r\n    Size,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    Hsla,\r\n    WorldSpace,\r\n    CameraIndices\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nconst textSize = (renderer: Renderer, entity: Entity) => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let size = new Size(0, 0)\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        size.width += metric.width\r\n        size.height = Math.max(metric.height, size.height)\r\n    }\r\n    return size\r\n}\r\n\r\nconst textGeometry = (renderer: Renderer, entity: Entity, offset: Offset, layers: Layers): number => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const { h, s, l, a } = entity.get(Color)!\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let x = 0\r\n    let indexOffset = 0\r\n    const vertices: number[] = []\r\n    const textureCoordinates: number[] = []\r\n    const colors: number[] = []\r\n    const indices: number[] = []\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        const x0 = offset.x + x\r\n        const x1 = x0 + metric.width\r\n        const y0 = offset.y\r\n        const y1 = y0 + metric.height\r\n        vertices.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1,\r\n        )\r\n        textureCoordinates.push(\r\n            metric.x, metric.y,\r\n            metric.x, metric.y + metric.height,\r\n            metric.x + metric.width, metric.y,\r\n            metric.x + metric.width, metric.y + metric.height,\r\n        )\r\n        colors.push(\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n        )\r\n        indices.push(\r\n            indexOffset + 0, indexOffset + 1, indexOffset + 2,\r\n            indexOffset + 1, indexOffset + 2, indexOffset + 3,\r\n        )\r\n        x += metric.width\r\n        indexOffset += 4\r\n    }\r\n    entity.set(\r\n        new Vertices(vertices),\r\n        new TextureCoordinates(textureCoordinates),\r\n        new Colors(colors),\r\n        new VertexIndices(indices),\r\n        new CameraIndices(Array(indexOffset).fill(layers.activeCamera))\r\n    )\r\n    return atlas.texture\r\n}\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const size = textSize(self.ecs.get(Renderer)!, self)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const texture = textGeometry(self.ecs.get(Renderer)!, self, offset, layers)\r\n    layers.push({ z, entity: self, texture })\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    fontSize?: number\r\n    fontFamily?: number\r\n    color?: Hsla\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, data: string): Entity\r\n    (ecs: ECS, properties: Properties, data: string): Entity\r\n}\r\n\r\nexport const text: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, data] = (() => {\r\n        if (typeof args[0] === 'string') return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Text(data),\r\n        new FontSize(properties.fontSize ?? 24),\r\n        new FontFamily(properties.fontFamily ?? \"monospace\"),\r\n        new Color(properties.color ?? { h: 0, s: 1, l: 1, a: 1 }),\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const child = self.get(Child)!.entity\r\n    const childSize = child.get(Layout)!.layout(child, constraints)\r\n    child.update(Offset, offset => {\r\n        offset.x = constraints.maxWidth / 2 - childSize.width / 2\r\n        offset.y = constraints.maxHeight / 2 - childSize.height / 2\r\n    })\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const child = self.get(Child)!.entity\r\n    child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\nexport const center = (ecs: ECS, child: Entity) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Child(child)\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.y = height)\r\n        height += size.height\r\n        width = Math.max(width, size.width)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width / 2 - childWidth / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width - childWidth)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const column: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.x = width)\r\n        width += size.width\r\n        height = Math.max(height, size.height)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height / 2 - childHeight / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height - childHeight)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const row: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    Hsla,\r\n    Color,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    Padding,\r\n    Width,\r\n    Height,\r\n    WorldSpace,\r\n    Translate,\r\n    CameraIndices,\r\n    OnDragCallback,\r\n    OnClickCallback,\r\n    OnClick,\r\n    OnDrag\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst clamp = (value: number, min: number, max: number): number =>\r\n    Math.max(Math.min(value, max), min)\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const padding = self.get(Padding)!.value\r\n    const child = self.get(Child)\r\n    const { x, y } = self.get(Translate)!\r\n    const offset = new Offset(x, y)\r\n    if (child) {\r\n        const childSize = child.entity.get(Layout)!.layout(child.entity, constraints)\r\n        const size = new Size(\r\n            Math.min(constraints.maxWidth, childSize.width + 2 * padding),\r\n            Math.min(constraints.maxHeight, childSize.height + 2 * padding),\r\n        )\r\n        child.entity.update(Offset, offset => {\r\n            offset.x = padding\r\n            offset.y = padding\r\n        })\r\n        self.set(constraints, size, offset)\r\n        return size\r\n    }\r\n    const size = new Size(\r\n        clamp(self.get(Width)!.value, constraints.minWidth, constraints.maxWidth),\r\n        clamp(self.get(Height)!.value, constraints.minHeight, constraints.maxHeight),\r\n    )\r\n    self.set(constraints, size, offset)\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const { width, height } = self.get(Size)!\r\n    const x0 = offset.x\r\n    const x1 = x0 + width\r\n    const y0 = offset.y\r\n    const y1 = y0 + height\r\n    const color = self.get(Color)\r\n    if (color) {\r\n        const { h, s, l, a } = color\r\n        self.set(\r\n            new Vertices([\r\n                x0, y0,\r\n                x0, y1,\r\n                x1, y0,\r\n                x1, y1,\r\n            ]),\r\n            new TextureCoordinates([\r\n                0, 0,\r\n                0, 0,\r\n                0, 0,\r\n                0, 0,\r\n            ]),\r\n            new Colors([\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n            ]),\r\n            new VertexIndices([\r\n                0, 1, 2,\r\n                1, 2, 3,\r\n            ]),\r\n            new CameraIndices(Array(4).fill(layers.activeCamera))\r\n        )\r\n        layers.push({ z, texture: 0, entity: self })\r\n    }\r\n    const child = self.get(Child)\r\n    if (child) {\r\n        child.entity.get(Geometry)!.geometry(child.entity, offset, layers, z + 1)\r\n    }\r\n    self.set(new WorldSpace(x0, y0, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    color?: Hsla\r\n    padding?: number\r\n    width?: number\r\n    height?: number\r\n    x?: number\r\n    y?: number\r\n    onDrag?: OnDragCallback\r\n    onClick?: OnClickCallback\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, properties: Properties): Entity\r\n    (ecs: ECS, properties: Properties, child: Entity): Entity\r\n}\r\n\r\nexport const container: Overload = (ecs: ECS, properties: Properties, child?: Entity) => {\r\n    const entity = ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Padding(properties.padding ?? 0),\r\n        new Width(properties.width ?? 0),\r\n        new Height(properties.height ?? 0),\r\n        new Translate(properties.x ?? 0, properties.y ?? 0)\r\n    )\r\n    if (properties.color) entity.set(new Color(properties.color))\r\n    if (child) entity.set(new Child(child))\r\n    if (properties.onDrag) entity.set(new OnDrag(properties.onDrag))\r\n    if (properties.onClick) entity.set(new OnClick(properties.onClick))\r\n    return entity\r\n}","import { CameraIndices, Color, Colors, From, Hsla, TextureCoordinates, To, Vertices, WorldSpace } from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nconst cubicBezier = (ts: number[], from: WorldSpace, to: WorldSpace): number[] => {\r\n    const p0x = from.x + from.width / 2\r\n    const p0y = from.y + from.height / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = to.x + to.width / 2\r\n    const p3y = to.y + to.height / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    const result: number[] = []\r\n    let lastX = 0\r\n    let lastY = 0\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (result.length) result.push(lastX, lastY)\r\n        else result.push(x, y)\r\n        result.push(x, y)\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n    return result\r\n}\r\n\r\nexport const geometry = (connections: Entity[], layers: Layers) => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const textureCoordinates = Array(samples * 4).fill(0)\r\n    for (const entity of connections) {\r\n        const from = entity.get(From)!.entity.get(WorldSpace)!\r\n        const to = entity.get(To)!.entity.get(WorldSpace)!\r\n        const vertices = cubicBezier(ts, from, to)\r\n        const { h, s, l, a } = entity.get(Color)!\r\n        const colors: number[] = []\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(h, s, l, a)\r\n        entity.set(\r\n            new Vertices(vertices),\r\n            new TextureCoordinates(textureCoordinates),\r\n            new Colors(colors),\r\n            new CameraIndices(Array(vertices.length / 2).fill(layers.activeCamera))\r\n        )\r\n        layers.lines.push(entity)\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    from: Entity\r\n    to: Entity\r\n    color?: Hsla\r\n}\r\n\r\nexport const connection = (ecs: ECS, properties: Properties): Entity =>\r\n    ecs.entity(\r\n        new From(properties.from),\r\n        new To(properties.to),\r\n        new Color(properties.color ?? { h: 0, s: 1, l: 1, a: 1 }),\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Connections,\r\n    WorldSpace,\r\n    Camera,\r\n    Translate,\r\n    Zoom,\r\n    Transform,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { Mat3 } from \"../linear_algebra\";\r\nimport { geometry as connectionGeometry } from './connection'\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Layout)!.layout(child, constraints)\r\n    }\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const camera = self.get(Camera)!.entity.get(Transform)!.matrix\r\n    layers.pushAndSetActiveCamera(camera)\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    connectionGeometry(self.get(Connections)!.entities, layers)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    camera: Entity,\r\n    children: Entity[],\r\n    connections: Entity[],\r\n}\r\n\r\nexport const scene = (ecs: ECS, properties: Properties) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(properties.children),\r\n        new Connections(properties.connections),\r\n        new Camera(properties.camera),\r\n    )","type Component<T> = { new(...args: any[]): T }\r\n\r\nclass Storage<T> {\r\n  lookup: Map<number, number>\r\n  data: T[]\r\n  inverses: number[]\r\n\r\n  constructor() {\r\n    this.clear()\r\n  }\r\n\r\n  get = (entity: Entity): T | undefined => {\r\n    const index = this.lookup.get(entity.id)\r\n    return index != undefined ? this.data[index] : undefined\r\n  }\r\n\r\n  hasId = (id: number): boolean => {\r\n    return this.lookup.has(id)\r\n  }\r\n\r\n  set = (entity: Entity, component: T): void => {\r\n    const index = this.lookup.get(entity.id)\r\n    if (index) {\r\n      this.data[index] = component\r\n      this.inverses[index] = entity.id\r\n      return\r\n    }\r\n    this.lookup.set(entity.id, this.data.length)\r\n    this.data.push(component)\r\n    this.inverses.push(entity.id)\r\n  }\r\n\r\n  clear = (): void => {\r\n    this.lookup = new Map()\r\n    this.data = []\r\n    this.inverses = []\r\n  }\r\n}\r\n\r\nexport class Entity {\r\n  constructor(public id: number, public ecs: ECS) { }\r\n\r\n  set = (...components: any): Entity => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      let storage = this.ecs.storages.get(Type)\r\n      if (!storage) {\r\n        storage = new Storage()\r\n        this.ecs.storages.set(Type, storage)\r\n      }\r\n      storage.set(this, component)\r\n    }\r\n    return this\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): Readonly<T> | undefined => {\r\n    const storage = this.ecs.storages.get(Type)\r\n    return storage ? storage.get(this) : undefined\r\n  }\r\n\r\n  update = <T>(Type: Component<T>, f: (_: T) => void): void => {\r\n    const storage = this.ecs.storages.get(Type)\r\n    if (!storage) return\r\n    const component = storage.get(this)\r\n    if (!component) return\r\n    f(component)\r\n  }\r\n}\r\n\r\nexport class ECS {\r\n  nextEntityId: number\r\n  storages: Map<Component<any>, Storage<any>>\r\n  resources: Map<Component<any>, any>\r\n\r\n  constructor() {\r\n    this.nextEntityId = 0\r\n    this.storages = new Map()\r\n    this.resources = new Map()\r\n  }\r\n\r\n  entity = (...components: any): Entity => {\r\n    const entity = new Entity(this.nextEntityId, this)\r\n    entity.set(...components)\r\n    ++this.nextEntityId\r\n    return entity\r\n  }\r\n\r\n  query = function* (...components: any): Generator<Entity> {\r\n    const primary = this.storages.get(components[0])\r\n    if (!primary) return\r\n    const secondary = components.slice(1).map(s => this.storages.get(s))\r\n    for (const id of primary.inverses) {\r\n      if (secondary.every(storage => storage.hasId(id))) {\r\n        yield new Entity(id, this)\r\n      }\r\n    }\r\n  }\r\n\r\n  set = <T>(...components: any): void => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      this.resources.set(Type, component)\r\n    }\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): T | undefined => {\r\n    return this.resources.get(Type)\r\n  }\r\n\r\n  unsetAll = <T>(Type: Component<T>): void => {\r\n    const storage = this.storages.get(Type)\r\n    if (!storage) return\r\n    storage.clear()\r\n  }\r\n}\r\n","import { Connections, Hsla, OnClick, OnDrag, Translate } from './components'\r\nimport { Mat3, Vec3 } from './linear_algebra'\r\nimport * as Studio from './studio'\r\nimport { Entity } from './studio'\r\nconst { ECS, Renderer } = Studio\r\nconst { UIRoot, Alignment, Transform } = Studio.components\r\nconst { text, column, row, container, scene, connection } = Studio.ui\r\nconst { render, rayCast } = Studio.systems\r\n\r\nconst ecs = new ECS()\r\nconst renderer = new Renderer(window.innerWidth, window.innerHeight)\r\nrenderer.canvas.style.width = '100%'\r\nrenderer.canvas.style.height = '100%'\r\n\r\nconst dragSelf = (entity: Entity, x: number, y: number) =>\r\n    entity.update(Translate, translate => {\r\n        translate.x += x\r\n        translate.y += y\r\n    })\r\n\r\n\r\n\r\nlet connectionFrom: Entity | null = null\r\n\r\n\r\nconst clickOutput = (entity: Entity) => connectionFrom = entity\r\n\r\nconst clickInput = (entity: Entity) => {\r\n    if (!connectionFrom) return\r\n    const con = connection(ecs, { from: connectionFrom, to: entity })\r\n    root.update(Connections, connections =>\r\n        connections.entities.push(con)\r\n    )\r\n    connectionFrom = null\r\n    requestAnimationFrame(() => render(ecs))\r\n}\r\n\r\n\r\nconst inputs = (n: number, color: Hsla): Entity =>\r\n    column(ecs, Array.from({ length: n }, (_, i) =>\r\n        row(ecs, [\r\n            container(ecs, { width: 18, height: 18, color, onClick: clickInput }),\r\n            container(ecs, { width: 5 }),\r\n            container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, `in ${i}`)),\r\n        ]),\r\n    ))\r\n\r\n\r\nconst outputs = (n: number, color: Hsla): Entity =>\r\n    column(ecs, { crossAxisAlignment: Alignment.END }, Array.from({ length: n }, (_, i) =>\r\n        row(ecs, [\r\n            container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, `out ${i}`)),\r\n            container(ecs, { width: 5 }),\r\n            container(ecs, { width: 18, height: 18, color, onClick: clickOutput })\r\n        ]),\r\n    ))\r\n\r\n\r\nconst source = container(ecs, { color: { h: 110, s: 1, l: 0.3, a: 1 }, padding: 10, x: 25, y: 200, onDrag: dragSelf },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Source\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            inputs(3, { h: 70, s: 1, l: 0.7, a: 1 }),\r\n            container(ecs, { width: 30 }),\r\n            outputs(2, { h: 70, s: 1, l: 0.7, a: 1 }),\r\n        ])\r\n    ])\r\n)\r\n\r\nconst transform = container(ecs, { color: { h: 210, s: 1, l: 0.3, a: 1 }, padding: 10, x: 300, y: 100, onDrag: dragSelf },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Transform\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            inputs(2, { h: 170, s: 1, l: 0.7, a: 1 }),\r\n            container(ecs, { width: 30 }),\r\n            outputs(4, { h: 170, s: 1, l: 0.7, a: 1 }),\r\n        ])\r\n    ])\r\n)\r\n\r\nconst sink = container(ecs, { color: { h: 310, s: 1, l: 0.3, a: 1 }, padding: 10, x: 550, y: 250, onDrag: dragSelf },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Sink\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            inputs(3, { h: 270, s: 1, l: 0.7, a: 1 }),\r\n            container(ecs, { width: 30 }),\r\n            outputs(3, { h: 270, s: 1, l: 0.7, a: 1 })\r\n        ])\r\n    ])\r\n)\r\n\r\nconst camera = ecs.entity(new Transform(Mat3.identity()),)\r\n\r\nconst root = scene(ecs, {\r\n    camera,\r\n    children: [source, transform, sink],\r\n    connections: []\r\n})\r\n\r\necs.set(renderer, new UIRoot(root))\r\n\r\nrequestAnimationFrame(() => render(ecs))\r\n\r\nconst pointers: PointerEvent[] = []\r\nlet dragging = false\r\nlet pointerDistance = 0\r\n\r\ndocument.addEventListener('pointerdown', (e) => {\r\n    pointers.push(e)\r\n    if (pointers.length != 1) return\r\n    const cameraMatrix = camera.get(Transform)!.matrix\r\n    const mouse = new Vec3([e.clientX, e.clientY, 1])\r\n    for (const entity of rayCast(ecs, cameraMatrix, mouse)) {\r\n        const onClick = entity.get(OnClick)\r\n        if (onClick) {\r\n            onClick.callback(entity)\r\n            requestAnimationFrame(() => render(ecs))\r\n            return\r\n        }\r\n    }\r\n    dragging = true\r\n})\r\n\r\n\r\nlet draggedEntity: Entity | null = null\r\n\r\ndocument.addEventListener('pointermove', (e) => {\r\n    pointers[pointers.findIndex(p => p.pointerId == e.pointerId)] = e\r\n    if (dragging && pointers.length == 1) {\r\n        if (draggedEntity) {\r\n            const onDrag = draggedEntity.get(OnDrag)!.callback\r\n            onDrag(draggedEntity, e.movementX, e.movementY)\r\n            requestAnimationFrame(() => render(ecs))\r\n            return\r\n        }\r\n        const cameraMatrix = camera.get(Transform)!.matrix\r\n        const mouse = new Vec3([e.clientX, e.clientY, 1])\r\n        for (const entity of rayCast(ecs, cameraMatrix, mouse)) {\r\n            const onDrag = entity.get(OnDrag)\r\n            if (onDrag) {\r\n                draggedEntity = entity\r\n                onDrag.callback(entity, e.movementX, e.movementY)\r\n                requestAnimationFrame(() => render(ecs))\r\n                return\r\n            }\r\n        }\r\n        camera.update(Transform, transform => {\r\n            const translate = Mat3.translation(-e.movementX, -e.movementY)\r\n            transform.matrix = transform.matrix.matMul(translate)\r\n        })\r\n        requestAnimationFrame(() => render(ecs))\r\n    } else if (pointers.length == 2) {\r\n        const [x1, y1] = [pointers[0].clientX, pointers[0].clientY]\r\n        const [x2, y2] = [pointers[1].clientX, pointers[1].clientY]\r\n        const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n        if (pointerDistance > 0) {\r\n            const move = Mat3.translation(e.clientX, e.clientY)\r\n            const zoom = Math.pow(2, (pointerDistance - distance) * 0.01)\r\n            const scale = Mat3.scaling(zoom, zoom)\r\n            const moveBack = Mat3.translation(-e.clientX, -e.clientY)\r\n            const result = move.matMul(scale).matMul(moveBack)\r\n            camera.update(Transform, transform =>\r\n                transform.matrix = transform.matrix.matMul(result)\r\n            )\r\n        }\r\n        pointerDistance = distance\r\n        requestAnimationFrame(() => render(ecs))\r\n    }\r\n})\r\n\r\ndocument.addEventListener('pointerup', (e) => {\r\n    pointers.splice(pointers.findIndex(p => p.pointerId == e.pointerId), 1)\r\n    if (pointers.length == 0) {\r\n        dragging = false\r\n        pointerDistance = 0\r\n        draggedEntity = null\r\n    }\r\n})\r\n\r\nwindow.addEventListener('resize', () => {\r\n    renderer.setSize(renderer.canvas.clientWidth, renderer.canvas.clientHeight)\r\n    requestAnimationFrame(() => render(ecs))\r\n})\r\n\r\ndocument.body.appendChild(renderer.canvas)\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    renderer.canvas.requestFullscreen()\r\n})\r\n\r\ndocument.addEventListener('wheel', (e) => {\r\n    e.preventDefault()\r\n    camera.update(Transform, transform => {\r\n        const move = Mat3.translation(e.clientX, e.clientY)\r\n        const zoom = Math.pow(2, e.deltaY * 0.01)\r\n        const scale = Mat3.scaling(zoom, zoom)\r\n        const moveBack = Mat3.translation(-e.clientX, -e.clientY)\r\n        const result = move.matMul(scale).matMul(moveBack)\r\n        transform.matrix = transform.matrix.matMul(result)\r\n    })\r\n    requestAnimationFrame(() => render(ecs))\r\n}, { passive: false })\r\n\r\n//document.addEventListener('keydown', (e) => e.preventDefault())"],"names":["$b28c6149dbdf1c74$export$63548ce3f438e2c4","constructor","entity","$b28c6149dbdf1c74$export$5f1af8db9871e1d6","value","$b28c6149dbdf1c74$export$80f2abd03de5ca5a","$b28c6149dbdf1c74$export$cd0608c167c7849e","$b28c6149dbdf1c74$export$3edfc50f178e5b0b","$b28c6149dbdf1c74$export$dca3b0875bd9a954","entities","$b28c6149dbdf1c74$export$f3ea0776119f0e84","$b28c6149dbdf1c74$export$79f141de891a5fed","$b28c6149dbdf1c74$export$9d7927214ed7d2cf","Alignment1","$b28c6149dbdf1c74$export$66a3248d846611ce","alignment","$b28c6149dbdf1c74$export$8ee255758437644c","$b28c6149dbdf1c74$export$8954cfac7c08d16a","$b28c6149dbdf1c74$export$9db2ba50894db2b9","x","y","$b28c6149dbdf1c74$export$563a914cafbdc389","matrix","$b28c6149dbdf1c74$export$65cfd44a2050f99","scale","$b28c6149dbdf1c74$export$678de176a9a9dea","$b28c6149dbdf1c74$export$d10b08d1cf690764","$b28c6149dbdf1c74$export$892596cec99bc70e","h","s","l","a","this","$b28c6149dbdf1c74$export$8ee6ea94b5aedb49","$b28c6149dbdf1c74$export$6e8e053b4dff75fa","minWidth","maxWidth","minHeight","maxHeight","$b28c6149dbdf1c74$export$cb6da89c6af1a8ec","width","height","$b28c6149dbdf1c74$export$8caee09accd95d7f","add","other","$b28c6149dbdf1c74$export$c84671f46d6a1ca","impl","layout","self","constraints","$b28c6149dbdf1c74$export$77f0fd777d3cc7db","$b28c6149dbdf1c74$export$92bffd8adab203ca","data","$b28c6149dbdf1c74$export$535dd6b7931a007","$b28c6149dbdf1c74$export$c537fa0d021d010b","$b28c6149dbdf1c74$export$fc4f2b7e7f87722c","$b28c6149dbdf1c74$export$39d3d935cf79db44","$b28c6149dbdf1c74$export$2db6c17465f94a2","geometry","parentOffset","layers","z","$b28c6149dbdf1c74$export$b11ff02aa7665438","callback","$b28c6149dbdf1c74$export$35ee2f917ebd5998","$a26733d1baff63db$export$838423f3adec30fa","$a26733d1baff63db$export$83f4edd572c84121","matMul","b","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","vecMul","b1","b2","b3","inverse","idet","static","radians","c","Math","cos","sin","$621f3774f67738fc$var$DefaultProgram","gl","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","log","getShaderInfoLog","vertexArrayObject","createVertexArray","bindVertexArray","positionBuffer","createBuffer","bindAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","textureCoordinatesBuffer","colorBuffer","matrixIndexBuffer","vertexAttribIPointer","UNSIGNED_BYTE","indexBuffer","devicePixelRatioLocation","getUniformLocation","matricesLocation","texture","metrics","fontFamily","fontSize","metric","charCodeAt","$621f3774f67738fc$var$createFontMetrics","font","canvas","document","createElement","ctx","getContext","rows","sqrt","size","current","$621f3774f67738fc$var$nearestPowerOfTwo","cellSize","window","devicePixelRatio","style","textAlign","textBaseline","fillStyle","chars","Array","from","length","v","i","map","String","fromCharCode","clearRect","measureText","ceil","floor","fillText","TEXTURE_2D","RGBA","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","touchAction","clearColor","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","depthMask","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","activeTexture","TEXTURE0","fontAtlasses","Map","textures","setSize","createTexture","bindTexture","texImage2D","Uint8Array","push","uniform2f","resolutionLocation","uniform1f","viewport","recreateFontAtlasses","COLOR_BUFFER_BIT","matrices","uniformMatrix3fv","vertices","colors","textureCoordinates","vertexIndices","cameraIndices","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","$9a7c059fd1344034$export$b3890eb0ae9dca99","ecs","$cb3d056828175573$export$b3219800bda33a1f","$90a5a29c0fcb75eb$export$42a7622cbf932bb","renderer","get","$621f3774f67738fc$export$88530751e3977073","projection","setMatrices","cameras","camera","clear","previousTexture","layer","draw","offset","index","$9a7c059fd1344034$var$renderTriangles","lines","drawLines","$9a7c059fd1344034$var$renderLines","set","ui","$3b19fb344542138e$export$89312ce47c0ca777","identity","activeCamera","pushAndSetActiveCamera","$231f2a51c75bf33f$export$51be7442bbfe168a","vec","mx","my","_","reverse","values","$2d5075f154be1094$var$layout","text1","atlas","fontAtlas","max","$2d5075f154be1094$var$textSize","$2d5075f154be1094$var$geometry","text2","indexOffset","indices","x0","x1","y0","y1","fill","$2d5075f154be1094$var$textGeometry","$2d5075f154be1094$export$6f093cfa640b7166","args","properties","color","$fd89ce3675dee463$var$layout","child","childSize","update","$fd89ce3675dee463$var$geometry","$fd89ce3675dee463$export$3481c78889e8fbe8","$518015a6e3cc694d$var$layout","children","START","CENTER","child1","childWidth","END","child2","$518015a6e3cc694d$var$geometry","$518015a6e3cc694d$export$4e0c71f277ca26b3","crossAxisAlignment","$9e4edab979495f0d$var$layout","childHeight","$9e4edab979495f0d$var$geometry","$9e4edab979495f0d$export$120ff0929b202a6d","$8a99d960732a172f$var$clamp","min","$8a99d960732a172f$var$layout","padding","offset1","$8a99d960732a172f$var$geometry","$8a99d960732a172f$export$34e0f9847d4c02dd","onDrag","onClick","$5dee3d2e57488100$var$cubicBezier","ts","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","result","lastX","lastY","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$5dee3d2e57488100$export$42a7622cbf932bb","connections","start","stop","num","step","$5dee3d2e57488100$var$linspace","samples","$5dee3d2e57488100$export$412d2991813e589a","$864b15efd9f5e1a7$var$layout","$864b15efd9f5e1a7$var$geometry","$864b15efd9f5e1a7$export$33aff30b8aa0934e","$556f46b6ec271235$var$Storage","lookup","id","undefined","hasId","has","component","inverses","$556f46b6ec271235$export$bc644a473284d944","components","Type","storage","storages","f","$556f46b6ec271235$export$d01098d378880d3","nextEntityId","resources","query","primary","secondary","slice","every","unsetAll","ECS","$b4e14b6b8da86996$var$ECS","Renderer","$b4e14b6b8da86996$var$Renderer","$91ae824a8b26c87f$exports","UIRoot","$b4e14b6b8da86996$var$UIRoot","Alignment","$b4e14b6b8da86996$var$Alignment","Transform","$b4e14b6b8da86996$var$Transform","text","$b4e14b6b8da86996$var$text","column","$b4e14b6b8da86996$var$column","row","$b4e14b6b8da86996$var$row","container","$b4e14b6b8da86996$var$container","scene","$b4e14b6b8da86996$var$scene","connection","$b4e14b6b8da86996$var$connection","render","$b4e14b6b8da86996$var$render","rayCast","$b4e14b6b8da86996$var$rayCast","systems","$b4e14b6b8da86996$var$ecs","$b4e14b6b8da86996$var$renderer","innerWidth","innerHeight","$b4e14b6b8da86996$var$dragSelf","translate","$b4e14b6b8da86996$var$connectionFrom","$b4e14b6b8da86996$var$clickOutput","$b4e14b6b8da86996$var$clickInput","con","$b4e14b6b8da86996$var$root","requestAnimationFrame","$b4e14b6b8da86996$var$inputs","n","$b4e14b6b8da86996$var$outputs","$b4e14b6b8da86996$var$source","$b4e14b6b8da86996$var$transform","$b4e14b6b8da86996$var$sink","$b4e14b6b8da86996$var$camera","$b4e14b6b8da86996$var$pointers","$b4e14b6b8da86996$var$dragging","$b4e14b6b8da86996$var$pointerDistance","addEventListener","e","cameraMatrix","mouse","clientX","clientY","$b4e14b6b8da86996$var$draggedEntity","findIndex","p","pointerId","movementX","movementY","transform1","translation","x2","y2","distance","pow","move","zoom","scaling","moveBack","transform2","splice","clientWidth","clientHeight","body","appendChild","requestFullscreen","preventDefault","transform3","deltaY","passive"],"version":3,"file":"index.b3a68fc2.js.map"}