{"mappings":"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","sources":["src/linear_algebra.ts","src/renderer.ts","src/components.ts","src/systems/render.ts","src/systems/layout.ts","src/layers.ts","src/systems/geometry.ts","src/ui/text.ts","src/ui/center.ts","src/ui/column.ts","src/ui/row.ts","src/ui/container.ts","src/ui/connection.ts","src/ui/scene.ts","src/ecs.ts","src/index.ts"],"sourcesContent":["export class Vec3 {\r\n    constructor(public data: number[]) { }\r\n}\r\n\r\nexport class Mat3 {\r\n    constructor(public data: number[]) { }\r\n\r\n    static identity = () => new Mat3([\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1,\r\n    ])\r\n\r\n    static projection = (width: number, height: number) => new Mat3([\r\n        2 / width, 0, -1,\r\n        0, -2 / height, 1,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static translation = (x: number, y: number) => new Mat3([\r\n        1, 0, x,\r\n        0, 1, y,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static rotation = (radians: number) => {\r\n        const c = Math.cos(radians)\r\n        const s = Math.sin(radians)\r\n        return new Mat3([\r\n            c, s, 0,\r\n            -s, c, 0,\r\n            0, 0, 1\r\n        ])\r\n    }\r\n\r\n    static scaling = (x: number, y: number) => new Mat3([\r\n        x, 0, 0,\r\n        0, y, 0,\r\n        0, 0, 1\r\n    ])\r\n\r\n    matMul = (other: Mat3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return new Mat3([\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ])\r\n    }\r\n\r\n    vecMul = (other: Vec3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b1 = b[0]\r\n        const b2 = b[1]\r\n        const b3 = b[2]\r\n        const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n        const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n        const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n        return new Vec3([c1, c2, c3])\r\n    }\r\n\r\n    inverse = () => {\r\n        const a = this.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = a22 * a33 - a23 * a32\r\n        const b12 = a21 * a33 - a23 * a31\r\n        const b13 = a21 * a32 - a22 * a31\r\n        const b21 = a12 * a33 - a13 * a32\r\n        const b22 = a11 * a33 - a13 * a31\r\n        const b23 = a11 * a32 - a12 * a31\r\n        const b31 = a12 * a23 - a13 * a22\r\n        const b32 = a11 * a23 - a13 * a21\r\n        const b33 = a11 * a22 - a12 * a21\r\n        const det = a31 * b31 - a32 * b32 + a33 * b33\r\n        const idet = 1 / det\r\n        return new Mat3([\r\n            idet * b11, idet * -b21, idet * b31,\r\n            idet * -b12, idet * b22, idet * -b32,\r\n            idet * b13, idet * -b23, idet * b33\r\n        ])\r\n    }\r\n}","import { Mat3 } from \"./linear_algebra\"\r\n\r\nclass DefaultProgram {\r\n    positionBuffer: WebGLBuffer\r\n    colorBuffer: WebGLBuffer\r\n    textureCoordinatesBuffer: WebGLBuffer\r\n    indexBuffer: WebGLBuffer\r\n    resolutionLocation: WebGLUniformLocation\r\n    devicePixelRatioLocation: WebGLUniformLocation\r\n    matricesLocation: WebGLUniformLocation\r\n    matrixIndexBuffer: WebGLBuffer\r\n\r\n    constructor(gl: WebGL2RenderingContext) {\r\n        const aPositionLocation = 0\r\n        const aTextureCoordinatesLocation = 1\r\n        const aColorLocation = 2\r\n        const aMatrixIndexLocation = 3\r\n\r\n        const vertexShaderSource = `#version 300 es\r\n  uniform float u_devicePixelRatio;\r\n  uniform mat3 u_matrices[10];\r\n\r\n  layout(location = ${aPositionLocation}) in vec2 a_position;\r\n  layout(location = ${aTextureCoordinatesLocation}) in vec2 a_textureCoordinates;\r\n  layout(location = ${aColorLocation}) in vec4 a_color;\r\n  layout(location = ${aMatrixIndexLocation}) in uint a_matrixIndex;\r\n\r\n  out vec2 v_textureCoordinates;\r\n  out vec4 v_color;\r\n\r\n  void main() {\r\n    gl_Position = vec4((u_matrices[a_matrixIndex] * vec3(a_position, 1)).xy, 0, 1);\r\n    v_textureCoordinates = a_textureCoordinates * u_devicePixelRatio;\r\n    v_color = a_color;\r\n  }\r\n  `\r\n        const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec2 v_textureCoordinates;\r\n  in vec4 v_color;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  vec4 hslToRgb(in vec4 hsl) {\r\n    float h = hsl.x / 360.0;\r\n    vec3 rgb = clamp(abs(mod(h * 6.0 + vec3(0.0,4.0,2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\r\n    return vec4(hsl.z + hsl.y * (rgb - 0.5) * (1.0 - abs(2.0 * hsl.z - 1.0)), hsl.w);\r\n  }\r\n\r\n  void main() {\r\n    ivec2 size = textureSize(u_texture, 0);\r\n    vec2 coordinate = v_textureCoordinates / vec2(float(size.x), float(size.y));\r\n    fragColor = texture(u_texture, coordinate) * hslToRgb(v_color);\r\n  }\r\n  `\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n        gl.shaderSource(vertexShader, vertexShaderSource)\r\n        gl.compileShader(vertexShader)\r\n\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n        gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n        gl.compileShader(fragmentShader)\r\n\r\n        const program = gl.createProgram()!\r\n        gl.attachShader(program, vertexShader)\r\n        gl.attachShader(program, fragmentShader)\r\n        gl.linkProgram(program)\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            console.log(gl.getShaderInfoLog(vertexShader))\r\n            console.log(gl.getShaderInfoLog(fragmentShader))\r\n        }\r\n\r\n        gl.useProgram(program)\r\n\r\n        const vertexArrayObject = gl.createVertexArray()!\r\n        gl.bindVertexArray(vertexArrayObject)\r\n\r\n        this.positionBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aPositionLocation, 'a_position')\r\n        gl.enableVertexAttribArray(aPositionLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer)\r\n        gl.vertexAttribPointer(\r\n            aPositionLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.textureCoordinatesBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aTextureCoordinatesLocation, 'a_textureCoordinates')\r\n        gl.enableVertexAttribArray(aTextureCoordinatesLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordinatesBuffer)\r\n        gl.vertexAttribPointer(\r\n            aTextureCoordinatesLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.colorBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aColorLocation, 'a_color')\r\n        gl.enableVertexAttribArray(aColorLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer)\r\n        gl.vertexAttribPointer(\r\n            aColorLocation,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.matrixIndexBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aMatrixIndexLocation, 'a_matrixIndex')\r\n        gl.enableVertexAttribArray(aMatrixIndexLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.matrixIndexBuffer)\r\n        gl.vertexAttribIPointer(\r\n            aMatrixIndexLocation,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.indexBuffer = gl.createBuffer()!\r\n        this.devicePixelRatioLocation = gl.getUniformLocation(program, 'u_devicePixelRatio')!\r\n        this.matricesLocation = gl.getUniformLocation(program, 'u_matrices')!\r\n    }\r\n}\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\ninterface Metric {\r\n    x: number\r\n    y: number\r\n    width: number\r\n    height: number\r\n}\r\n\r\nclass FontAtlas {\r\n    constructor(\r\n        public texture: number,\r\n        public metrics: Metric[],\r\n        public fontFamily: string,\r\n        public fontSize: number,\r\n    ) { }\r\n\r\n    metric = (c: string) => this.metrics[c.charCodeAt(0)]\r\n}\r\n\r\ninterface DrawData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    vertexIndices: number[]\r\n    cameraIndices: number[]\r\n}\r\n\r\ninterface DrawLineData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    cameraIndices: number[]\r\n}\r\n\r\nconst createFontMetrics = (gl: WebGL2RenderingContext, texture: WebGLTexture, font: string, fontSize: number) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(fontSize * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * window.devicePixelRatio\r\n    canvas.height = size * window.devicePixelRatio\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = font\r\n    ctx.fillStyle = 'white'\r\n    const ascii = Array.from({ length: totalCells }, (v, i) => i)\r\n    const chars = ascii.map(c => String.fromCharCode(c))\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const metrics = chars.map((c, i) => {\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const height = fontSize\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        return {\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height\r\n        }\r\n    })\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas)\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return metrics\r\n}\r\n\r\nexport class Renderer {\r\n    gl: WebGL2RenderingContext\r\n    canvas: HTMLCanvasElement\r\n    program: DefaultProgram\r\n    width: number\r\n    height: number\r\n    fontAtlasses: Map<string, FontAtlas>\r\n    textures: WebGLTexture[]\r\n    devicePixelRatio: number\r\n\r\n    constructor(width: number, height: number) {\r\n        const canvas = document.createElement('canvas')\r\n        canvas.style.touchAction = 'none'\r\n        const gl = canvas.getContext('webgl2')!\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0)\r\n        gl.enable(gl.BLEND)\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n        gl.depthMask(false)\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n        gl.activeTexture(gl.TEXTURE0)\r\n        this.gl = gl\r\n        this.canvas = canvas\r\n        this.program = new DefaultProgram(gl)\r\n        this.fontAtlasses = new Map()\r\n        this.textures = []\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.setSize(width, height)\r\n        const texture = gl.createTexture()!\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255]))\r\n        this.textures.push(texture)\r\n    }\r\n\r\n    setSize = (width: number, height: number) => {\r\n        const { gl, canvas } = this\r\n        canvas.width = width * window.devicePixelRatio\r\n        canvas.height = height * window.devicePixelRatio\r\n        gl.uniform2f(this.program.resolutionLocation, canvas.width, canvas.height)\r\n        gl.uniform1f(this.program.devicePixelRatioLocation, window.devicePixelRatio)\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this.width = width\r\n        this.height = height\r\n        if (this.devicePixelRatio == window.devicePixelRatio) return\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.recreateFontAtlasses()\r\n    }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    setMatrices = (matrices: Mat3[]) => {\r\n        const { gl } = this\r\n        const data: number[] = []\r\n        for (const matrix of matrices) {\r\n            data.push(...matrix.data)\r\n        }\r\n        gl.uniformMatrix3fv(this.program.matricesLocation, /*transpose*/true, /*data*/data)\r\n    }\r\n\r\n    draw = ({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices }: DrawData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.matrixIndexBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors, textureCoordinates, cameraIndices }: DrawLineData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.matrixIndexBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndices), gl.STATIC_DRAW)\r\n        gl.drawArrays(gl.LINES, 0, vertices.length / 2)\r\n    }\r\n\r\n    recreateFontAtlasses = () => {\r\n        for (const [font, fontAtlas] of this.fontAtlasses) {\r\n            const texture = this.textures[fontAtlas.texture]\r\n            const metrics = createFontMetrics(this.gl, texture, font, fontAtlas.fontSize)\r\n            fontAtlas.metrics = metrics\r\n        }\r\n    }\r\n\r\n    fontAtlas = (fontFamily: string, fontSize: number): FontAtlas => {\r\n        const font = `${fontSize}px ${fontFamily}`\r\n        const atlas = this.fontAtlasses.get(font)\r\n        if (atlas) return atlas\r\n        const { gl } = this\r\n        const texture = gl.createTexture()!\r\n        const metrics = createFontMetrics(gl, texture, font, fontSize)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newAtlas = new FontAtlas(textureIndex, metrics, fontFamily, fontSize)\r\n        this.fontAtlasses.set(font, newAtlas)\r\n        return newAtlas\r\n    }\r\n}","import { Entity } from \"./ecs\";\r\nimport { Layers } from \"./layers\";\r\nimport { Mat3 } from \"./linear_algebra\";\r\n\r\nexport class UIRoot { constructor(public entity: Entity) { } }\r\n\r\nexport class Text { constructor(public value: string) { } }\r\n\r\nexport class FontSize { constructor(public value: number) { } }\r\n\r\nexport class FontFamily { constructor(public value: string) { } }\r\n\r\nexport class Child { constructor(public entity: Entity) { } }\r\n\r\nexport class Children { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Connections { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Camera { constructor(public entity: Entity) { } }\r\n\r\nexport enum Alignment { START, CENTER, END }\r\n\r\nexport class CrossAxisAlignment { constructor(public alignment: Alignment) { } }\r\n\r\nexport class Width { constructor(public value: number) { } }\r\n\r\nexport class Height { constructor(public value: number) { } }\r\n\r\nexport class Translate {\r\n    constructor(public x: number, public y: number) { }\r\n}\r\n\r\nexport class Transform { constructor(public matrix: Mat3) { } }\r\n\r\nexport class Zoom {\r\n    constructor(\r\n        public scale: number,\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n}\r\n\r\nexport class From { constructor(public entity: Entity) { } }\r\n\r\nexport class To { constructor(public entity: Entity) { } }\r\n\r\nexport interface Hsla {\r\n    h: number\r\n    s: number\r\n    l: number\r\n    a: number\r\n}\r\n\r\nexport class Color {\r\n    h: number\r\n    s: number\r\n    l: number\r\n    a: number\r\n\r\n    constructor({ h, s, l, a }: Hsla) {\r\n        this.h = h\r\n        this.s = s\r\n        this.l = l\r\n        this.a = a\r\n    }\r\n}\r\n\r\nexport class Padding { constructor(public value: number) { } }\r\n\r\nexport class Constraints {\r\n    constructor(\r\n        public minWidth: number,\r\n        public maxWidth: number,\r\n        public minHeight: number,\r\n        public maxHeight: number\r\n    ) { }\r\n}\r\n\r\nexport class Size {\r\n    constructor(\r\n        public width: number,\r\n        public height: number,\r\n    ) { }\r\n}\r\n\r\nexport class Offset {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n\r\n    add = (other: Offset) => new Offset(this.x + other.x, this.y + other.y)\r\n}\r\n\r\nexport class Layout {\r\n    constructor(\r\n        private impl: (self: Entity, constraints: Constraints) => Size\r\n    ) { }\r\n\r\n    layout = (self: Entity, constraints: Constraints) =>\r\n        this.impl(self, constraints)\r\n}\r\n\r\nexport class WorldSpace {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public width: number,\r\n        public height: number\r\n    ) { }\r\n}\r\n\r\nexport class Vertices { constructor(public data: number[]) { } }\r\n\r\nexport class TextureCoordinates { constructor(public data: number[]) { } }\r\n\r\nexport class Colors { constructor(public data: number[]) { } }\r\n\r\nexport class VertexIndices { constructor(public data: number[]) { } }\r\n\r\nexport class CameraIndices { constructor(public data: number[]) { } }\r\n\r\nexport class Geometry {\r\n    constructor(\r\n        private impl: (self: Entity, parentOffset: Offset, layers: Layers, z: number) => void\r\n    ) { }\r\n\r\n    geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) =>\r\n        this.impl(self, parentOffset, layers, z)\r\n}","import { Renderer } from \"../renderer\";\r\nimport { ECS } from \"../ecs\";\r\nimport { CameraIndices, Colors, TextureCoordinates, VertexIndices, Vertices } from \"../components\";\r\nimport { Layers } from \"../layers\";\r\nimport { layout, geometry } from './'\r\nimport { Mat3 } from \"../linear_algebra\";\r\n\r\nconst renderTriangles = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let vertexIndices: number[] = []\r\n    let cameraIndices: number[] = []\r\n    let previousTexture: number = -1\r\n    for (const layer of layers.layers) {\r\n        for (const [texture, entities] of layer) {\r\n            if (texture != previousTexture) {\r\n                if (vertices.length) {\r\n                    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices })\r\n                    vertices = []\r\n                    colors = []\r\n                    textureCoordinates = []\r\n                    vertexIndices = []\r\n                    cameraIndices = []\r\n                }\r\n                previousTexture = texture\r\n                gl.bindTexture(gl.TEXTURE_2D, renderer.textures[texture])\r\n            }\r\n            for (const entity of entities) {\r\n                const offset = vertices.length / 2\r\n                vertices.push(...entity.get(Vertices)!.data)\r\n                colors.push(...entity.get(Colors)!.data)\r\n                textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n                for (const index of entity.get(VertexIndices)!.data) {\r\n                    vertexIndices.push(offset + index)\r\n                }\r\n                cameraIndices.push(...entity.get(CameraIndices)!.data)\r\n            }\r\n        }\r\n    }\r\n    if (vertices.length == 0) return\r\n    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices })\r\n}\r\n\r\nconst renderLines = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let cameraIndices: number[] = []\r\n    gl.bindTexture(gl.TEXTURE_2D, renderer.textures[0])\r\n    for (const entity of layers.lines) {\r\n        vertices.push(...entity.get(Vertices)!.data)\r\n        colors.push(...entity.get(Colors)!.data)\r\n        textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n        cameraIndices.push(...entity.get(CameraIndices)!.data)\r\n    }\r\n    if (vertices.length == 0) return\r\n    renderer.drawLines({ vertices, colors, textureCoordinates, cameraIndices })\r\n}\r\n\r\nexport const render = (ecs: ECS) => {\r\n    const begin = performance.now()\r\n    layout(ecs)\r\n    const layers = geometry(ecs)\r\n    const renderer = ecs.get(Renderer)!\r\n    const projection = Mat3.projection(renderer.width, renderer.height)\r\n    renderer.setMatrices(layers.cameras.map(camera => projection.matMul(camera.inverse())))\r\n    renderer.clear()\r\n    renderTriangles(renderer, layers)\r\n    renderLines(renderer, layers)\r\n    const end = performance.now()\r\n    const duration = end - begin\r\n    return duration\r\n}","import { Constraints, Layout, UIRoot } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nexport const layout = (ecs: ECS) => {\r\n    const { width, height } = ecs.get(Renderer)!\r\n    const ui = ecs.get(UIRoot)!.entity\r\n    const constraints = new Constraints(0, width, 0, height)\r\n    ui.get(Layout)!.layout(ui, constraints)\r\n}","import { Entity } from \"./ecs\";\r\nimport { Mat3 } from \"./linear_algebra\";\r\n\r\ninterface Data {\r\n    z: number\r\n    texture: number\r\n    entity: Entity\r\n}\r\n\r\nexport class Layers {\r\n    layers: Map<number, Entity[]>[]\r\n    lines: Entity[]\r\n    cameras: Mat3[]\r\n    activeCamera: number\r\n\r\n    constructor() {\r\n        this.layers = []\r\n        this.lines = []\r\n        this.cameras = [Mat3.identity()]\r\n        this.activeCamera = 0\r\n    }\r\n\r\n    pushAndSetActiveCamera = (camera: Mat3) => {\r\n        this.activeCamera = this.cameras.length\r\n        this.cameras.push(camera)\r\n    }\r\n\r\n    push = ({ z, texture, entity }: Data): void => {\r\n        for (let i = this.layers.length; i < z + 1; ++i) {\r\n            this.layers.push(new Map())\r\n        }\r\n        const layer = this.layers[z]\r\n        const entities = layer.get(texture)\r\n        if (entities) {\r\n            entities.push(entity)\r\n            return\r\n        }\r\n        layer.set(texture, [entity])\r\n    }\r\n}","import { UIRoot, Geometry, Offset } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nexport const geometry = (ecs: ECS): Layers => {\r\n    const layers = new Layers()\r\n    const ui = ecs.get(UIRoot)!.entity\r\n    ui.get(Geometry)!.geometry(ui, new Offset(0, 0), layers, 0)\r\n    return layers\r\n}","import {\r\n    Layout,\r\n    Text,\r\n    FontSize,\r\n    FontFamily,\r\n    Constraints,\r\n    Color,\r\n    Offset,\r\n    Geometry,\r\n    Size,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    Hsla,\r\n    WorldSpace,\r\n    CameraIndices\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nconst textSize = (renderer: Renderer, entity: Entity) => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let size = new Size(0, 0)\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        size.width += metric.width\r\n        size.height = Math.max(metric.height, size.height)\r\n    }\r\n    return size\r\n}\r\n\r\nconst textGeometry = (renderer: Renderer, entity: Entity, offset: Offset, layers: Layers): number => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const { h, s, l, a } = entity.get(Color)!\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let x = 0\r\n    let indexOffset = 0\r\n    const vertices: number[] = []\r\n    const textureCoordinates: number[] = []\r\n    const colors: number[] = []\r\n    const indices: number[] = []\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        const x0 = offset.x + x\r\n        const x1 = x0 + metric.width\r\n        const y0 = offset.y\r\n        const y1 = y0 + metric.height\r\n        vertices.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1,\r\n        )\r\n        textureCoordinates.push(\r\n            metric.x, metric.y,\r\n            metric.x, metric.y + metric.height,\r\n            metric.x + metric.width, metric.y,\r\n            metric.x + metric.width, metric.y + metric.height,\r\n        )\r\n        colors.push(\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n        )\r\n        indices.push(\r\n            indexOffset + 0, indexOffset + 1, indexOffset + 2,\r\n            indexOffset + 1, indexOffset + 2, indexOffset + 3,\r\n        )\r\n        x += metric.width\r\n        indexOffset += 4\r\n    }\r\n    entity.set(\r\n        new Vertices(vertices),\r\n        new TextureCoordinates(textureCoordinates),\r\n        new Colors(colors),\r\n        new VertexIndices(indices),\r\n        new CameraIndices(Array(indexOffset).fill(layers.activeCamera))\r\n    )\r\n    return atlas.texture\r\n}\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const size = textSize(self.ecs.get(Renderer)!, self)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const texture = textGeometry(self.ecs.get(Renderer)!, self, offset, layers)\r\n    layers.push({ z, entity: self, texture })\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    fontSize?: number\r\n    fontFamily?: number\r\n    color?: Hsla\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, data: string): Entity\r\n    (ecs: ECS, properties: Properties, data: string): Entity\r\n}\r\n\r\nexport const text: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, data] = (() => {\r\n        if (typeof args[0] === 'string') return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Text(data),\r\n        new FontSize(properties.fontSize ?? 24),\r\n        new FontFamily(properties.fontFamily ?? \"monospace\"),\r\n        new Color(properties.color ?? { h: 0, s: 1, l: 1, a: 1 }),\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const child = self.get(Child)!.entity\r\n    const childSize = child.get(Layout)!.layout(child, constraints)\r\n    child.update(Offset, offset => {\r\n        offset.x = constraints.maxWidth / 2 - childSize.width / 2\r\n        offset.y = constraints.maxHeight / 2 - childSize.height / 2\r\n    })\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const child = self.get(Child)!.entity\r\n    child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\nexport const center = (ecs: ECS, child: Entity) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Child(child)\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.y = height)\r\n        height += size.height\r\n        width = Math.max(width, size.width)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width / 2 - childWidth / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width - childWidth)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const column: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.x = width)\r\n        width += size.width\r\n        height = Math.max(height, size.height)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height / 2 - childHeight / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height - childHeight)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const row: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    Hsla,\r\n    Color,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    Padding,\r\n    Width,\r\n    Height,\r\n    WorldSpace,\r\n    Translate,\r\n    CameraIndices\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst clamp = (value: number, min: number, max: number): number =>\r\n    Math.max(Math.min(value, max), min)\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const padding = self.get(Padding)!.value\r\n    const child = self.get(Child)\r\n    const { x, y } = self.get(Translate)!\r\n    const offset = new Offset(x, y)\r\n    if (child) {\r\n        const childSize = child.entity.get(Layout)!.layout(child.entity, constraints)\r\n        const size = new Size(\r\n            Math.min(constraints.maxWidth, childSize.width + 2 * padding),\r\n            Math.min(constraints.maxHeight, childSize.height + 2 * padding),\r\n        )\r\n        child.entity.update(Offset, offset => {\r\n            offset.x = padding\r\n            offset.y = padding\r\n        })\r\n        self.set(constraints, size, offset)\r\n        return size\r\n    }\r\n    const size = new Size(\r\n        clamp(self.get(Width)!.value, constraints.minWidth, constraints.maxWidth),\r\n        clamp(self.get(Height)!.value, constraints.minHeight, constraints.maxHeight),\r\n    )\r\n    self.set(constraints, size, offset)\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const { width, height } = self.get(Size)!\r\n    const x0 = offset.x\r\n    const x1 = x0 + width\r\n    const y0 = offset.y\r\n    const y1 = y0 + height\r\n    const color = self.get(Color)\r\n    if (color) {\r\n        const { h, s, l, a } = color\r\n        self.set(\r\n            new Vertices([\r\n                x0, y0,\r\n                x0, y1,\r\n                x1, y0,\r\n                x1, y1,\r\n            ]),\r\n            new TextureCoordinates([\r\n                0, 0,\r\n                0, 0,\r\n                0, 0,\r\n                0, 0,\r\n            ]),\r\n            new Colors([\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n            ]),\r\n            new VertexIndices([\r\n                0, 1, 2,\r\n                1, 2, 3,\r\n            ]),\r\n            new CameraIndices(Array(4).fill(layers.activeCamera))\r\n        )\r\n        layers.push({ z, texture: 0, entity: self })\r\n    }\r\n    const child = self.get(Child)\r\n    if (child) {\r\n        child.entity.get(Geometry)!.geometry(child.entity, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(x0, y0, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    color?: Hsla\r\n    padding?: number\r\n    width?: number\r\n    height?: number\r\n    x?: number\r\n    y?: number\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, properties: Properties): Entity\r\n    (ecs: ECS, properties: Properties, child: Entity): Entity\r\n}\r\n\r\nexport const container: Overload = (ecs: ECS, properties: Properties, child?: Entity) => {\r\n    const entity = ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Padding(properties.padding ?? 0),\r\n        new Width(properties.width ?? 0),\r\n        new Height(properties.height ?? 0),\r\n        new Translate(properties.x ?? 0, properties.y ?? 0)\r\n    )\r\n    if (properties.color) entity.set(new Color(properties.color))\r\n    if (child) entity.set(new Child(child))\r\n    return entity\r\n}","import { CameraIndices, Color, Colors, From, Hsla, TextureCoordinates, To, Vertices, WorldSpace } from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nconst cubicBezier = (ts: number[], from: WorldSpace, to: WorldSpace): number[] => {\r\n    const p0x = from.x + from.width / 2\r\n    const p0y = from.y + from.height / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = to.x + to.width / 2\r\n    const p3y = to.y + to.height / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    const result: number[] = []\r\n    let lastX = 0\r\n    let lastY = 0\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (result.length) result.push(lastX, lastY)\r\n        else result.push(x, y)\r\n        result.push(x, y)\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n    return result\r\n}\r\n\r\nexport const geometry = (connections: Entity[], layers: Layers) => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const textureCoordinates = Array(samples * 4).fill(0)\r\n    for (const entity of connections) {\r\n        const from = entity.get(From)!.entity.get(WorldSpace)!\r\n        const to = entity.get(To)!.entity.get(WorldSpace)!\r\n        const vertices = cubicBezier(ts, from, to)\r\n        const { h, s, l, a } = entity.get(Color)!\r\n        const colors: number[] = []\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(h, s, l, a)\r\n        entity.set(\r\n            new Vertices(vertices),\r\n            new TextureCoordinates(textureCoordinates),\r\n            new Colors(colors),\r\n            new CameraIndices(Array(vertices.length / 2).fill(layers.activeCamera))\r\n        )\r\n        layers.lines.push(entity)\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    from: Entity\r\n    to: Entity\r\n    color?: Hsla\r\n}\r\n\r\nexport const connection = (ecs: ECS, properties: Properties): Entity =>\r\n    ecs.entity(\r\n        new From(properties.from),\r\n        new To(properties.to),\r\n        new Color(properties.color ?? { h: 0, s: 1, l: 1, a: 1 }),\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Connections,\r\n    WorldSpace,\r\n    Camera,\r\n    Translate,\r\n    Zoom,\r\n    Transform,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { Mat3 } from \"../linear_algebra\";\r\nimport { geometry as connectionGeometry } from './connection'\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Layout)!.layout(child, constraints)\r\n    }\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const camera = self.get(Camera)!.entity.get(Transform)!.matrix\r\n    layers.pushAndSetActiveCamera(camera)\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    connectionGeometry(self.get(Connections)!.entities, layers)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    camera: Entity,\r\n    children: Entity[],\r\n    connections: Entity[],\r\n}\r\n\r\nexport const scene = (ecs: ECS, properties: Properties) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(properties.children),\r\n        new Connections(properties.connections),\r\n        new Camera(properties.camera),\r\n    )","type Component<T> = { new(...args: any[]): T }\r\n\r\nclass Storage<T> {\r\n  lookup: Map<number, number>\r\n  data: T[]\r\n  inverses: number[]\r\n\r\n  constructor() {\r\n    this.clear()\r\n  }\r\n\r\n  get = (entity: Entity): T | undefined => {\r\n    const index = this.lookup.get(entity.id)\r\n    return index != undefined ? this.data[index] : undefined\r\n  }\r\n\r\n  hasId = (id: number): boolean => {\r\n    return this.lookup.has(id)\r\n  }\r\n\r\n  set = (entity: Entity, component: T): void => {\r\n    const index = this.lookup.get(entity.id)\r\n    if (index) {\r\n      this.data[index] = component\r\n      this.inverses[index] = entity.id\r\n      return\r\n    }\r\n    this.lookup.set(entity.id, this.data.length)\r\n    this.data.push(component)\r\n    this.inverses.push(entity.id)\r\n  }\r\n\r\n  clear = (): void => {\r\n    this.lookup = new Map()\r\n    this.data = []\r\n    this.inverses = []\r\n  }\r\n}\r\n\r\nexport class Entity {\r\n  constructor(public id: number, public ecs: ECS) { }\r\n\r\n  set = (...components: any): Entity => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      let storage = this.ecs.storages.get(Type)\r\n      if (!storage) {\r\n        storage = new Storage()\r\n        this.ecs.storages.set(Type, storage)\r\n      }\r\n      storage.set(this, component)\r\n    }\r\n    return this\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): Readonly<T> | undefined => {\r\n    const storage = this.ecs.storages.get(Type)\r\n    return storage ? storage.get(this) : undefined\r\n  }\r\n\r\n  update = <T>(Type: Component<T>, f: (_: T) => void): void => {\r\n    const storage = this.ecs.storages.get(Type)\r\n    if (!storage) return\r\n    const component = storage.get(this)\r\n    if (!component) return\r\n    f(component)\r\n  }\r\n}\r\n\r\nexport class ECS {\r\n  nextEntityId: number\r\n  storages: Map<Component<any>, Storage<any>>\r\n  resources: Map<Component<any>, any>\r\n\r\n  constructor() {\r\n    this.nextEntityId = 0\r\n    this.storages = new Map()\r\n    this.resources = new Map()\r\n  }\r\n\r\n  entity = (...components: any): Entity => {\r\n    const entity = new Entity(this.nextEntityId, this)\r\n    entity.set(...components)\r\n    ++this.nextEntityId\r\n    return entity\r\n  }\r\n\r\n  query = function* (...components: any): Generator<Entity> {\r\n    const primary = this.storages.get(components[0])\r\n    if (!primary) return\r\n    const secondary = components.slice(1).map(s => this.storages.get(s))\r\n    for (const id of primary.inverses) {\r\n      if (secondary.every(storage => storage.hasId(id))) {\r\n        yield new Entity(id, this)\r\n      }\r\n    }\r\n  }\r\n\r\n  set = <T>(...components: any): void => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      this.resources.set(Type, component)\r\n    }\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): T | undefined => {\r\n    return this.resources.get(Type)\r\n  }\r\n\r\n  unsetAll = <T>(Type: Component<T>): void => {\r\n    const storage = this.storages.get(Type)\r\n    if (!storage) return\r\n    storage.clear()\r\n  }\r\n}\r\n","import { Mat3 } from './linear_algebra'\r\nimport * as Studio from './studio'\r\nconst { ECS, Renderer } = Studio\r\nconst { UIRoot, Alignment, Transform } = Studio.components\r\nconst { text, column, row, container, scene, connection } = Studio.ui\r\nconst { render } = Studio.systems\r\n\r\nconst ecs = new ECS()\r\nconst renderer = new Renderer(window.innerWidth, window.innerHeight)\r\nrenderer.canvas.style.width = '100%'\r\nrenderer.canvas.style.height = '100%'\r\n\r\nconst sourceOut = container(ecs, { width: 18, height: 18, color: { h: 70, s: 1, l: 0.7, a: 1 } })\r\nconst source = container(ecs, { color: { h: 110, s: 1, l: 0.3, a: 1 }, padding: 10, x: 25, y: 200 },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Source\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            column(ecs, [\r\n                row(ecs, [\r\n                    container(ecs, { width: 18, height: 18, color: { h: 70, s: 1, l: 0.7, a: 1 } }),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 0\")),\r\n                ]),\r\n                row(ecs, [\r\n                    container(ecs, { width: 18, height: 18, color: { h: 70, s: 1, l: 0.7, a: 1 } }),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 1\")),\r\n                ]),\r\n            ]),\r\n            container(ecs, { width: 30 }),\r\n            column(ecs, { crossAxisAlignment: Alignment.END }, [\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 0\")),\r\n                    container(ecs, { width: 5 }),\r\n                    sourceOut\r\n                ]),\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 1\")),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { width: 18, height: 18, color: { h: 70, s: 1, l: 0.7, a: 1 } })\r\n                ]),\r\n            ])\r\n        ])\r\n    ])\r\n)\r\n\r\nconst transformIn = container(ecs, { width: 18, height: 18, color: { h: 170, s: 1, l: 0.7, a: 1 } })\r\nconst transformOut = container(ecs, { width: 18, height: 18, color: { h: 170, s: 1, l: 0.7, a: 1 } })\r\nconst transform = container(ecs, { color: { h: 210, s: 1, l: 0.3, a: 1 }, padding: 10, x: 300, y: 100 },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Transform\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            column(ecs, [\r\n                row(ecs, [\r\n                    transformIn,\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 0\")),\r\n                ]),\r\n                row(ecs, [\r\n                    container(ecs, { width: 18, height: 18, color: { h: 170, s: 1, l: 0.7, a: 1 } }),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 1\")),\r\n                ]),\r\n            ]),\r\n            container(ecs, { width: 30 }),\r\n            column(ecs, { crossAxisAlignment: Alignment.END }, [\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 0\")),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { width: 18, height: 18, color: { h: 170, s: 1, l: 0.7, a: 1 } })\r\n                ]),\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 1\")),\r\n                    container(ecs, { width: 5 }),\r\n                    transformOut\r\n                ]),\r\n            ])\r\n        ])\r\n    ])\r\n)\r\n\r\nconst sinkIn = container(ecs, { width: 18, height: 18, color: { h: 270, s: 1, l: 0.7, a: 1 } })\r\nconst sink = container(ecs, { color: { h: 310, s: 1, l: 0.3, a: 1 }, padding: 10, x: 550, y: 250 },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Sink\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            column(ecs, [\r\n                row(ecs, [\r\n                    container(ecs, { width: 18, height: 18, color: { h: 270, s: 1, l: 0.7, a: 1 } }),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 0\")),\r\n                ]),\r\n                row(ecs, [\r\n                    sinkIn,\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"in 1\")),\r\n                ]),\r\n            ]),\r\n            container(ecs, { width: 30 }),\r\n            column(ecs, { crossAxisAlignment: Alignment.END }, [\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 0\")),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { width: 18, height: 18, color: { h: 270, s: 1, l: 0.7, a: 1 } })\r\n                ]),\r\n                row(ecs, [\r\n                    container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, \"out 1\")),\r\n                    container(ecs, { width: 5 }),\r\n                    container(ecs, { width: 18, height: 18, color: { h: 270, s: 1, l: 0.7, a: 1 } })\r\n                ]),\r\n            ])\r\n        ])\r\n    ])\r\n)\r\n\r\nconst camera = ecs.entity(new Transform(Mat3.identity()),)\r\n\r\nconst root = scene(ecs, {\r\n    camera,\r\n    children: [source, transform, sink],\r\n    connections: [\r\n        connection(ecs, { from: sourceOut, to: transformIn }),\r\n        connection(ecs, { from: transformOut, to: sinkIn }),\r\n    ]\r\n})\r\n\r\necs.set(renderer, new UIRoot(root))\r\n\r\nrequestAnimationFrame(() => render(ecs))\r\n\r\nconst pointers: PointerEvent[] = []\r\nlet dragging = false\r\nlet pointerDistance = 0\r\n\r\ndocument.addEventListener('pointerdown', (e) => {\r\n    pointers.push(e)\r\n    if (pointers.length == 1) dragging = true\r\n})\r\n\r\ndocument.addEventListener('pointermove', (e) => {\r\n    pointers[pointers.findIndex(p => p.pointerId == e.pointerId)] = e\r\n    if (dragging && pointers.length == 1) {\r\n        camera.update(Transform, transform => {\r\n            const translate = Mat3.translation(-e.movementX, -e.movementY)\r\n            transform.matrix = transform.matrix.matMul(translate)\r\n        })\r\n        requestAnimationFrame(() => render(ecs))\r\n    } else if (pointers.length == 2) {\r\n        const [x1, y1] = [pointers[0].clientX, pointers[0].clientY]\r\n        const [x2, y2] = [pointers[1].clientX, pointers[1].clientY]\r\n        const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n        if (pointerDistance > 0) {\r\n            const move = Mat3.translation(e.clientX, e.clientY)\r\n            const zoom = Math.pow(2, (pointerDistance - distance) * 0.01)\r\n            const scale = Mat3.scaling(zoom, zoom)\r\n            const moveBack = Mat3.translation(-e.clientX, -e.clientY)\r\n            const result = move.matMul(scale).matMul(moveBack)\r\n            camera.update(Transform, transform =>\r\n                transform.matrix = transform.matrix.matMul(result)\r\n            )\r\n        }\r\n        pointerDistance = distance\r\n        requestAnimationFrame(() => render(ecs))\r\n    }\r\n})\r\ndocument.addEventListener('pointerup', (e) => {\r\n    pointers.splice(pointers.findIndex(p => p.pointerId == e.pointerId), 1)\r\n    if (pointers.length == 0) {\r\n        dragging = false\r\n        pointerDistance = 0\r\n    }\r\n})\r\n\r\nwindow.addEventListener('resize', () => {\r\n    renderer.setSize(renderer.canvas.clientWidth, renderer.canvas.clientHeight)\r\n    requestAnimationFrame(() => render(ecs))\r\n})\r\n\r\ndocument.body.appendChild(renderer.canvas)\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    renderer.canvas.requestFullscreen()\r\n})\r\n\r\n\r\ndocument.addEventListener('wheel', (e) => {\r\n    e.preventDefault()\r\n    camera.update(Transform, transform => {\r\n        const move = Mat3.translation(e.clientX, e.clientY)\r\n        const zoom = Math.pow(2, e.deltaY * 0.01)\r\n        const scale = Mat3.scaling(zoom, zoom)\r\n        const moveBack = Mat3.translation(-e.clientX, -e.clientY)\r\n        const result = move.matMul(scale).matMul(moveBack)\r\n        transform.matrix = transform.matrix.matMul(result)\r\n    })\r\n    requestAnimationFrame(() => render(ecs))\r\n}, { passive: false })\r\n\r\ndocument.addEventListener('keydown', (e) => e.preventDefault())"],"names":["$a26733d1baff63db$export$838423f3adec30fa","constructor","data","$a26733d1baff63db$export$83f4edd572c84121","matMul","other","a","this","b","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","vecMul","b1","b2","b3","inverse","idet","static","width","height","x","y","radians","c","Math","cos","s","sin","$621f3774f67738fc$var$DefaultProgram","gl","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","log","getShaderInfoLog","vertexArrayObject","createVertexArray","bindVertexArray","positionBuffer","createBuffer","bindAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","textureCoordinatesBuffer","colorBuffer","matrixIndexBuffer","vertexAttribIPointer","UNSIGNED_BYTE","indexBuffer","devicePixelRatioLocation","getUniformLocation","matricesLocation","texture","metrics","fontFamily","fontSize","metric","charCodeAt","$621f3774f67738fc$var$createFontMetrics","font","canvas","document","createElement","ctx","getContext","rows","sqrt","size","current","$621f3774f67738fc$var$nearestPowerOfTwo","cellSize","window","devicePixelRatio","style","scale","textAlign","textBaseline","fillStyle","chars","Array","from","length","v","i","map","String","fromCharCode","clearRect","measureText","ceil","floor","fillText","TEXTURE_2D","RGBA","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","touchAction","clearColor","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","depthMask","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","activeTexture","TEXTURE0","fontAtlasses","Map","textures","setSize","createTexture","bindTexture","texImage2D","Uint8Array","push","uniform2f","resolutionLocation","uniform1f","viewport","recreateFontAtlasses","COLOR_BUFFER_BIT","matrices","matrix","uniformMatrix3fv","vertices","colors","textureCoordinates","vertexIndices","cameraIndices","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","$b28c6149dbdf1c74$export$63548ce3f438e2c4","entity","$b28c6149dbdf1c74$export$5f1af8db9871e1d6","value","$b28c6149dbdf1c74$export$80f2abd03de5ca5a","$b28c6149dbdf1c74$export$cd0608c167c7849e","$b28c6149dbdf1c74$export$3edfc50f178e5b0b","$b28c6149dbdf1c74$export$dca3b0875bd9a954","entities","$b28c6149dbdf1c74$export$f3ea0776119f0e84","$b28c6149dbdf1c74$export$79f141de891a5fed","$b28c6149dbdf1c74$export$9d7927214ed7d2cf","Alignment1","$b28c6149dbdf1c74$export$66a3248d846611ce","alignment","$b28c6149dbdf1c74$export$8ee255758437644c","$b28c6149dbdf1c74$export$8954cfac7c08d16a","$b28c6149dbdf1c74$export$9db2ba50894db2b9","$b28c6149dbdf1c74$export$563a914cafbdc389","$b28c6149dbdf1c74$export$65cfd44a2050f99","$b28c6149dbdf1c74$export$678de176a9a9dea","$b28c6149dbdf1c74$export$d10b08d1cf690764","$b28c6149dbdf1c74$export$892596cec99bc70e","h","l","$b28c6149dbdf1c74$export$8ee6ea94b5aedb49","$b28c6149dbdf1c74$export$6e8e053b4dff75fa","minWidth","maxWidth","minHeight","maxHeight","$b28c6149dbdf1c74$export$cb6da89c6af1a8ec","$b28c6149dbdf1c74$export$8caee09accd95d7f","add","$b28c6149dbdf1c74$export$c84671f46d6a1ca","impl","layout","self","constraints","$b28c6149dbdf1c74$export$77f0fd777d3cc7db","$b28c6149dbdf1c74$export$92bffd8adab203ca","$b28c6149dbdf1c74$export$535dd6b7931a007","$b28c6149dbdf1c74$export$c537fa0d021d010b","$b28c6149dbdf1c74$export$fc4f2b7e7f87722c","$b28c6149dbdf1c74$export$39d3d935cf79db44","$b28c6149dbdf1c74$export$2db6c17465f94a2","geometry","parentOffset","layers","z","$9a7c059fd1344034$export$b3890eb0ae9dca99","ecs","begin","performance","now","$cb3d056828175573$export$b3219800bda33a1f","$90a5a29c0fcb75eb$export$42a7622cbf932bb","renderer","get","$621f3774f67738fc$export$88530751e3977073","projection","setMatrices","cameras","camera","clear","previousTexture","layer","draw","offset","index","$9a7c059fd1344034$var$renderTriangles","lines","drawLines","$9a7c059fd1344034$var$renderLines","ui","$3b19fb344542138e$export$89312ce47c0ca777","identity","activeCamera","pushAndSetActiveCamera","set","$2d5075f154be1094$var$layout","text1","atlas","fontAtlas","max","$2d5075f154be1094$var$textSize","$2d5075f154be1094$var$geometry","text2","indexOffset","indices","x0","x1","y0","y1","fill","$2d5075f154be1094$var$textGeometry","$2d5075f154be1094$export$6f093cfa640b7166","args","properties","color","$fd89ce3675dee463$var$layout","child","childSize","update","$fd89ce3675dee463$var$geometry","$fd89ce3675dee463$export$3481c78889e8fbe8","$518015a6e3cc694d$var$layout","children","START","CENTER","child1","childWidth","END","child2","$518015a6e3cc694d$var$geometry","$518015a6e3cc694d$export$4e0c71f277ca26b3","crossAxisAlignment","$9e4edab979495f0d$var$layout","childHeight","$9e4edab979495f0d$var$geometry","$9e4edab979495f0d$export$120ff0929b202a6d","$8a99d960732a172f$var$clamp","min","$8a99d960732a172f$var$layout","padding","offset1","$8a99d960732a172f$var$geometry","$8a99d960732a172f$export$34e0f9847d4c02dd","$5dee3d2e57488100$var$cubicBezier","ts","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","result","lastX","lastY","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$5dee3d2e57488100$export$42a7622cbf932bb","connections","start","stop","num","step","_","$5dee3d2e57488100$var$linspace","samples","$5dee3d2e57488100$export$412d2991813e589a","$864b15efd9f5e1a7$var$layout","$864b15efd9f5e1a7$var$geometry","$864b15efd9f5e1a7$export$33aff30b8aa0934e","$556f46b6ec271235$var$Storage","lookup","id","undefined","hasId","has","component","inverses","$556f46b6ec271235$export$bc644a473284d944","components","Type","storage","storages","f","$556f46b6ec271235$export$d01098d378880d3","nextEntityId","resources","query","primary","secondary","slice","every","unsetAll","ECS","$b4e14b6b8da86996$var$ECS","Renderer","$b4e14b6b8da86996$var$Renderer","$91ae824a8b26c87f$exports","UIRoot","$b4e14b6b8da86996$var$UIRoot","Alignment","$b4e14b6b8da86996$var$Alignment","Transform","$b4e14b6b8da86996$var$Transform","text","$b4e14b6b8da86996$var$text","column","$b4e14b6b8da86996$var$column","row","$b4e14b6b8da86996$var$row","container","$b4e14b6b8da86996$var$container","scene","$b4e14b6b8da86996$var$scene","connection","$b4e14b6b8da86996$var$connection","render","$b4e14b6b8da86996$var$render","systems","$b4e14b6b8da86996$var$ecs","$b4e14b6b8da86996$var$renderer","innerWidth","innerHeight","$b4e14b6b8da86996$var$sourceOut","$b4e14b6b8da86996$var$source","$b4e14b6b8da86996$var$transformIn","$b4e14b6b8da86996$var$transformOut","$b4e14b6b8da86996$var$transform","$b4e14b6b8da86996$var$sinkIn","$b4e14b6b8da86996$var$sink","$b4e14b6b8da86996$var$camera","$b4e14b6b8da86996$var$root","requestAnimationFrame","$b4e14b6b8da86996$var$pointers","$b4e14b6b8da86996$var$dragging","$b4e14b6b8da86996$var$pointerDistance","addEventListener","e","findIndex","p","pointerId","transform1","translate","translation","movementX","movementY","clientX","clientY","x2","y2","distance","pow","move","zoom","scaling","moveBack","transform2","splice","clientWidth","clientHeight","body","appendChild","requestFullscreen","preventDefault","transform3","deltaY","passive"],"version":3,"file":"index.a3f8458f.js.map"}