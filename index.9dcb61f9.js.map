{"mappings":"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","sources":["src/alignment.ts","src/fuzzy_find.ts","src/linear_algebra/matrix3x3.ts","src/linear_algebra/vector3.ts","src/event.ts","src/padding.ts","src/renderer/pointer_down.ts","src/renderer/batch_geometry.ts","src/camera_stack.ts","src/reduce.ts","src/renderer/id_to_world_space.ts","src/renderer/connection_geometry.ts","src/renderer/render.ts","src/renderer/webgl2.ts","src/run.ts","src/ui/column.ts","src/ui/container.ts","src/ui/row.ts","src/ui/scene.ts","src/ui/stack.ts","src/ui/text.ts","src/index.ts"],"sourcesContent":["export enum MainAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END,\r\n    SPACE_EVENLY,\r\n    SPACE_BETWEEN\r\n}\r\n\r\nexport enum CrossAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END\r\n}","export interface FuzzyFind {\r\n    haystack: string\r\n    needle: string\r\n}\r\n\r\nexport const fuzzyFind = ({ haystack, needle }: FuzzyFind): boolean => {\r\n    let haystackIndex = 0\r\n    let needleIndex = 0\r\n    while (needleIndex < needle.length) {\r\n        const n = needle[needleIndex].toLowerCase()\r\n        while (haystackIndex < haystack.length && n !== haystack[haystackIndex].toLowerCase()) {\r\n            ++haystackIndex\r\n        }\r\n        if (haystackIndex === haystack.length) return false\r\n        ++needleIndex\r\n    }\r\n    return true\r\n}\r\n","import { Size } from \"../layout\"\r\nimport { Vector3 } from \"./vector3\"\r\n\r\nexport type Matrix3x3 = number[]\r\n\r\nexport const identity = (): Matrix3x3 => [\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n]\r\n\r\nexport const projection = ({ width, height }: Size): Matrix3x3 => [\r\n    2 / width, 0, -1,\r\n    0, -2 / height, 1,\r\n    0, 0, 1\r\n]\r\n\r\nexport const translate = (x: number, y: number): Matrix3x3 => [\r\n    1, 0, x,\r\n    0, 1, y,\r\n    0, 0, 1\r\n]\r\n\r\nexport const scale = (x: number, y: number): Matrix3x3 => [\r\n    x, 0, 0,\r\n    0, y, 0,\r\n    0, 0, 1\r\n]\r\n\r\nexport const rotate = (radians: number): Matrix3x3 => {\r\n    const c = Math.cos(radians)\r\n    const s = Math.sin(radians)\r\n    return [\r\n        c, s, 0,\r\n        -s, c, 0,\r\n        0, 0, 1\r\n    ]\r\n}\r\n\r\nexport const multiplyMatrices = (...matrices: Matrix3x3[]) => {\r\n    const [head, ...tail] = matrices\r\n    return tail.reduce((a, b) => {\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return [\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ]\r\n    }, head)\r\n}\r\n\r\nexport const multiplyMatrixVector = (a: Matrix3x3, b: Vector3): Vector3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b1 = b[0]\r\n    const b2 = b[1]\r\n    const b3 = b[2]\r\n    const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n    const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n    const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n    return [c1, c2, c3]\r\n}\r\n\r\nexport const inverse = (a: Matrix3x3): Matrix3x3 => {\r\n    const a11 = a[0]\r\n    const a12 = a[1]\r\n    const a13 = a[2]\r\n    const a21 = a[3]\r\n    const a22 = a[4]\r\n    const a23 = a[5]\r\n    const a31 = a[6]\r\n    const a32 = a[7]\r\n    const a33 = a[8]\r\n    const b11 = a22 * a33 - a23 * a32\r\n    const b12 = a21 * a33 - a23 * a31\r\n    const b13 = a21 * a32 - a22 * a31\r\n    const b21 = a12 * a33 - a13 * a32\r\n    const b22 = a11 * a33 - a13 * a31\r\n    const b23 = a11 * a32 - a12 * a31\r\n    const b31 = a12 * a23 - a13 * a22\r\n    const b32 = a11 * a23 - a13 * a21\r\n    const b33 = a11 * a22 - a12 * a21\r\n    const det = a31 * b31 - a32 * b32 + a33 * b33\r\n    const idet = 1 / det\r\n    return [\r\n        idet * b11, idet * -b21, idet * b31,\r\n        idet * -b12, idet * b22, idet * -b32,\r\n        idet * b13, idet * -b23, idet * b33\r\n    ]\r\n}","export type Vector3 = number[]\r\n\r\nexport const length = ([a, b, c]: Vector3) =>\r\n    Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))","import { fuzzyFind } from \"./fuzzy_find\"\r\nimport { multiplyMatrices, multiplyMatrixVector, scale, translate } from \"./linear_algebra/matrix3x3\"\r\nimport { length } from \"./linear_algebra/vector3\"\r\nimport { UpdateResult } from \"./run\"\r\nimport { InputPath, OutputPath, State } from \"./state\"\r\nimport { Pointer } from \"./ui\"\r\n\r\nexport enum EventKind {\r\n    POINTER_MOVE,\r\n    POINTER_DOWN,\r\n    POINTER_UP,\r\n    CLICKED_NODE,\r\n    WHEEL,\r\n    CLICKED_INPUT,\r\n    CLICKED_OUTPUT,\r\n    DOUBLE_CLICK_TIMEOUT,\r\n    DOUBLE_CLICK,\r\n    KEYDOWN,\r\n    VIRTUAL_KEYDOWN,\r\n    CLICKED_FINDER_OPTION\r\n}\r\n\r\nexport interface PointerMove {\r\n    kind: EventKind.POINTER_MOVE\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerDown {\r\n    kind: EventKind.POINTER_DOWN\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerUp {\r\n    kind: EventKind.POINTER_UP\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface ClickedNode {\r\n    kind: EventKind.CLICKED_NODE\r\n    index: number\r\n}\r\n\r\nexport interface Wheel {\r\n    kind: EventKind.WHEEL\r\n    x: number\r\n    y: number\r\n    deltaY: number\r\n}\r\n\r\nexport interface ClickedInput {\r\n    kind: EventKind.CLICKED_INPUT\r\n    inputPath: InputPath\r\n}\r\n\r\nexport interface ClickedOutput {\r\n    kind: EventKind.CLICKED_OUTPUT\r\n    outputPath: OutputPath\r\n}\r\n\r\nexport interface DoubleClickTimeout {\r\n    kind: EventKind.DOUBLE_CLICK_TIMEOUT\r\n}\r\n\r\nexport interface DoubleClick {\r\n    kind: EventKind.DOUBLE_CLICK\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface KeyDown {\r\n    kind: EventKind.KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport interface VirtualKeyDown {\r\n    kind: EventKind.VIRTUAL_KEYDOWN\r\n    key: string\r\n}\r\n\r\nexport interface ClickedFinderOption {\r\n    kind: EventKind.CLICKED_FINDER_OPTION,\r\n    option: string\r\n}\r\n\r\nexport type Event =\r\n    | PointerMove\r\n    | PointerDown\r\n    | PointerUp\r\n    | ClickedNode\r\n    | Wheel\r\n    | ClickedInput\r\n    | ClickedOutput\r\n    | DoubleClickTimeout\r\n    | DoubleClick\r\n    | KeyDown\r\n    | VirtualKeyDown\r\n    | ClickedFinderOption\r\n\r\n\r\nconst pointerDown = (state: State, event: PointerDown): UpdateResult<State, Event> => {\r\n    if (state.finder.show) return { state }\r\n    state.pointers.push(event.pointer)\r\n    if (state.pointers.length > 1) {\r\n        state.potentialDoubleClick = false\r\n        state.dragging = false\r\n        state.zooming = state.pointers.length === 2\r\n        return { state }\r\n    }\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n        return {\r\n            state,\r\n            dispatch: [{ kind: EventKind.DOUBLE_CLICK, pointer: event.pointer }]\r\n        }\r\n    }\r\n    state.dragging = true\r\n    state.potentialDoubleClick = true\r\n    return {\r\n        state,\r\n        schedule: [\r\n            { after: { milliseconds: 300 }, event: { kind: EventKind.DOUBLE_CLICK_TIMEOUT } }\r\n        ]\r\n    }\r\n}\r\n\r\nconst pointerUp = (state: State, event: PointerUp) => {\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    state.pointers.splice(index, 1)\r\n    if (state.pointers.length === 1) {\r\n        state.zooming = false\r\n        state.dragging = true\r\n        state.pointerDistance = 0\r\n    }\r\n    else if (state.pointers.length === 0) {\r\n        state.dragging = false\r\n        state.draggedNode = null\r\n        state.pointerDistance = 0\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst pointerMove = (state: State, event: PointerMove) => {\r\n    if (!state.dragging && !state.zooming) {\r\n        if (!state.finder.show) {\r\n            state.nodePlacementLocation = { x: event.pointer.x, y: event.pointer.y }\r\n        }\r\n        return { state, rerender: false }\r\n    }\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    const pointer = state.pointers[index]\r\n    state.pointers[index] = event.pointer\r\n    if (state.dragging) {\r\n        const dx = event.pointer.x - pointer.x\r\n        const dy = event.pointer.y - pointer.y\r\n        if (state.draggedNode !== null) {\r\n            const scaling = length(multiplyMatrixVector(state.camera, [0, 1, 0]))\r\n            const node = state.graph.nodes[state.draggedNode]\r\n            node.x += dx * scaling\r\n            node.y += dy * scaling\r\n        } else {\r\n            state.camera = multiplyMatrices(state.camera, translate(-dx, -dy))\r\n        }\r\n        return { state, render: true }\r\n    }\r\n    if (state.zooming) {\r\n        const [p0, p1] = [state.pointers[0], state.pointers[1]]\r\n        const [x1, y1] = [p0.x, p0.y]\r\n        const [x2, y2] = [p1.x, p1.y]\r\n        const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n        const previousDistance = state.pointerDistance\r\n        const previousCenter = state.pointerCenter\r\n        state.pointerDistance = distance\r\n        const x = (p0.x + p1.x) / 2\r\n        const y = (p0.y + p1.y) / 2\r\n        state.pointerCenter = [x, y]\r\n        if (previousDistance > 0) {\r\n            const move = translate(x, y)\r\n            const zoom = Math.pow(2, (previousDistance - distance) * 0.01)\r\n            const moveBack = translate(-x, -y)\r\n            const dx = x - previousCenter[0]\r\n            const dy = y - previousCenter[1]\r\n            state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack, translate(-dx, -dy))\r\n            return { state, render: true }\r\n        } else return { state }\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst clickedNode = (state: State, event: ClickedNode) => {\r\n    state.draggedNode = event.index\r\n    return { state, render: true }\r\n}\r\n\r\nconst wheel = (state: State, event: Wheel) => {\r\n    const move = translate(event.x, event.y)\r\n    const zoom = Math.pow(2, event.deltaY * 0.01)\r\n    const moveBack = translate(-event.x, -event.y)\r\n    state.camera = multiplyMatrices(state.camera, move, scale(zoom, zoom), moveBack)\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedInput = (state: State, event: ClickedInput) => {\r\n    state.draggedNode = event.inputPath.nodeIndex\r\n    if (state.selectedOutput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: event.inputPath,\r\n            output: state.selectedOutput\r\n        })\r\n        {\r\n            const { nodeIndex, outputIndex } = state.selectedOutput\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n            output.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, inputIndex } = event.inputPath\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedOutput = null\r\n        state.draggedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedInput) {\r\n        const { nodeIndex, inputIndex } = state.selectedInput\r\n        state.graph.nodes[nodeIndex].inputs[inputIndex].selected = false\r\n    }\r\n    const { nodeIndex, inputIndex } = event.inputPath\r\n    state.graph.nodes[nodeIndex].inputs[inputIndex].selected = true\r\n    state.selectedInput = event.inputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst clickedOutput = (state: State, event: ClickedOutput) => {\r\n    state.draggedNode = event.outputPath.nodeIndex\r\n    if (state.selectedInput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: state.selectedInput,\r\n            output: event.outputPath\r\n        })\r\n        {\r\n            const { nodeIndex, inputIndex } = state.selectedInput\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n            input.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, outputIndex } = event.outputPath\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedInput = null\r\n        state.draggedNode = null\r\n        return { state, render: true }\r\n    }\r\n    if (state.selectedOutput) {\r\n        const { nodeIndex, outputIndex } = state.selectedOutput\r\n        state.graph.nodes[nodeIndex].outputs[outputIndex].selected = false\r\n    }\r\n    const { nodeIndex, outputIndex } = event.outputPath\r\n    state.graph.nodes[nodeIndex].outputs[outputIndex].selected = true\r\n    state.selectedOutput = event.outputPath\r\n    return { state, render: true }\r\n}\r\n\r\nconst doubleClickTimeout = (state: State, _: DoubleClickTimeout) => {\r\n    if (state.potentialDoubleClick) {\r\n        state.potentialDoubleClick = false\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst updateFinderOptions = (state: State): State => {\r\n    state.finder.options = Object.keys(state.operations)\r\n        .filter(item => fuzzyFind({ haystack: item, needle: state.finder.search }))\r\n    return state\r\n}\r\n\r\nconst doubleClick = (state: State, { pointer }: DoubleClick) => {\r\n    state.potentialDoubleClick = false\r\n    state.finder.show = true\r\n    state.nodePlacementLocation = { x: pointer.x, y: pointer.y }\r\n    return { state: updateFinderOptions(state), render: true }\r\n}\r\n\r\nconst closeFinder = (state: State) => {\r\n    state.finder.show = false\r\n    state.finder.search = ''\r\n    return state\r\n}\r\n\r\nconst insertOperationFromFinder = (state: State, name: string): State => {\r\n    state = closeFinder(state)\r\n    const operation = state.operations[name]\r\n    const [x, y, _] = multiplyMatrixVector(state.camera, [state.nodePlacementLocation.x, state.nodePlacementLocation.y, 1])\r\n    state.graph.nodes.push({\r\n        name,\r\n        inputs: operation.inputs.map(input => ({\r\n            name: input,\r\n            selected: false,\r\n            edgeIndices: []\r\n        })),\r\n        outputs: operation.outputs.map(output => ({\r\n            name: output,\r\n            selected: false,\r\n            edgeIndices: []\r\n        })),\r\n        x,\r\n        y\r\n    })\r\n    return state\r\n}\r\n\r\nconst keyDown = (state: State, { key }: KeyDown) => {\r\n    if (state.finder.show) {\r\n        switch (key) {\r\n            case 'Backspace':\r\n                state.finder.search = state.finder.search.slice(0, -1)\r\n                break\r\n            case 'Shift':\r\n            case 'Alt':\r\n            case 'Control':\r\n            case 'Meta':\r\n            case 'Tab':\r\n                break\r\n            case 'Enter':\r\n                if (state.finder.options.length > 0) {\r\n                    const name = state.finder.options[0]\r\n                    state = insertOperationFromFinder(state, name)\r\n                } else {\r\n                    state = closeFinder(state)\r\n                }\r\n                break\r\n            case 'Escape':\r\n                state = closeFinder(state)\r\n                break\r\n            default:\r\n                state.finder.search += key\r\n                break\r\n        }\r\n        return { state: updateFinderOptions(state), render: true }\r\n    }\r\n    if (key == 'f') {\r\n        state.finder.show = true\r\n        return { state: updateFinderOptions(state), render: true }\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst virtualKeyDown = (state: State, { key }: VirtualKeyDown) => {\r\n    if (state.finder.show) {\r\n        switch (key) {\r\n            case 'del':\r\n                state.finder.search = state.finder.search.slice(0, -1)\r\n                break\r\n            case 'sft':\r\n                break\r\n            case 'space':\r\n                state.finder.search += ' '\r\n                break\r\n            case 'ret':\r\n                if (state.finder.options.length > 0) {\r\n                    const name = state.finder.options[0]\r\n                    state = insertOperationFromFinder(state, name)\r\n                } else {\r\n                    state = closeFinder(state)\r\n                }\r\n                break\r\n            default:\r\n                state.finder.search += key\r\n                break\r\n        }\r\n        return { state: updateFinderOptions(state), render: true }\r\n    }\r\n    return { state }\r\n}\r\n\r\nconst clickedFinderOption = (state: State, { option }: ClickedFinderOption) => ({\r\n    state: insertOperationFromFinder(state, option),\r\n    render: true\r\n})\r\n\r\nexport const update = (state: State, event: Event): UpdateResult<State, Event> => {\r\n    switch (event.kind) {\r\n        case EventKind.POINTER_DOWN: return pointerDown(state, event)\r\n        case EventKind.POINTER_UP: return pointerUp(state, event)\r\n        case EventKind.POINTER_MOVE: return pointerMove(state, event)\r\n        case EventKind.CLICKED_NODE: return clickedNode(state, event)\r\n        case EventKind.WHEEL: return wheel(state, event)\r\n        case EventKind.CLICKED_INPUT: return clickedInput(state, event)\r\n        case EventKind.CLICKED_OUTPUT: return clickedOutput(state, event)\r\n        case EventKind.DOUBLE_CLICK_TIMEOUT: return doubleClickTimeout(state, event)\r\n        case EventKind.DOUBLE_CLICK: return doubleClick(state, event)\r\n        case EventKind.KEYDOWN: return keyDown(state, event)\r\n        case EventKind.VIRTUAL_KEYDOWN: return virtualKeyDown(state, event)\r\n        case EventKind.CLICKED_FINDER_OPTION: return clickedFinderOption(state, event)\r\n    }\r\n}\r\n","export class Padding {\r\n    constructor(\r\n        readonly top: number,\r\n        readonly right: number,\r\n        readonly bottom: number,\r\n        readonly left: number\r\n    ) { }\r\n}\r\n\r\nexport const padding = (value: number) =>\r\n    new Padding(value, value, value, value)","import { Renderer } from \".\"\r\nimport { WorldSpace } from \"../geometry\"\r\nimport { Pointer } from \"../ui\"\r\n\r\nconst inWorldSpace = ({ x0, y0, x1, y1 }: WorldSpace, pointer: Pointer) =>\r\n    x0 <= pointer.x && pointer.x <= x1 &&\r\n    y0 <= pointer.y && pointer.y <= y1\r\n\r\nexport const pointerDown = <R extends Renderer>(renderer: R, pointer: Pointer): R => {\r\n    for (let i = renderer.clickHandlers.length; i > 0; --i) {\r\n        for (const { onClick, worldSpace } of renderer.clickHandlers[i - 1]) {\r\n            if (inWorldSpace(worldSpace, pointer)) {\r\n                onClick(pointer)\r\n                return renderer\r\n            }\r\n        }\r\n    }\r\n    return renderer\r\n}\r\n","import { Layers } from \"./render\"\r\n\r\nexport interface Batch {\r\n    vertices: number[]\r\n    vertexIndices: number[]\r\n    colors: number[]\r\n    textureIndex: number\r\n    textureCoordinates: number[]\r\n    cameraIndex: number[]\r\n}\r\n\r\nconst newBatch = (textureIndex: number): Batch => ({\r\n    vertices: [],\r\n    colors: [],\r\n    vertexIndices: [],\r\n    textureIndex,\r\n    textureCoordinates: [],\r\n    cameraIndex: []\r\n})\r\n\r\nexport const batchGeometry = (layers: Layers): Batch[] => {\r\n    const batches: Batch[] = []\r\n    let batch = newBatch(0)\r\n    for (const layer of layers) {\r\n        for (const [textureIndex, geometries] of layer) {\r\n            if (batch.textureIndex !== textureIndex) {\r\n                if (batch.vertices.length !== 0) batches.push(batch)\r\n                batch = newBatch(textureIndex)\r\n            }\r\n            for (const geometry of geometries) {\r\n                const offset = batch.vertices.length / 2\r\n                batch.vertices.push(...geometry.vertices)\r\n                batch.colors.push(...geometry.colors)\r\n                for (const index of geometry.vertexIndices) {\r\n                    batch.vertexIndices.push(index + offset)\r\n                }\r\n                batch.textureCoordinates.push(...geometry.textureCoordinates)\r\n                batch.cameraIndex.push(...geometry.cameraIndex)\r\n            }\r\n        }\r\n    }\r\n    if (batch.vertices.length !== 0) batches.push(batch)\r\n    return batches\r\n}","import { WorldSpace } from \"./geometry\"\r\nimport { identity, inverse, Matrix3x3, multiplyMatrixVector } from \"./linear_algebra/matrix3x3\"\r\nimport { Cameras } from \"./renderer/render\"\r\n\r\nexport type CameraIndex = number\r\n\r\nexport class CameraStack {\r\n    cameras: Cameras\r\n    stack: number[]\r\n    transform: Matrix3x3\r\n\r\n    constructor() {\r\n        const camera = identity()\r\n        this.cameras = [identity()]\r\n        this.stack = [0]\r\n        this.transform = inverse(camera)\r\n    }\r\n\r\n    pushCamera = (camera: Matrix3x3) => {\r\n        const index = this.cameras.length\r\n        this.cameras.push(camera)\r\n        this.stack.push(index)\r\n        this.transform = inverse(camera)\r\n    }\r\n\r\n    popCamera = () => {\r\n        this.stack.pop()\r\n        this.transform = inverse(this.cameras[this.activeCamera()])\r\n    }\r\n\r\n    activeCamera = () => this.stack.slice(-1)[0]\r\n\r\n    transformWorldSpace = (worldSpace: WorldSpace): WorldSpace => {\r\n        const [x0, y0, _0] = multiplyMatrixVector(this.transform, [worldSpace.x0, worldSpace.y0, 1])\r\n        const [x1, y1, _1] = multiplyMatrixVector(this.transform, [worldSpace.x1, worldSpace.y1, 1])\r\n        return { x0, y0, x1, y1 }\r\n    }\r\n}\r\n","import { Geometry } from \"./geometry\";\r\nimport { Layout } from \"./layout\";\r\nimport { Entry, UI } from \"./ui\";\r\n\r\nexport interface Reducer<T> {\r\n    initial: () => T\r\n    combine: (accumulator: T, entry: Entry) => T\r\n}\r\n\r\nexport const reduce = <T>(ui: UI, layout: Layout, geometry: Geometry, reducer: Reducer<T>): T => {\r\n    const accumulator = reducer.initial()\r\n    for (const entry of ui.traverse(layout, geometry, 0)) {\r\n        reducer.combine(accumulator, entry)\r\n    }\r\n    return accumulator\r\n}","import { WorldSpace } from \"../geometry\"\r\nimport { Reducer } from \"../reduce\"\r\nimport { Entry } from \"../ui\"\r\n\r\nexport type IdToWorldSpace = { [id: string]: WorldSpace }\r\n\r\nexport const buildIdToWorldSpace: Reducer<IdToWorldSpace> = {\r\n    initial: () => ({}),\r\n    combine: (lookup: IdToWorldSpace, entry: Entry) => {\r\n        if (!entry.ui.id) return lookup\r\n        lookup[entry.ui.id] = entry.geometry.worldSpace\r\n        return lookup\r\n    }\r\n}\r\n","import { WorldSpace } from \"../geometry\"\r\nimport { Connection } from \"../ui\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\n\r\nexport interface Lines {\r\n    vertices: number[]\r\n    colors: number[]\r\n}\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nfunction* cubicBezier(ts: number[], from: WorldSpace, to: WorldSpace): Generator<number> {\r\n    const p0x = (from.x0 + from.x1) / 2\r\n    const p0y = (from.y0 + from.y1) / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = (to.x0 + to.x1) / 2\r\n    const p3y = (to.y0 + to.y1) / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    let lastX = 0\r\n    let lastY = 0\r\n    let first = true\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (first) {\r\n            yield x\r\n            yield y\r\n            first = false\r\n        } else {\r\n            yield lastX\r\n            yield lastY\r\n        }\r\n        yield x\r\n        yield y\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n}\r\n\r\nexport const connectionGeometry = (connections: Connection[], idToWorldSpace: IdToWorldSpace): Lines => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const vertices: number[] = []\r\n    const colors: number[] = []\r\n    for (const { from, to, color } of connections) {\r\n        for (const p of cubicBezier(ts, idToWorldSpace[from], idToWorldSpace[to])) {\r\n            vertices.push(p)\r\n        }\r\n        const { red, green, blue, alpha } = color\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(red, green, blue, alpha)\r\n    }\r\n    return { vertices, colors }\r\n}","import { ClickHandlers, Renderer } from \".\"\r\nimport { batchGeometry } from \"./batch_geometry\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry } from \"../geometry\"\r\nimport { reduce, Reducer } from \"../reduce\"\r\nimport { Connection, Entry, UI } from \"../ui\"\r\nimport { buildIdToWorldSpace, IdToWorldSpace } from \"./id_to_world_space\"\r\nimport { connectionGeometry } from \"./connection_geometry\"\r\nimport { Matrix3x3 } from \"../linear_algebra/matrix3x3\"\r\n\r\nexport type Cameras = Matrix3x3[]\r\nexport type TextureIndex = number\r\nexport type Layer = Map<TextureIndex, Geometry[]>\r\nexport type Layers = Layer[]\r\n\r\ninterface Accumulator {\r\n    layers: Layers,\r\n    clickHandlers: ClickHandlers,\r\n    idToWorldSpace: IdToWorldSpace\r\n    connections: Connection[]\r\n}\r\n\r\nexport const layerGeometry: Reducer<Layers> = {\r\n    initial: () => [],\r\n    combine: (layers: Layers, entry: Entry) => {\r\n        if (entry.geometry.vertices.length == 0) return layers\r\n        const needed = entry.z - layers.length + 1\r\n        for (let i = 0; i < needed; ++i) layers.push(new Map())\r\n        const layer = layers[entry.z]\r\n        const geometry = (() => {\r\n            const geometry = layer.get(entry.geometry.textureIndex)\r\n            if (geometry) return geometry\r\n            const newGeometry: Geometry[] = []\r\n            layer.set(entry.geometry.textureIndex, newGeometry)\r\n            return newGeometry\r\n        })()\r\n        geometry.push(entry.geometry)\r\n        return layers\r\n    }\r\n}\r\n\r\nexport const gatherOnClickHandlers: Reducer<ClickHandlers> = {\r\n    initial: () => [],\r\n    combine: (handlers: ClickHandlers, entry: Entry) => {\r\n        if (!entry.ui.onClick) return handlers\r\n        const needed = entry.z - handlers.length + 1\r\n        for (let i = 0; i < needed; ++i) handlers.push([])\r\n        handlers[entry.z].push({\r\n            onClick: entry.ui.onClick,\r\n            worldSpace: entry.geometry.worldSpace\r\n        })\r\n        return handlers\r\n    }\r\n}\r\n\r\n\r\nexport const gatherConnections: Reducer<Connection[]> = {\r\n    initial: () => [],\r\n    combine: (connections: Connection[], entry: Entry) => {\r\n        if (!entry.ui.connections) return connections\r\n        connections.push(...entry.ui.connections)\r\n        return connections\r\n    }\r\n}\r\n\r\n\r\nexport const reducer: Reducer<Accumulator> = {\r\n    initial: () => ({\r\n        layers: layerGeometry.initial(),\r\n        clickHandlers: gatherOnClickHandlers.initial(),\r\n        idToWorldSpace: buildIdToWorldSpace.initial(),\r\n        connections: gatherConnections.initial()\r\n    }),\r\n    combine: (acc: Accumulator, entry: Entry) => {\r\n        return {\r\n            layers: layerGeometry.combine(acc.layers, entry),\r\n            clickHandlers: gatherOnClickHandlers.combine(acc.clickHandlers, entry),\r\n            idToWorldSpace: buildIdToWorldSpace.combine(acc.idToWorldSpace, entry),\r\n            connections: gatherConnections.combine(acc.connections, entry)\r\n        }\r\n    }\r\n}\r\n\r\nexport const render = <R extends Renderer>(renderer: R, ui: UI): R => {\r\n    const { width, height } = renderer.size\r\n    renderer.clear()\r\n    const constraints = {\r\n        minWidth: 0,\r\n        maxWidth: width,\r\n        minHeight: 0,\r\n        maxHeight: height\r\n    }\r\n    const layout = ui.layout(constraints, renderer.measureText)\r\n    const offsets = { x: 0, y: 0 }\r\n    const cameraStack = new CameraStack()\r\n    const geometry = ui.geometry(layout, offsets, cameraStack)\r\n    const { layers, clickHandlers, connections, idToWorldSpace } = reduce(ui, layout, geometry, reducer)\r\n    const batches = batchGeometry(layers)\r\n    const lines = connectionGeometry(connections, idToWorldSpace)\r\n    renderer.cameras = cameraStack.cameras\r\n    renderer.clickHandlers = clickHandlers\r\n    for (const batch of batches) renderer.draw(batch)\r\n    if (lines.vertices.length) renderer.drawLines(lines)\r\n    return renderer\r\n}\r\n","import { ClickHandlers } from \".\";\r\nimport { Batch } from \"./batch_geometry\";\r\nimport { Size } from \"../layout\";\r\nimport { Font, TextMeasurements } from \"../ui\";\r\nimport { Lines } from \"./connection_geometry\";\r\nimport { Matrix3x3, projection } from \"../linear_algebra/matrix3x3\";\r\nimport { Document, WebGL2Context, Buffer, UniformLocation, Shader, Program, Canvas, Texture, Window } from \"./dom\";\r\n\r\ninterface Attribute {\r\n    location: number\r\n    buffer: Buffer\r\n}\r\n\r\ninterface Attributes {\r\n    vertices: Attribute\r\n    vertexIndices: Buffer\r\n    colors: Attribute\r\n    textureCoordinates: Attribute\r\n    cameraIndex: Attribute\r\n}\r\n\r\ninterface Uniforms {\r\n    projection: UniformLocation\r\n    texture: UniformLocation\r\n    cameras: UniformLocation\r\n}\r\n\r\ninterface ProgramData {\r\n    vertexShader: Shader\r\n    fragmentShader: Shader\r\n    program: Program\r\n    attributes: Attributes\r\n    uniforms: Uniforms\r\n}\r\n\r\ntype DevicePixelRatio = number\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\nconst createTextMeasurements = (document: Document, gl: WebGL2Context, font: Font, dpr: DevicePixelRatio) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(font.size * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * dpr\r\n    canvas.height = size * dpr\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(dpr, dpr)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = `${font.size}px ${font.family}`\r\n    ctx.fillStyle = 'white'\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const height = font.size\r\n    const widths: number[] = []\r\n    const textureCoordinates: number[][] = []\r\n    for (let i = 0; i < totalCells; ++i) {\r\n        const c = String.fromCharCode(i)\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        widths.push(width)\r\n        const x0 = x / size\r\n        const x1 = (x + width) / size\r\n        const y0 = y / size\r\n        const y1 = (y + height) / size\r\n        textureCoordinates.push([\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        ])\r\n    }\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas\r\n    )\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return { widths, textureCoordinates, texture }\r\n}\r\n\r\nconst mapString = <T>(str: string, f: (c: string, i: number) => T): Array<T> => {\r\n    let result = []\r\n    for (let i = 0; i < str.length; ++i) {\r\n        result.push(f(str[i], i))\r\n    }\r\n    return result\r\n}\r\n\r\nexport class WebGL2Renderer {\r\n    _size: Size\r\n    _cameras: Matrix3x3[]\r\n\r\n    constructor(\r\n        public window: Window,\r\n        public document: Document,\r\n        public canvas: Canvas,\r\n        public gl: WebGL2Context,\r\n        public program: ProgramData,\r\n        public textures: Texture[],\r\n        public textMeasurementsCache: Map<string, TextMeasurements>,\r\n        public clickHandlers: ClickHandlers,\r\n    ) { }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    set size(size: Size) {\r\n        const { gl, program, window } = this\r\n        const { uniforms } = program\r\n        const { canvas } = gl\r\n        gl.uniformMatrix3fv(uniforms.projection, /*transpose*/true, projection(size))\r\n        canvas.width = size.width * window.devicePixelRatio\r\n        canvas.height = size.height * window.devicePixelRatio\r\n        canvas.style.width = `${size.width}px`\r\n        canvas.style.height = `${size.height}px`\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this._size = size\r\n    }\r\n\r\n    get size() { return this._size }\r\n\r\n    set cameras(cameras: Matrix3x3[]) {\r\n        const { gl, program } = this\r\n        const { uniforms } = program\r\n        const data: number[] = []\r\n        for (const camera of cameras) data.push(...camera)\r\n        gl.uniformMatrix3fv(uniforms.cameras, /*transpose*/true, data)\r\n        this._cameras = cameras\r\n    }\r\n\r\n    get cameras() { return this._cameras }\r\n\r\n    draw = ({ vertices, colors, vertexIndices, textureCoordinates, textureIndex, cameraIndex }: Batch) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        const texture = textures[textureIndex]\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndex), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.vertexIndices)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors }: Lines) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        const texture = textures[0]\r\n        const count = vertices.length / 2\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(Array(count * 2).fill(0)), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(Array(count).fill(0)), gl.STATIC_DRAW)\r\n        gl.drawArrays(gl.LINES, /*first*/0, count)\r\n    }\r\n\r\n    getTextureMeasurements = (font: Font, dpr: DevicePixelRatio) => {\r\n        const { document, gl } = this\r\n        const key = `${dpr} ${font.size} ${font.family}`\r\n        const measurements = this.textMeasurementsCache.get(key)\r\n        if (measurements) return measurements\r\n        const { texture, widths, textureCoordinates } = createTextMeasurements(document, gl, font, dpr)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newMeasurements = { widths, textureIndex, textureCoordinates }\r\n        this.textMeasurementsCache.set(key, newMeasurements)\r\n        return newMeasurements\r\n    }\r\n\r\n    measureText = (font: Font, str: string) => {\r\n        const { window } = this\r\n        const dpr = window.devicePixelRatio\r\n        const { widths, textureIndex, textureCoordinates } = this.getTextureMeasurements(font, dpr)\r\n        const indices = mapString(str, c => c.charCodeAt(0))\r\n        return {\r\n            widths: indices.map(i => widths[i]),\r\n            textureIndex,\r\n            textureCoordinates: indices.map(i => textureCoordinates[i]),\r\n        }\r\n    }\r\n}\r\n\r\nconst createVertexShader = (gl: WebGL2Context, attributes: Attributes): Shader => {\r\n    const { vertices, colors, textureCoordinates, cameraIndex } = attributes\r\n    const vertexShaderSource = `#version 300 es\r\n  uniform mat3 u_projection;\r\n  uniform mat3 u_cameras[8];\r\n\r\n  layout(location = ${vertices.location}) in vec2 a_vertex;\r\n  layout(location = ${colors.location}) in vec4 a_color;\r\n  layout(location = ${textureCoordinates.location}) in vec2 a_textureCoordinates;\r\n  layout(location = ${cameraIndex.location}) in uint a_cameraIndex;\r\n\r\n  out vec4 v_color;\r\n  out vec2 v_textureCoordinates;\r\n\r\n  void main() {\r\n    mat3 camera = u_cameras[a_cameraIndex];\r\n    mat3 transform = u_projection * inverse(camera);\r\n    gl_Position = vec4((transform * vec3(a_vertex, 1)).xy, 0, 1);\r\n    v_color = a_color / 255.0;\r\n    v_textureCoordinates = a_textureCoordinates;\r\n  }\r\n  `\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n    gl.shaderSource(vertexShader, vertexShaderSource)\r\n    gl.compileShader(vertexShader)\r\n    return vertexShader\r\n}\r\n\r\nconst createFragmentShader = (gl: WebGL2Context): Shader => {\r\n    const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec4 v_color;\r\n  in vec2 v_textureCoordinates;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  void main() {\r\n    fragColor = texture(u_texture, v_textureCoordinates) * v_color;\r\n  }\r\n  `\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n    gl.compileShader(fragmentShader)\r\n    return fragmentShader\r\n}\r\n\r\nconst bindVertices = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_vertex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindColors = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_color')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindTextureCoordinates = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_textureCoordinates')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindCameraIndex = (gl: WebGL2Context, program: Program, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_cameraIndex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribIPointer(\r\n        location,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst createProgram = (gl: WebGL2Context): ProgramData => {\r\n    const attributes: Attributes = {\r\n        vertices: {\r\n            location: 0,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        colors: {\r\n            location: 1,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        textureCoordinates: {\r\n            location: 2,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        cameraIndex: {\r\n            location: 3,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        vertexIndices: gl.createBuffer()!\r\n    }\r\n    const vertexShader = createVertexShader(gl, attributes)\r\n    const fragmentShader = createFragmentShader(gl)\r\n    const program = gl.createProgram()!\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        console.log(gl.getShaderInfoLog(vertexShader))\r\n        console.log(gl.getShaderInfoLog(fragmentShader))\r\n    }\r\n    gl.useProgram(program)\r\n    const vertexArrayObject = gl.createVertexArray()!\r\n    gl.bindVertexArray(vertexArrayObject)\r\n    bindVertices(gl, program, attributes.vertices)\r\n    bindColors(gl, program, attributes.colors)\r\n    bindTextureCoordinates(gl, program, attributes.textureCoordinates)\r\n    bindCameraIndex(gl, program, attributes.cameraIndex)\r\n    const uniforms: Uniforms = {\r\n        projection: gl.getUniformLocation(program, 'u_projection')!,\r\n        texture: gl.getUniformLocation(program, 'u_texture')!,\r\n        cameras: gl.getUniformLocation(program, 'u_cameras')!\r\n    }\r\n    return {\r\n        vertexShader,\r\n        fragmentShader,\r\n        program,\r\n        attributes,\r\n        uniforms\r\n    }\r\n}\r\n\r\ninterface Parameters {\r\n    width: number\r\n    height: number\r\n    document: Document\r\n    window: Window\r\n}\r\n\r\nexport const webGL2Renderer = ({ width, height, document, window }: Parameters) => {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.style.touchAction = 'none'\r\n    const gl = canvas.getContext('webgl2')!\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n    gl.depthMask(false)\r\n    gl.activeTexture(gl.TEXTURE0)\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n    gl.clearColor(0, 0, 0, 1)\r\n    const program = createProgram(gl)\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255])\r\n    )\r\n    const renderer = new WebGL2Renderer(window, document, canvas, gl, program, [texture], new Map(), [])\r\n    renderer.size = { width, height }\r\n    return renderer\r\n}","import { pointerDown } from \"./renderer/pointer_down\"\r\nimport { render } from \"./renderer/render\"\r\nimport { webGL2Renderer } from \"./renderer/webgl2\"\r\nimport { Pointer, UI } from \"./ui\"\r\n\r\nexport const transformPointer = (p: PointerEvent): Pointer => ({\r\n    x: p.clientX,\r\n    y: p.clientY,\r\n    id: p.pointerId,\r\n})\r\n\r\nexport type Dispatch<Event> = (event: Event) => void\r\n\r\ntype View<State, Event> = (dispatch: Dispatch<Event>, state: State) => UI\r\n\r\ninterface Milliseconds {\r\n    milliseconds: number\r\n}\r\n\r\ninterface Scheduled<Event> {\r\n    after: Milliseconds\r\n    event: Event\r\n}\r\n\r\nexport interface UpdateResult<State, Event> {\r\n    state: State\r\n    render?: boolean\r\n    schedule?: Scheduled<Event>[]\r\n    dispatch?: Event[]\r\n}\r\n\r\ntype Update<State, Event> = (state: State, event: Event) => UpdateResult<State, Event>\r\n\r\nexport const run = <State, Event>(state: State, view: View<State, Event>, update: Update<State, Event>): Dispatch<Event> => {\r\n    let renderer = webGL2Renderer({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n        window,\r\n        document\r\n    })\r\n    let renderQueued = false\r\n    const scheduleRender = () => {\r\n        if (!renderQueued) {\r\n            renderQueued = true\r\n            requestAnimationFrame(() => {\r\n                renderer = render(renderer, view(dispatch, state))\r\n                renderQueued = false\r\n            })\r\n        }\r\n    }\r\n    const dispatch = (event: Event) => {\r\n        const { state: newState, render, schedule, dispatch: dispatchEvents } = update(state, event)\r\n        state = newState\r\n        if (render) scheduleRender()\r\n        for (const { after, event } of schedule ?? []) {\r\n            const { milliseconds } = after\r\n            setTimeout(() => dispatch(event), milliseconds)\r\n        }\r\n        for (const event of dispatchEvents ?? []) dispatch(event)\r\n    }\r\n    document.body.appendChild(renderer.canvas as HTMLCanvasElement)\r\n    document.addEventListener(\"pointerdown\", p => {\r\n        renderer = pointerDown(renderer, transformPointer(p))\r\n    })\r\n    window.addEventListener(\"resize\", () => {\r\n        renderer.size = { width: window.innerWidth, height: window.innerHeight }\r\n        scheduleRender()\r\n    })\r\n    scheduleRender()\r\n    return dispatch\r\n}\r\n","import { Entry, MeasureText, UI } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"../alignment\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class ColumnLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly totalChildHeight: number,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const columnLayout = (size: Size, totalChildHeight: number, children: Layout[]) =>\r\n    new ColumnLayout(size, totalChildHeight, children)\r\n\r\nexport class ColumnGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const columnGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new ColumnGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Column {\r\n    constructor(\r\n        readonly mainAxisAlignment: MainAxisAlignment,\r\n        readonly crossAxisAlignment: CrossAxisAlignment,\r\n        readonly children: UI[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const initialChildren: Layout[] = []\r\n        const initial = {\r\n            children: initialChildren,\r\n            width: 0,\r\n            totalChildHeight: 0\r\n        }\r\n        const result = this.children.reduce((acc, child) => {\r\n            const layout = child.layout(constraints, measureText)\r\n            acc.children.push(layout)\r\n            acc.totalChildHeight += layout.size.height\r\n            acc.width = Math.max(acc.width, layout.size.width)\r\n            return acc\r\n        }, initial)\r\n        const { children, width, totalChildHeight } = result\r\n        const height = this.mainAxisAlignment == MainAxisAlignment.START ? totalChildHeight : constraints.maxHeight\r\n        return columnLayout({ width, height }, totalChildHeight, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const columnLayout = (layout as ColumnLayout)\r\n        const initialChildren: Geometry[] = []\r\n        const freeSpaceY = layout.size.height - columnLayout.totalChildHeight\r\n        const initial = {\r\n            children: initialChildren,\r\n            y: (() => {\r\n                switch (this.mainAxisAlignment) {\r\n                    case MainAxisAlignment.START: return offset.y\r\n                    case MainAxisAlignment.CENTER: return offset.y + freeSpaceY / 2\r\n                    case MainAxisAlignment.END: return offset.y + freeSpaceY\r\n                    case MainAxisAlignment.SPACE_EVENLY: return offset.y + freeSpaceY / (this.children.length + 1)\r\n                    case MainAxisAlignment.SPACE_BETWEEN: return offset.y\r\n                }\r\n            })(),\r\n        }\r\n        const addYStart = (childLayout: Layout) => childLayout.size.height\r\n        const addYCenter = (childLayout: Layout) => childLayout.size.height\r\n        const addYEnd = (childLayout: Layout) => childLayout.size.height\r\n        const addYSpaceEvenly = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (this.children.length + 1)\r\n        const addYSpaceBetween = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (this.children.length - 1)\r\n        const addY = (() => {\r\n            switch (this.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return addYStart\r\n                case MainAxisAlignment.CENTER: return addYCenter\r\n                case MainAxisAlignment.END: return addYEnd\r\n                case MainAxisAlignment.SPACE_EVENLY: return addYSpaceEvenly\r\n                case MainAxisAlignment.SPACE_BETWEEN: return addYSpaceBetween\r\n            }\r\n        })()\r\n        const offsetXStart = (_: Layout) => offset.x\r\n        const offsetXCenter = (childLayout: Layout) => offset.x + layout.size.width / 2 - childLayout.size.width / 2\r\n        const offsetXEnd = (childLayout: Layout) => offset.x + layout.size.width - childLayout.size.width\r\n        const offsetX = (() => {\r\n            switch (this.crossAxisAlignment) {\r\n                case CrossAxisAlignment.START: return offsetXStart\r\n                case CrossAxisAlignment.CENTER: return offsetXCenter\r\n                case CrossAxisAlignment.END: return offsetXEnd\r\n            }\r\n        })()\r\n        const result = this.children.reduce((acc, child, i) => {\r\n            const childLayout = columnLayout.children[i]\r\n            const childOffset = { x: offsetX(childLayout), y: acc.y }\r\n            const childGeometry = child.geometry(childLayout, childOffset, cameraStack)\r\n            acc.children.push(childGeometry)\r\n            acc.y += addY(childLayout)\r\n            return acc\r\n        }, initial)\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        })\r\n        return columnGeometry(worldSpace, result.children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as ColumnLayout).children\r\n        const childrenGeometry = (geometry as ColumnGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        const nextZ = z + 1\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            yield* child.traverse(childrenLayout[i], childrenGeometry[i], nextZ)\r\n            i += 1\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\ntype Overload = {\r\n    (children: UI[]): Column\r\n    (properties: Properties, children: UI[]): Column\r\n}\r\n\r\nexport const column: Overload = (...args: any[]): Column => {\r\n    const [properties, children] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return new Column(\r\n        properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    )\r\n}","import { CameraStack } from \"../camera_stack\"\r\nimport { Color } from \"../color\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\nimport { Padding, padding as paddingAll } from \"../padding\"\r\nimport { Entry, Id, MeasureText, OnClick, UI } from \"../ui\"\r\n\r\nexport class ContainerLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly child?: Layout\r\n    ) { }\r\n}\r\n\r\nexport const containerLayout = (size: Size, child?: Layout) =>\r\n    new ContainerLayout(size, child)\r\n\r\nexport class ContainerGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly child?: Geometry\r\n    ) { }\r\n}\r\n\r\ninterface GeometryData {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex?: number\r\n    readonly textureCoordinates?: number[]\r\n    readonly colors?: number[]\r\n    readonly vertices?: number[]\r\n    readonly vertexIndices?: number[]\r\n    readonly cameraIndex?: number[]\r\n}\r\n\r\nexport const containerGeometry = (data: GeometryData, child?: Geometry) => {\r\n    const vertices = data.vertices ?? []\r\n    return new ContainerGeometry(\r\n        data.worldSpace,\r\n        data.textureIndex ?? 0,\r\n        data.textureCoordinates ?? Array.from<number>({ length: vertices.length }).fill(0),\r\n        data.colors ?? [],\r\n        vertices,\r\n        data.vertexIndices ?? [],\r\n        data.cameraIndex ?? [],\r\n        child\r\n    )\r\n}\r\n\r\nexport class Container {\r\n    constructor(\r\n        readonly padding: Padding,\r\n        readonly width?: number,\r\n        readonly height?: number,\r\n        readonly x?: number,\r\n        readonly y?: number,\r\n        readonly color?: Color,\r\n        readonly onClick?: OnClick,\r\n        readonly id?: Id,\r\n        readonly child?: UI\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const { left, top, right, bottom } = this.padding\r\n        if (this.child) {\r\n            const layout = this.child.layout(constraints, measureText)\r\n            const width = this.width ?? layout.size.width + left + right\r\n            const height = this.height ?? layout.size.height + top + bottom\r\n            return containerLayout({ width, height }, layout)\r\n        }\r\n        const width = (() => {\r\n            if (this.width) return this.width + left + right\r\n            return constraints.maxWidth\r\n        })()\r\n        const height = (() => {\r\n            if (this.height) return this.height + top + bottom\r\n            return constraints.maxHeight\r\n        })()\r\n        return containerLayout({ width, height })\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const x0 = offset.x + (this.x ?? 0)\r\n        const x1 = x0 + layout.size.width\r\n        const y0 = offset.y + (this.y ?? 0)\r\n        const y1 = y0 + layout.size.height\r\n        const worldSpace = cameraStack.transformWorldSpace({ x0, x1, y0, y1 })\r\n        const data = (() => {\r\n            if (this.color) {\r\n                const { red, green, blue, alpha } = this.color\r\n                return {\r\n                    worldSpace,\r\n                    vertices: [\r\n                        x0, y0,\r\n                        x0, y1,\r\n                        x1, y0,\r\n                        x1, y1,\r\n                    ],\r\n                    colors: [\r\n                        red, green, blue, alpha,\r\n                        red, green, blue, alpha,\r\n                        red, green, blue, alpha,\r\n                        red, green, blue, alpha,\r\n                    ],\r\n                    vertexIndices: [\r\n                        0, 1, 2,\r\n                        1, 2, 3\r\n                    ],\r\n                    cameraIndex: Array(4).fill(cameraStack.activeCamera())\r\n                }\r\n            }\r\n            return {\r\n                worldSpace,\r\n                vertices: [],\r\n                colors: [],\r\n                vertexIndices: [],\r\n                cameraIndex: [],\r\n            }\r\n        })()\r\n        if (this.child) {\r\n            const childLayout = (layout as ContainerLayout).child!\r\n            const childOffset = {\r\n                x: x0 + this.padding.left,\r\n                y: y0 + this.padding.top\r\n            }\r\n            const childGeometry = this.child.geometry(childLayout, childOffset, cameraStack)\r\n            return containerGeometry(data, childGeometry)\r\n        }\r\n        return containerGeometry(data)\r\n    }\r\n\r\n    * traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        yield { ui: this, layout, geometry, z }\r\n        if (this.child) {\r\n            const childLayout = (layout as ContainerLayout).child!\r\n            const childGeometry = (geometry as ContainerGeometry).child!\r\n            yield* this.child.traverse(childLayout, childGeometry, z + 1)\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly padding?: Padding\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly onClick?: OnClick\r\n    readonly id?: Id\r\n}\r\n\r\nexport const container = ({ padding, width, height, color, x, y, onClick, id }: Properties, child?: UI): Container =>\r\n    new Container(\r\n        padding ?? paddingAll(0),\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        color,\r\n        onClick,\r\n        id,\r\n        child\r\n    )","import { Entry, MeasureText, UI } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"../alignment\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class RowLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly totalChildWidth: number,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const rowLayout = (size: Size, totalChildWidth: number, children: Layout[]) =>\r\n    new RowLayout(size, totalChildWidth, children)\r\n\r\nexport class RowGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const rowGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new RowGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Row {\r\n    constructor(\r\n        readonly mainAxisAlignment: MainAxisAlignment,\r\n        readonly crossAxisAlignment: CrossAxisAlignment,\r\n        readonly children: UI[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const initialChildren: Layout[] = []\r\n        const initial = {\r\n            children: initialChildren,\r\n            totalChildWidth: 0,\r\n            height: 0\r\n        }\r\n        const result = this.children.reduce((acc, child) => {\r\n            const layout = child.layout(constraints, measureText)\r\n            acc.children.push(layout)\r\n            acc.totalChildWidth += layout.size.width\r\n            acc.height = Math.max(acc.height, layout.size.height)\r\n            return acc\r\n        }, initial)\r\n        const { children, totalChildWidth, height } = result\r\n        const width = this.mainAxisAlignment == MainAxisAlignment.START ? totalChildWidth : constraints.maxWidth\r\n        return rowLayout({ width, height }, totalChildWidth, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const rowLayout = (layout as RowLayout)\r\n        const initialChildren: Geometry[] = []\r\n        const freeSpaceX = layout.size.width - rowLayout.totalChildWidth\r\n        const initial = {\r\n            children: initialChildren,\r\n            x: (() => {\r\n                switch (this.mainAxisAlignment) {\r\n                    case MainAxisAlignment.START: return offset.x\r\n                    case MainAxisAlignment.CENTER: return offset.x + freeSpaceX / 2\r\n                    case MainAxisAlignment.END: return offset.x + freeSpaceX\r\n                    case MainAxisAlignment.SPACE_EVENLY: return offset.x + freeSpaceX / (this.children.length + 1)\r\n                    case MainAxisAlignment.SPACE_BETWEEN: return offset.x\r\n                }\r\n            })(),\r\n        }\r\n        const addXStart = (childLayout: Layout) => childLayout.size.width\r\n        const addXCenter = (childLayout: Layout) => childLayout.size.width\r\n        const addXEnd = (childLayout: Layout) => childLayout.size.width\r\n        const addXSpaceEvenly = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (this.children.length + 1)\r\n        const addXSpaceBetween = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (this.children.length - 1)\r\n        const addX = (() => {\r\n            switch (this.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return addXStart\r\n                case MainAxisAlignment.CENTER: return addXCenter\r\n                case MainAxisAlignment.END: return addXEnd\r\n                case MainAxisAlignment.SPACE_EVENLY: return addXSpaceEvenly\r\n                case MainAxisAlignment.SPACE_BETWEEN: return addXSpaceBetween\r\n            }\r\n        })()\r\n        const offsetYStart = (_: Layout) => offset.y\r\n        const offsetYCenter = (childLayout: Layout) => offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n        const offsetYEnd = (childLayout: Layout) => offset.y + layout.size.height - childLayout.size.height\r\n        const offsetY = (() => {\r\n            switch (this.crossAxisAlignment) {\r\n                case CrossAxisAlignment.START: return offsetYStart\r\n                case CrossAxisAlignment.CENTER: return offsetYCenter\r\n                case CrossAxisAlignment.END: return offsetYEnd\r\n            }\r\n        })()\r\n        const result = this.children.reduce((acc, child, i) => {\r\n            const childLayout = rowLayout.children[i]\r\n            const childOffset = { x: acc.x, y: offsetY(childLayout) }\r\n            const childGeometry = child.geometry(childLayout, childOffset, cameraStack)\r\n            acc.children.push(childGeometry)\r\n            acc.x += addX(childLayout)\r\n            return acc\r\n        }, initial)\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height,\r\n        })\r\n        return rowGeometry(worldSpace, result.children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as RowLayout).children\r\n        const childrenGeometry = (geometry as RowGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        const nextZ = z + 1\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            yield* child.traverse(childrenLayout[i], childrenGeometry[i], nextZ)\r\n            i += 1\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\ntype Overload = {\r\n    (children: UI[]): Row\r\n    (properties: Properties, children: UI[]): Row\r\n}\r\n\r\nexport const row: Overload = (...args: any[]): Row => {\r\n    const [properties, children] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return new Row(\r\n        properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    )\r\n}","import { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\nimport { Matrix3x3 } from \"../linear_algebra/matrix3x3\"\r\nimport { Connection, Entry, MeasureText, UI } from \"../ui\"\r\n\r\nexport class SceneLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const sceneLayout = (size: Size, children: Layout[]) =>\r\n    new SceneLayout(size, children)\r\n\r\nexport class SceneGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const sceneGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new SceneGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Scene {\r\n    constructor(\r\n        readonly camera: Matrix3x3,\r\n        readonly children: UI[],\r\n        readonly connections: Connection[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const children = this.children.map(c => c.layout(constraints, measureText))\r\n        const width = constraints.maxWidth\r\n        const height = constraints.maxHeight\r\n        return sceneLayout({ width, height }, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        })\r\n        const childrenLayout = (layout as SceneLayout).children\r\n        cameraStack.pushCamera(this.camera)\r\n        const children = this.children.map((c, i) => c.geometry(childrenLayout[i], offset, cameraStack))\r\n        cameraStack.popCamera()\r\n        return sceneGeometry(worldSpace, children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as SceneLayout).children\r\n        const childrenGeometry = (geometry as SceneGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            for (const entry of child.traverse(childrenLayout[i], childrenGeometry[i], z)) {\r\n                yield entry\r\n                z = Math.max(z, entry.z)\r\n            }\r\n            i++\r\n            z++\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    camera: Matrix3x3\r\n    children: UI[]\r\n    connections?: Connection[]\r\n}\r\n\r\nexport const scene = (properties: Properties): Scene =>\r\n    new Scene(properties.camera, properties.children, properties.connections ?? [])","import { Entry, MeasureText, UI } from \".\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class StackLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const stackLayout = (size: Size, children: Layout[]) =>\r\n    new StackLayout(size, children)\r\n\r\nexport class StackGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const stackGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new StackGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Stack {\r\n    constructor(readonly children: UI[]) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const children = this.children.map(c => c.layout(constraints, measureText))\r\n        const width = constraints.maxWidth\r\n        const height = constraints.maxHeight\r\n        return stackLayout({ width, height }, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const stackLayout = (layout as StackLayout)\r\n        const children = this.children.map((c, i) => c.geometry(stackLayout.children[i], offset, cameraStack))\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height,\r\n        })\r\n        return stackGeometry(worldSpace, children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as StackLayout).children\r\n        const childrenGeometry = (geometry as StackGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            for (const entry of child.traverse(childrenLayout[i], childrenGeometry[i], z)) {\r\n                yield entry\r\n                z = Math.max(z, entry.z)\r\n            }\r\n            i += 1\r\n            z += 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const stack = (children: UI[]): Stack =>\r\n    new Stack(children)","import { Entry, Font, MeasureText, TextMeasurements } from \".\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Color } from \"../color\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class TextLayout {\r\n    constructor(\r\n        readonly measurements: TextMeasurements,\r\n        readonly size: Size\r\n    ) { }\r\n}\r\n\r\nexport const textLayout = (measurements: TextMeasurements, size: Size) =>\r\n    new TextLayout(measurements, size)\r\n\r\n\r\nexport class TextGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n    ) { }\r\n}\r\n\r\ninterface GeometryData {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly colors: number[]\r\n    readonly vertices: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n}\r\n\r\nconst vertices = (widths: number[], height: number, offset: Offset) => {\r\n    const result = []\r\n    let offsetX = offset.x\r\n    const y0 = offset.y\r\n    const y1 = offset.y + height\r\n    for (const width of widths) {\r\n        const x0 = offsetX\r\n        const x1 = offsetX + width\r\n        result.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        )\r\n        offsetX += width\r\n    }\r\n    return result\r\n}\r\n\r\nconst colors = (n: number, { red, green, blue, alpha }: Color) => {\r\n    const result = []\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n            red, green, blue, alpha,\r\n        )\r\n    }\r\n    return result\r\n}\r\n\r\nconst vertexIndices = (n: number) => {\r\n    const result = []\r\n    let offset = 0\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            offset, offset + 1, offset + 2,\r\n            offset + 1, offset + 2, offset + 3\r\n        )\r\n        offset += 4\r\n    }\r\n    return result\r\n}\r\n\r\nexport const textGeometry = (data: GeometryData) =>\r\n    new TextGeometry(\r\n        data.worldSpace,\r\n        data.textureIndex,\r\n        data.textureCoordinates,\r\n        data.colors,\r\n        data.vertices,\r\n        data.vertexIndices,\r\n        data.cameraIndex,\r\n    )\r\n\r\nexport class Text {\r\n    constructor(\r\n        readonly font: Font,\r\n        readonly color: Color,\r\n        readonly str: string\r\n    ) { }\r\n\r\n    layout(_: Constraints, measureText: MeasureText) {\r\n        const { font, str } = this\r\n        const measurements = measureText(font, str)\r\n        const width = measurements.widths.reduce((acc, width) => acc + width)\r\n        const size = { width, height: font.size }\r\n        return textLayout(measurements, size)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const textLayout = layout as TextLayout\r\n        const { measurements } = textLayout\r\n        const { textureIndex, textureCoordinates, widths } = measurements\r\n        return textGeometry({\r\n            worldSpace: cameraStack.transformWorldSpace({\r\n                x0: offset.x,\r\n                y0: offset.y,\r\n                x1: offset.x + layout.size.width,\r\n                y1: offset.y + layout.size.height\r\n            }),\r\n            textureIndex,\r\n            textureCoordinates: textureCoordinates.flat(),\r\n            colors: colors(widths.length, this.color),\r\n            vertices: vertices(widths, this.font.size, offset),\r\n            vertexIndices: vertexIndices(widths.length),\r\n            cameraIndex: Array(widths.length * 4).fill(cameraStack.activeCamera())\r\n        })\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        yield { ui: this, layout, geometry, z }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly font?: string\r\n    readonly size?: number\r\n    readonly color?: Color\r\n}\r\n\r\ntype Overload = {\r\n    (str: String): Text\r\n    (properties: Properties, str: String): Text\r\n}\r\n\r\nexport const text: Overload = (...args: any[]): Text => {\r\n    const [properties, str] = (() =>\r\n        typeof args[0] == 'string' ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    const font = {\r\n        family: properties.font ?? \"monospace\",\r\n        size: properties.size ?? 14\r\n    }\r\n    return new Text(\r\n        font,\r\n        properties.color ?? { red: 255, green: 255, blue: 255, alpha: 255 },\r\n        str\r\n    )\r\n}","import { CrossAxisAlignment, MainAxisAlignment } from \"./alignment\"\r\nimport { Event, EventKind, update } from \"./event\"\r\nimport { identity } from \"./linear_algebra/matrix3x3\"\r\nimport { padding } from \"./padding\"\r\nimport { Dispatch, run, transformPointer } from \"./run\"\r\nimport { Finder, Input, Node, Output, State, Theme } from \"./state\"\r\nimport { Connection, UI } from \"./ui\"\r\nimport { column } from \"./ui/column\"\r\nimport { container } from \"./ui/container\"\r\nimport { row } from \"./ui/row\"\r\nimport { scene } from \"./ui/scene\"\r\nimport { stack } from \"./ui/stack\"\r\nimport { text } from \"./ui/text\"\r\n\r\nconst spacer = (size: number) =>\r\n    container({ width: size, height: size })\r\n\r\nconst intersperse = <T>(array: T[], seperator: T): T[] => {\r\n    const result = [array[0]]\r\n    for (const element of array.slice(1)) {\r\n        result.push(seperator, element)\r\n    }\r\n    return result\r\n}\r\n\r\nconst inputUi = (theme: Theme, { name, selected }: Input, nodeIndex: number, inputIndex: number): UI =>\r\n    container({\r\n        onClick: () => dispatch({\r\n            kind: EventKind.CLICKED_INPUT,\r\n            inputPath: { nodeIndex: nodeIndex, inputIndex: inputIndex }\r\n        })\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            container({\r\n                id: `input ${nodeIndex} ${inputIndex}`,\r\n                width: 14,\r\n                height: 14,\r\n                color: selected ? theme.selectedInput : theme.input,\r\n            }),\r\n            spacer(4),\r\n            text(name)\r\n        ])\r\n    )\r\n\r\nconst inputsUi = (theme: Theme, inputs: Input[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            inputs.map((input, inputIndex) => inputUi(theme, input, nodeIndex, inputIndex)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\nconst outputUi = (theme: Theme, { name, selected }: Output, nodeIndex: number, outputIndex: number): UI =>\r\n    container({\r\n        onClick: () => dispatch({\r\n            kind: EventKind.CLICKED_OUTPUT,\r\n            outputPath: { nodeIndex: nodeIndex, outputIndex: outputIndex }\r\n        })\r\n    },\r\n        row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            container({\r\n                id: `output ${nodeIndex} ${outputIndex}`,\r\n                width: 14,\r\n                height: 14,\r\n                color: selected ? theme.selectedInput : theme.input,\r\n            }),\r\n        ])\r\n    )\r\n\r\n\r\nconst outputsUi = (theme: Theme, outputs: Output[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            outputs.map((output, outputIndex) => outputUi(theme, output, nodeIndex, outputIndex)),\r\n            spacer(4)\r\n        )\r\n    )\r\n\r\nconst nodeUi = (dispatch: Dispatch<Event>, theme: Theme, { name, x, y, inputs, outputs }: Node, index: number) => {\r\n    const rowEntries: UI[] = []\r\n    if (inputs.length) rowEntries.push(inputsUi(theme, inputs, index))\r\n    if (inputs.length && outputs.length) rowEntries.push(spacer(15))\r\n    if (outputs.length) rowEntries.push(outputsUi(theme, outputs, index))\r\n    return container({\r\n        color: theme.node,\r\n        padding: padding(4),\r\n        x, y,\r\n        onClick: () => dispatch({\r\n            kind: EventKind.CLICKED_NODE,\r\n            index: index\r\n        })\r\n    },\r\n        column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(4),\r\n            row(rowEntries)\r\n        ])\r\n    )\r\n}\r\n\r\nconst finder = ({ search, options }: Finder, theme: Theme): UI =>\r\n    column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n        container({ height: 10 }),\r\n        container({ color: theme.node, padding: padding(4) },\r\n            column([\r\n                container({ color: theme.background, width: 300, padding: padding(4) },\r\n                    text({ color: theme.input, size: 24 }, search.length ? search : \"Search ...\")),\r\n                container({ width: 10, height: 10 }),\r\n                ...options.map((option, i) =>\r\n                    container({\r\n                        padding: padding(4),\r\n                        onClick: () => dispatch({\r\n                            kind: EventKind.CLICKED_FINDER_OPTION,\r\n                            option\r\n                        })\r\n                    },\r\n                        text({\r\n                            size: 18,\r\n                            color: i == 0 ? theme.input : { red: 255, green: 255, blue: 255, alpha: 255 }\r\n                        }, option)))\r\n            ])\r\n        )\r\n    ])\r\n\r\nconst virtualKey = (dispatch: Dispatch<Event>, key: string) =>\r\n    container({\r\n        padding: padding(10),\r\n        onClick: () => dispatch({\r\n            kind: EventKind.VIRTUAL_KEYDOWN,\r\n            key\r\n        })\r\n    }, text({ size: 24 }, key))\r\n\r\nconst virtualKeys = (dispatch: Dispatch<Event>, keys: string[]) =>\r\n    row(keys.map(c => virtualKey(dispatch, c)))\r\n\r\nconst virtualKeyboard = (dispatch: Dispatch<Event>, theme: Theme) =>\r\n    column({ mainAxisAlignment: MainAxisAlignment.END }, [\r\n        row({ mainAxisAlignment: MainAxisAlignment.SPACE_BETWEEN }, [\r\n            container({ padding: padding(4), color: theme.node },\r\n                column([\r\n                    virtualKeys(dispatch, ['1', '2', '3', '4', '5']),\r\n                    virtualKeys(dispatch, ['q', 'w', 'e', 'r', 't']),\r\n                    virtualKeys(dispatch, ['a', 's', 'd', 'f', 'g']),\r\n                    virtualKeys(dispatch, ['z', 'x', 'c', 'v']),\r\n                    virtualKeys(dispatch, ['sft', 'space']),\r\n                ])\r\n            ),\r\n            container({ padding: padding(4), color: theme.node },\r\n                column({ crossAxisAlignment: CrossAxisAlignment.END }, [\r\n                    virtualKeys(dispatch, ['6', '7', '8', '9', '0']),\r\n                    virtualKeys(dispatch, ['y', 'u', 'i', 'o', 'p']),\r\n                    virtualKeys(dispatch, ['h', 'j', 'k', 'l']),\r\n                    virtualKeys(dispatch, ['b', 'n', 'm', 'del']),\r\n                    virtualKeys(dispatch, ['space', 'ret']),\r\n                ])\r\n            ),\r\n        ]),\r\n    ])\r\n\r\n\r\nconst view = (dispatch: Dispatch<Event>, state: State) => {\r\n    if (!state.finder.show) {\r\n        const nodes: UI[] = []\r\n        state.graph.nodes.forEach((node, i) => {\r\n            if (i !== state.draggedNode) nodes.push(nodeUi(dispatch, state.theme, node, i))\r\n        })\r\n        if (state.draggedNode !== null) {\r\n            const i = state.draggedNode\r\n            nodes.push(nodeUi(dispatch, state.theme, state.graph.nodes[i], i))\r\n        }\r\n        const connections: Connection[] = state.graph.edges.map(({ input, output }) => ({\r\n            from: `output ${output.nodeIndex} ${output.outputIndex}`,\r\n            to: `input ${input.nodeIndex} ${input.inputIndex}`,\r\n            color: state.theme.connection\r\n        }))\r\n        return stack([\r\n            container({ color: state.theme.background }),\r\n            scene({ camera: state.camera, children: nodes, connections }),\r\n        ])\r\n    }\r\n    return stack([\r\n        container({ color: state.theme.background }),\r\n        finder(state.finder, state.theme),\r\n        virtualKeyboard(dispatch, state.theme)\r\n    ])\r\n}\r\n\r\nconst initialState: State = {\r\n    graph: {\r\n        nodes: [\r\n            {\r\n                name: \"Source\",\r\n                inputs: [],\r\n                outputs: [\r\n                    { name: \"Out 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"Out 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                x: 7,\r\n                y: 15\r\n            },\r\n            {\r\n                name: \"Transform\",\r\n                inputs: [\r\n                    { name: \"In 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"In 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                outputs: [\r\n                    { name: \"Out 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"Out 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                x: window.innerWidth / 2 - 70,\r\n                y: 50\r\n            },\r\n            {\r\n                name: \"Sink\",\r\n                inputs: [\r\n                    { name: \"In 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"In 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                outputs: [],\r\n                x: window.innerWidth - 70,\r\n                y: 15\r\n            },\r\n        ],\r\n        edges: []\r\n    },\r\n    zooming: false,\r\n    dragging: false,\r\n    draggedNode: null,\r\n    pointers: [],\r\n    pointerDistance: 0,\r\n    pointerCenter: [0, 0],\r\n    camera: identity(),\r\n    selectedOutput: null,\r\n    selectedInput: null,\r\n    theme: {\r\n        background: { red: 2, green: 22, blue: 39, alpha: 255 },\r\n        node: { red: 41, green: 95, blue: 120, alpha: 255 },\r\n        input: { red: 188, green: 240, blue: 192, alpha: 255 },\r\n        selectedInput: { red: 175, green: 122, blue: 208, alpha: 255 },\r\n        connection: { red: 255, green: 255, blue: 255, alpha: 255 },\r\n    },\r\n    potentialDoubleClick: false,\r\n    nodePlacementLocation: { x: 0, y: 0 },\r\n    finder: {\r\n        search: '',\r\n        options: [],\r\n        show: false\r\n    },\r\n    operations: {\r\n        \"Add\": {\r\n            name: \"Add\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Subtract\": {\r\n            name: \"Subtract\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Multiply\": {\r\n            name: \"Multiply\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Divide\": {\r\n            name: \"Divide\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Equal\": {\r\n            name: \"Equal\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Less Than\": {\r\n            name: \"Less Than\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        },\r\n        \"Less Than Or Equal\": {\r\n            name: \"Less Than Or Equal\",\r\n            inputs: [\"x\", \"y\"],\r\n            outputs: [\"out\"]\r\n        }\r\n    }\r\n}\r\n\r\nconst dispatch = run(initialState, view, update)\r\n\r\nif (typeof PointerEvent.prototype.getCoalescedEvents === 'function') {\r\n    document.addEventListener('pointermove', (e) => {\r\n        e.getCoalescedEvents().forEach(p => {\r\n            dispatch({\r\n                kind: EventKind.POINTER_MOVE,\r\n                pointer: transformPointer(p)\r\n            })\r\n        })\r\n    })\r\n} else {\r\n    document.addEventListener('pointermove', p =>\r\n        dispatch({\r\n            kind: EventKind.POINTER_MOVE,\r\n            pointer: transformPointer(p)\r\n        })\r\n    )\r\n}\r\n\r\ndocument.addEventListener(\"pointerdown\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_DOWN,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener(\"pointerup\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_UP,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener('wheel', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.WHEEL,\r\n        x: e.clientX,\r\n        y: e.clientY,\r\n        deltaY: e.deltaY,\r\n    })\r\n}, { passive: false })\r\n\r\ndocument.addEventListener('contextmenu', e => {\r\n    e.preventDefault()\r\n})\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    document.body.requestFullscreen()\r\n})\r\n\r\ndocument.addEventListener('keydown', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.KEYDOWN,\r\n        key: e.key\r\n    })\r\n})"],"names":["$38d7a2dac5bc7fa9$export$6595504a60e1f77c","MainAxisAlignment1","$38d7a2dac5bc7fa9$export$66a3248d846611ce","CrossAxisAlignment1","$f4c0df53f29f413e$export$fad298d038a96a64","haystack","needle","haystackIndex","needleIndex","length","n","toLowerCase","$2a9d6d4b688c9d90$export$b74061472fe7c07","width","height","$2a9d6d4b688c9d90$export$d73ee8ef04f5226a","x","y","$2a9d6d4b688c9d90$export$dcdf75081b88279d","$2a9d6d4b688c9d90$export$84b43e5e8429f175","matrices","head","tail","reduce","a","b","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","$2a9d6d4b688c9d90$export$dbb85424dca880d0","b1","b2","b3","$2a9d6d4b688c9d90$export$70ae2c07e401031b","idet","$9a57707492d0f60d$export$f24224f1c91d8156","c","Math","sqrt","pow","$d7336fab2a6e7c56$export$50508d7849040d51","EventKind1","$d7336fab2a6e7c56$var$pointerMove","state","event","dragging","zooming","finder","show","nodePlacementLocation","pointer","rerender","index","pointers","findIndex","p","id","dx","dy","draggedNode","scaling","camera","node","graph","nodes","render","p0","p1","x1","y1","x2","y2","distance","previousDistance","pointerDistance","previousCenter","pointerCenter","move","zoom","moveBack","$d7336fab2a6e7c56$var$updateFinderOptions","options","Object","keys","operations","filter","item","search","$d7336fab2a6e7c56$var$closeFinder","$d7336fab2a6e7c56$var$insertOperationFromFinder","name","operation","_","push","inputs","map","input","selected","edgeIndices","outputs","output","$810e59d520bce11e$export$8ee6ea94b5aedb49","constructor","top","right","bottom","left","$810e59d520bce11e$export$6f98e8eaf0be1996","value","$f97aa2d16f86c383$var$inWorldSpace","x0","y0","$f97aa2d16f86c383$export$e6e29dfeb5ef19c1","renderer","i","clickHandlers","onClick","worldSpace","$db98e7c147af88a3$var$newBatch","textureIndex","vertices","colors","vertexIndices","textureCoordinates","cameraIndex","$db98e7c147af88a3$export$1e96939139b396da","layers","batches","batch","layer","geometries","geometry","offset","$14955c3b2c9570b5$export$e6fddfd45b239a42","this","cameras","stack","transform","pushCamera","popCamera","pop","activeCamera","slice","transformWorldSpace","_0","_1","$cecff29ae76c43d7$export$533b26079ad0b4b","ui","layout","reducer","accumulator","initial","entry","traverse","combine","$c7f5b399ef6aea66$export$390ef945b5a425a7","lookup","$45d6bbdb80ff139b$var$cubicBezier","ts","from","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","first","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$45d6bbdb80ff139b$export$48a436e09c0b8a4d","connections","idToWorldSpace","start","stop","num","step","Array","$45d6bbdb80ff139b$var$linspace","color","red","green","blue","alpha","samples","$f0ab672d0c96c5dc$export$8c1d7deec90f08c1","needed","z","Map","get","newGeometry","set","$f0ab672d0c96c5dc$export$707dc0d5406a403a","handlers","$f0ab672d0c96c5dc$export$1c1147d11a715c65","$f0ab672d0c96c5dc$export$1650419e431d3ba3","acc","$f0ab672d0c96c5dc$export$b3890eb0ae9dca99","size","clear","constraints","minWidth","maxWidth","minHeight","maxHeight","measureText","cameraStack","lines","draw","drawLines","$30cee85f95a8e397$export$ce2766bf4a8721d3","window1","document1","canvas","gl1","program1","textures1","textMeasurementsCache","window","document","gl","program","textures","COLOR_BUFFER_BIT","attributes","texture","bindTexture","TEXTURE_2D","bindBuffer","ARRAY_BUFFER","buffer","bufferData","Float32Array","STATIC_DRAW","Uint8Array","ELEMENT_ARRAY_BUFFER","Uint16Array","drawElements","TRIANGLES","UNSIGNED_SHORT","count","fill","drawArrays","LINES","getTextureMeasurements","font","dpr","key","family","measurements","widths","createElement","ctx","getContext","rows","current","$30cee85f95a8e397$var$nearestPowerOfTwo","cellSize","style","scale","textAlign","textBaseline","fillStyle","clearRect","String","fromCharCode","metric","ceil","floor","fillText","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","$30cee85f95a8e397$var$createTextMeasurements","newMeasurements","str","devicePixelRatio","indices","f","result","$30cee85f95a8e397$var$mapString","charCodeAt","uniforms","uniformMatrix3fv","projection","viewport","_size","data","_cameras","location","createBuffer","vertexShader","vertexShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","$30cee85f95a8e397$var$createVertexShader","fragmentShader","FRAGMENT_SHADER","$30cee85f95a8e397$var$createFragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","log","getShaderInfoLog","useProgram","vertexArrayObject","createVertexArray","bindVertexArray","FLOAT","$30cee85f95a8e397$var$bindVertices","$30cee85f95a8e397$var$bindColors","bindAttribLocation","enableVertexAttribArray","vertexAttribPointer","$30cee85f95a8e397$var$bindTextureCoordinates","vertexAttribIPointer","getUniformLocation","$6119d70cc28f8b94$export$479aac53993fd71","clientX","clientY","pointerId","$518015a6e3cc694d$export$c7e5bac7049eee2a","totalChildHeight","children","$518015a6e3cc694d$export$dfd18615cd7e86d6","$518015a6e3cc694d$export$816b5d811295e6bc","mainAxisAlignment","crossAxisAlignment","child","max","$518015a6e3cc694d$export$f8ce731bdfd45dc7","START","columnLayout1","freeSpaceY","CENTER","END","SPACE_EVENLY","SPACE_BETWEEN","addYStart","childLayout","addYCenter","addYEnd","addYSpaceEvenly","addYSpaceBetween","addY","offsetXStart","offsetXCenter","offsetXEnd","offsetX","childOffset","childGeometry","$518015a6e3cc694d$export$5a1548308f4d4391","childrenLayout","childrenGeometry","nextZ","$518015a6e3cc694d$export$4e0c71f277ca26b3","args","properties","$8a99d960732a172f$export$26c271df922a3d3c","$8a99d960732a172f$export$a4e80cd8d85917bb","$8a99d960732a172f$export$76c47790527e6c8a","$8a99d960732a172f$export$7c88ce694bad6320","$8a99d960732a172f$export$42a852a2b6b56249","padding","$8a99d960732a172f$export$34e0f9847d4c02dd","$9e4edab979495f0d$export$593b1ed5b05b470","totalChildWidth","$9e4edab979495f0d$export$aef74122d3baefd6","$9e4edab979495f0d$export$b59bdbef9ce70de2","$9e4edab979495f0d$export$4076779b9674714b","rowLayout1","freeSpaceX","addXStart","addXCenter","addXEnd","addXSpaceEvenly","addXSpaceBetween","addX","offsetYStart","offsetYCenter","offsetYEnd","offsetY","$9e4edab979495f0d$export$90e65e88c1393562","$9e4edab979495f0d$export$120ff0929b202a6d","$864b15efd9f5e1a7$export$183888ffeb127955","$864b15efd9f5e1a7$export$cbdc2ca6cb1fbaf1","$864b15efd9f5e1a7$export$38af1803e3442a7f","$864b15efd9f5e1a7$export$9e03d30774b30061","$864b15efd9f5e1a7$export$7a4266c2aa024d65","$d380360335f9e6c0$export$4a33896fea5f6057","$d380360335f9e6c0$export$288eb08f379bb85f","$d380360335f9e6c0$export$694e0d28c7ffc90c","$d380360335f9e6c0$export$b008c3d2ea57ca56","stackLayout1","$d380360335f9e6c0$export$218db93a2e8965d","$d380360335f9e6c0$export$a57ab32f40f83ea9","$2d5075f154be1094$export$211e101f90b3ed3","$2d5075f154be1094$export$684b774b4473ba5f","colors1","vertices1","vertexIndices1","$2d5075f154be1094$var$vertices","$2d5075f154be1094$var$colors","$2d5075f154be1094$var$vertexIndices","$2d5075f154be1094$export$5f1af8db9871e1d6","width1","$2d5075f154be1094$export$801f12fcd9ba2788","textLayout1","flat","$2d5075f154be1094$export$6f093cfa640b7166","$b4e14b6b8da86996$var$spacer","$b4e14b6b8da86996$var$intersperse","array","seperator","element","$b4e14b6b8da86996$var$inputsUi","theme","nodeIndex","inputIndex","$b4e14b6b8da86996$var$dispatch","kind","CLICKED_INPUT","inputPath","selectedInput","$b4e14b6b8da86996$var$inputUi","$b4e14b6b8da86996$var$outputsUi","outputIndex","CLICKED_OUTPUT","outputPath","$b4e14b6b8da86996$var$outputUi","$b4e14b6b8da86996$var$nodeUi","dispatch1","rowEntries","CLICKED_NODE","$b4e14b6b8da86996$var$finder","background","option","CLICKED_FINDER_OPTION","$b4e14b6b8da86996$var$virtualKeys","dispatch3","$b4e14b6b8da86996$var$virtualKey","dispatch2","VIRTUAL_KEYDOWN","view","update","$30cee85f95a8e397$export$94781114c991ae1c","innerWidth","innerHeight","renderQueued","scheduleRender","requestAnimationFrame","dispatch","newState","render1","schedule","dispatchEvents","after","event1","milliseconds","setTimeout","event2","body","appendChild","addEventListener","edges","selectedOutput","connection","potentialDoubleClick","Add","Subtract","Multiply","Divide","Equal","dispatch5","forEach","dispatch4","POINTER_DOWN","DOUBLE_CLICK","DOUBLE_CLICK_TIMEOUT","$d7336fab2a6e7c56$var$pointerDown","POINTER_UP","splice","$d7336fab2a6e7c56$var$pointerUp","POINTER_MOVE","$d7336fab2a6e7c56$var$clickedNode","WHEEL","deltaY","$d7336fab2a6e7c56$var$wheel","edgeIndex","$d7336fab2a6e7c56$var$clickedInput","$d7336fab2a6e7c56$var$clickedOutput","$d7336fab2a6e7c56$var$doubleClickTimeout","$d7336fab2a6e7c56$var$doubleClick","KEYDOWN","$d7336fab2a6e7c56$var$keyDown","$d7336fab2a6e7c56$var$virtualKeyDown","$d7336fab2a6e7c56$var$clickedFinderOption","PointerEvent","prototype","getCoalescedEvents","e","preventDefault","passive","requestFullscreen"],"version":3,"file":"index.9dcb61f9.js.map"}