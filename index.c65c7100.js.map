{"mappings":"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","sources":["src/alignment.ts","src/color.ts","src/linear_algebra.ts","src/event.ts","src/padding.ts","src/renderer/pointer_down.ts","src/renderer/batch_geometry.ts","src/camera_stack.ts","src/reduce.ts","src/renderer/id_to_world_space.ts","src/renderer/connection_geometry.ts","src/renderer/render.ts","src/renderer/webgl2.ts","src/run.ts","src/ui/column.ts","src/ui/container.ts","src/ui/row.ts","src/ui/scene.ts","src/ui/stack.ts","src/ui/text.ts","src/index.ts"],"sourcesContent":["export enum MainAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END,\r\n    SPACE_EVENLY,\r\n    SPACE_BETWEEN\r\n}\r\n\r\nexport enum CrossAxisAlignment {\r\n    START,\r\n    CENTER,\r\n    END\r\n}","export class Rgba {\r\n    constructor(\r\n        readonly r: number,\r\n        readonly g: number,\r\n        readonly b: number,\r\n        readonly a: number,\r\n    ) { }\r\n\r\n    rgba = () => this\r\n}\r\n\r\nexport const rgba = (r: number, g: number, b: number, a: number) =>\r\n    new Rgba(r, g, b, a)\r\n\r\nexport interface Color {\r\n    rgba: () => Rgba\r\n}","import { Size } from \"./layout\"\r\n\r\nexport class Vec3 {\r\n    constructor(public data: number[]) { }\r\n\r\n    length = () => {\r\n        const [a, b, c] = this.data\r\n        return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2))\r\n    }\r\n}\r\n\r\nexport class Mat3 {\r\n    constructor(public data: number[]) { }\r\n\r\n    static identity = () => new Mat3([\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1,\r\n    ])\r\n\r\n    static projection = ({ width, height }: Size) => new Mat3([\r\n        2 / width, 0, -1,\r\n        0, -2 / height, 1,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static translate = (x: number, y: number) => new Mat3([\r\n        1, 0, x,\r\n        0, 1, y,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static scale = (x: number, y: number) => new Mat3([\r\n        x, 0, 0,\r\n        0, y, 0,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static rotate = (radians: number) => {\r\n        const c = Math.cos(radians)\r\n        const s = Math.sin(radians)\r\n        return new Mat3([\r\n            c, s, 0,\r\n            -s, c, 0,\r\n            0, 0, 1\r\n        ])\r\n    }\r\n\r\n    matMul = (other: Mat3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return new Mat3([\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ])\r\n    }\r\n\r\n    vecMul = (other: Vec3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b1 = b[0]\r\n        const b2 = b[1]\r\n        const b3 = b[2]\r\n        const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n        const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n        const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n        return new Vec3([c1, c2, c3])\r\n    }\r\n\r\n    inverse = () => {\r\n        const a = this.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = a22 * a33 - a23 * a32\r\n        const b12 = a21 * a33 - a23 * a31\r\n        const b13 = a21 * a32 - a22 * a31\r\n        const b21 = a12 * a33 - a13 * a32\r\n        const b22 = a11 * a33 - a13 * a31\r\n        const b23 = a11 * a32 - a12 * a31\r\n        const b31 = a12 * a23 - a13 * a22\r\n        const b32 = a11 * a23 - a13 * a21\r\n        const b33 = a11 * a22 - a12 * a21\r\n        const det = a31 * b31 - a32 * b32 + a33 * b33\r\n        const idet = 1 / det\r\n        return new Mat3([\r\n            idet * b11, idet * -b21, idet * b31,\r\n            idet * -b12, idet * b22, idet * -b32,\r\n            idet * b13, idet * -b23, idet * b33\r\n        ])\r\n    }\r\n}","import { Mat3, Vec3 } from \"./linear_algebra\"\r\nimport { InputPath, OutputPath, State } from \"./state\"\r\nimport { Pointer } from \"./ui\"\r\n\r\nexport enum EventKind {\r\n    POINTER_MOVE,\r\n    POINTER_DOWN,\r\n    POINTER_UP,\r\n    CLICKED_NODE,\r\n    WHEEL,\r\n    CLICKED_INPUT,\r\n    CLICKED_OUTPUT,\r\n}\r\n\r\nexport interface PointerMove {\r\n    kind: EventKind.POINTER_MOVE\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerDown {\r\n    kind: EventKind.POINTER_DOWN\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface PointerUp {\r\n    kind: EventKind.POINTER_UP\r\n    pointer: Pointer\r\n}\r\n\r\nexport interface ClickedNode {\r\n    kind: EventKind.CLICKED_NODE\r\n    index: number\r\n}\r\n\r\nexport interface Wheel {\r\n    kind: EventKind.WHEEL\r\n    x: number\r\n    y: number\r\n    deltaY: number\r\n}\r\n\r\nexport interface ClickedInput {\r\n    kind: EventKind.CLICKED_INPUT\r\n    inputPath: InputPath\r\n}\r\n\r\nexport interface ClickedOutput {\r\n    kind: EventKind.CLICKED_OUTPUT\r\n    outputPath: OutputPath\r\n}\r\n\r\nexport type Event =\r\n    | PointerMove\r\n    | PointerDown\r\n    | PointerUp\r\n    | ClickedNode\r\n    | Wheel\r\n    | ClickedInput\r\n    | ClickedOutput\r\n\r\n\r\nconst pointerDown = (state: State, event: PointerDown) => {\r\n    state.pointers.push(event.pointer)\r\n    if (state.pointers.length === 1) state.dragging = true\r\n    return { state, rerender: false }\r\n}\r\n\r\nconst pointerUp = (state: State, event: PointerUp) => {\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    state.pointers.splice(index, 1)\r\n    if (state.pointers.length === 0) {\r\n        state.dragging = false\r\n        state.draggedNode = null\r\n        state.pointerDistance = 0\r\n    }\r\n    return { state, rerender: false }\r\n}\r\n\r\nconst pointerMove = (state: State, event: PointerMove) => {\r\n    if (!state.dragging) return { state, rerender: false }\r\n    const index = state.pointers.findIndex(p => p.id === event.pointer.id)\r\n    const pointer = state.pointers[index]\r\n    state.pointers[index] = event.pointer\r\n    if (state.pointers.length === 1) {\r\n        const dx = event.pointer.x - pointer.x\r\n        const dy = event.pointer.y - pointer.y\r\n        if (state.draggedNode !== null) {\r\n            const scaling = state.camera.vecMul(new Vec3([0, 1, 0])).length()\r\n            const node = state.graph.nodes[state.draggedNode]\r\n            node.x += dx * scaling\r\n            node.y += dy * scaling\r\n        } else {\r\n            state.camera = state.camera.matMul(Mat3.translate(-dx, -dy))\r\n        }\r\n        return { state, rerender: true }\r\n    }\r\n    if (state.pointers.length === 2) {\r\n        const [p0, p1] = [state.pointers[0], state.pointers[1]]\r\n        const [x1, y1] = [p0.x, p0.y]\r\n        const [x2, y2] = [p1.x, p1.y]\r\n        const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n        const previousDistance = state.pointerDistance\r\n        const previousCenter = state.pointerCenter\r\n        state.pointerDistance = distance\r\n        const x = (p0.x + p1.x) / 2\r\n        const y = (p0.y + p1.y) / 2\r\n        state.pointerCenter = [x, y]\r\n        if (previousDistance > 0) {\r\n            const move = Mat3.translate(x, y)\r\n            const zoom = Math.pow(2, (previousDistance - distance) * 0.01)\r\n            const scale = Mat3.scale(zoom, zoom)\r\n            const moveBack = Mat3.translate(-x, -y)\r\n            const transform = move.matMul(scale).matMul(moveBack)\r\n            const dx = x - previousCenter[0]\r\n            const dy = y - previousCenter[1]\r\n            state.camera = state.camera.matMul(transform).matMul(Mat3.translate(-dx, -dy))\r\n            return { state, rerender: true }\r\n        } else return { state, rerender: false }\r\n    }\r\n    return { state, rerender: false }\r\n}\r\n\r\nconst clickedNode = (state: State, event: ClickedNode) => {\r\n    state.draggedNode = event.index\r\n    return { state, rerender: true }\r\n}\r\n\r\nconst wheel = (state: State, event: Wheel) => {\r\n    const move = Mat3.translate(event.x, event.y)\r\n    const zoom = Math.pow(2, event.deltaY * 0.01)\r\n    const scale = Mat3.scale(zoom, zoom)\r\n    const moveBack = Mat3.translate(-event.x, -event.y)\r\n    const transform = move.matMul(scale).matMul(moveBack)\r\n    state.camera = state.camera.matMul(transform)\r\n    return { state, rerender: true }\r\n}\r\n\r\nconst clickedInput = (state: State, event: ClickedInput) => {\r\n    state.draggedNode = event.inputPath.nodeIndex\r\n    if (state.selectedOutput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: event.inputPath,\r\n            output: state.selectedOutput\r\n        })\r\n        {\r\n            const { nodeIndex, outputIndex } = state.selectedOutput\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n            output.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, inputIndex } = event.inputPath\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedOutput = null\r\n        return { state, rerender: true }\r\n    }\r\n    if (state.selectedInput) {\r\n        const { nodeIndex, inputIndex } = state.selectedInput\r\n        state.graph.nodes[nodeIndex].inputs[inputIndex].selected = false\r\n    }\r\n    const { nodeIndex, inputIndex } = event.inputPath\r\n    state.graph.nodes[nodeIndex].inputs[inputIndex].selected = true\r\n    state.selectedInput = event.inputPath\r\n    return { state, rerender: true }\r\n}\r\n\r\nconst clickedOutput = (state: State, event: ClickedOutput) => {\r\n    state.draggedNode = event.outputPath.nodeIndex\r\n    if (state.selectedInput) {\r\n        const edgeIndex = state.graph.edges.length\r\n        state.graph.edges.push({\r\n            input: state.selectedInput,\r\n            output: event.outputPath\r\n        })\r\n        {\r\n            const { nodeIndex, inputIndex } = state.selectedInput\r\n            const input = state.graph.nodes[nodeIndex].inputs[inputIndex]\r\n            input.edgeIndices.push(edgeIndex)\r\n            input.selected = false\r\n        }\r\n        {\r\n            const { nodeIndex, outputIndex } = event.outputPath\r\n            const output = state.graph.nodes[nodeIndex].outputs[outputIndex]\r\n            output.edgeIndices.push(edgeIndex)\r\n        }\r\n        state.selectedInput = null\r\n        return { state, rerender: true }\r\n    }\r\n    if (state.selectedOutput) {\r\n        const { nodeIndex, outputIndex } = state.selectedOutput\r\n        state.graph.nodes[nodeIndex].outputs[outputIndex].selected = false\r\n    }\r\n    const { nodeIndex, outputIndex } = event.outputPath\r\n    state.graph.nodes[nodeIndex].outputs[outputIndex].selected = true\r\n    state.selectedOutput = event.outputPath\r\n    return { state, rerender: true }\r\n}\r\n\r\nexport const update = (state: State, event: Event) => {\r\n    switch (event.kind) {\r\n        case EventKind.POINTER_DOWN: return pointerDown(state, event)\r\n        case EventKind.POINTER_UP: return pointerUp(state, event)\r\n        case EventKind.POINTER_MOVE: return pointerMove(state, event)\r\n        case EventKind.CLICKED_NODE: return clickedNode(state, event)\r\n        case EventKind.WHEEL: return wheel(state, event)\r\n        case EventKind.CLICKED_INPUT: return clickedInput(state, event)\r\n        case EventKind.CLICKED_OUTPUT: return clickedOutput(state, event)\r\n    }\r\n}\r\n","export class Padding {\r\n    constructor(\r\n        readonly top: number,\r\n        readonly right: number,\r\n        readonly bottom: number,\r\n        readonly left: number\r\n    ) { }\r\n}\r\n\r\nexport const padding = (value: number) =>\r\n    new Padding(value, value, value, value)","import { Renderer } from \".\"\r\nimport { WorldSpace } from \"../geometry\"\r\nimport { Pointer } from \"../ui\"\r\n\r\nconst inWorldSpace = ({ x0, y0, x1, y1 }: WorldSpace, pointer: Pointer) =>\r\n    x0 <= pointer.x && pointer.x <= x1 &&\r\n    y0 <= pointer.y && pointer.y <= y1\r\n\r\nexport const pointerDown = <R extends Renderer>(renderer: R, pointer: Pointer): R => {\r\n    for (let i = renderer.clickHandlers.length; i > 0; --i) {\r\n        for (const { onClick, worldSpace } of renderer.clickHandlers[i - 1]) {\r\n            if (inWorldSpace(worldSpace, pointer)) {\r\n                onClick(pointer)\r\n                return renderer\r\n            }\r\n        }\r\n    }\r\n    return renderer\r\n}\r\n","import { Layers } from \"./render\"\r\n\r\nexport interface Batch {\r\n    vertices: number[]\r\n    vertexIndices: number[]\r\n    colors: number[]\r\n    textureIndex: number\r\n    textureCoordinates: number[]\r\n    cameraIndex: number[]\r\n}\r\n\r\nconst newBatch = (textureIndex: number): Batch => ({\r\n    vertices: [],\r\n    colors: [],\r\n    vertexIndices: [],\r\n    textureIndex,\r\n    textureCoordinates: [],\r\n    cameraIndex: []\r\n})\r\n\r\nexport const batchGeometry = (layers: Layers): Batch[] => {\r\n    const batches: Batch[] = []\r\n    let batch = newBatch(0)\r\n    for (const layer of layers) {\r\n        for (const [textureIndex, geometries] of layer) {\r\n            if (batch.textureIndex !== textureIndex) {\r\n                if (batch.vertices.length !== 0) batches.push(batch)\r\n                batch = newBatch(textureIndex)\r\n            }\r\n            for (const geometry of geometries) {\r\n                const offset = batch.vertices.length / 2\r\n                batch.vertices.push(...geometry.vertices)\r\n                batch.colors.push(...geometry.colors)\r\n                for (const index of geometry.vertexIndices) {\r\n                    batch.vertexIndices.push(index + offset)\r\n                }\r\n                batch.textureCoordinates.push(...geometry.textureCoordinates)\r\n                batch.cameraIndex.push(...geometry.cameraIndex)\r\n            }\r\n        }\r\n    }\r\n    if (batch.vertices.length !== 0) batches.push(batch)\r\n    return batches\r\n}","import { WorldSpace } from \"./geometry\"\r\nimport { Mat3, Vec3 } from \"./linear_algebra\"\r\nimport { Cameras } from \"./renderer/render\"\r\n\r\nexport type CameraIndex = number\r\n\r\nexport class CameraStack {\r\n    cameras: Cameras\r\n    stack: number[]\r\n    transform: Mat3\r\n\r\n    constructor() {\r\n        const camera = Mat3.identity()\r\n        this.cameras = [Mat3.identity()]\r\n        this.stack = [0]\r\n        this.transform = camera.inverse()\r\n    }\r\n\r\n    pushCamera = (camera: Mat3) => {\r\n        const index = this.cameras.length\r\n        this.cameras.push(camera)\r\n        this.stack.push(index)\r\n        this.transform = camera.inverse()\r\n    }\r\n\r\n    popCamera = () => {\r\n        this.stack.pop()\r\n        this.transform = this.cameras[this.activeCamera()].inverse()\r\n    }\r\n\r\n    activeCamera = () => this.stack.slice(-1)[0]\r\n\r\n    transformWorldSpace = (worldSpace: WorldSpace): WorldSpace => {\r\n        const [x0, y0, _0] = this.transform.vecMul(new Vec3([worldSpace.x0, worldSpace.y0, 1])).data\r\n        const [x1, y1, _1] = this.transform.vecMul(new Vec3([worldSpace.x1, worldSpace.y1, 1])).data\r\n        return { x0, y0, x1, y1 }\r\n    }\r\n}\r\n","import { Geometry } from \"./geometry\";\r\nimport { Layout } from \"./layout\";\r\nimport { Entry, UI } from \"./ui\";\r\n\r\nexport interface Reducer<T> {\r\n    initial: () => T\r\n    combine: (accumulator: T, entry: Entry) => T\r\n}\r\n\r\nexport const reduce = <T>(ui: UI, layout: Layout, geometry: Geometry, reducer: Reducer<T>): T => {\r\n    const accumulator = reducer.initial()\r\n    for (const entry of ui.traverse(layout, geometry, 0)) {\r\n        reducer.combine(accumulator, entry)\r\n    }\r\n    return accumulator\r\n}","import { WorldSpace } from \"../geometry\"\r\nimport { Reducer } from \"../reduce\"\r\nimport { Entry } from \"../ui\"\r\n\r\nexport type IdToWorldSpace = { [id: string]: WorldSpace }\r\n\r\nexport const buildIdToWorldSpace: Reducer<IdToWorldSpace> = {\r\n    initial: () => ({}),\r\n    combine: (lookup: IdToWorldSpace, entry: Entry) => {\r\n        if (!entry.ui.id) return lookup\r\n        lookup[entry.ui.id] = entry.geometry.worldSpace\r\n        return lookup\r\n    }\r\n}\r\n","import { WorldSpace } from \"../geometry\"\r\nimport { Connection } from \"../ui\"\r\nimport { IdToWorldSpace } from \"./id_to_world_space\"\r\n\r\nexport interface Lines {\r\n    vertices: number[]\r\n    colors: number[]\r\n}\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nfunction* cubicBezier(ts: number[], from: WorldSpace, to: WorldSpace): Generator<number> {\r\n    const p0x = (from.x0 + from.x1) / 2\r\n    const p0y = (from.y0 + from.y1) / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = (to.x0 + to.x1) / 2\r\n    const p3y = (to.y0 + to.y1) / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    let lastX = 0\r\n    let lastY = 0\r\n    let first = true\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (first) {\r\n            yield x\r\n            yield y\r\n            first = false\r\n        } else {\r\n            yield lastX\r\n            yield lastY\r\n        }\r\n        yield x\r\n        yield y\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n}\r\n\r\nexport const connectionGeometry = (connections: Connection[], idToWorldSpace: IdToWorldSpace): Lines => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const vertices: number[] = []\r\n    const colors: number[] = []\r\n    for (const { from, to, color } of connections) {\r\n        for (const p of cubicBezier(ts, idToWorldSpace[from], idToWorldSpace[to])) {\r\n            vertices.push(p)\r\n        }\r\n        const { r, g, b, a } = color.rgba()\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(r, g, b, a)\r\n    }\r\n    return { vertices, colors }\r\n}","import { ClickHandlers, Renderer } from \".\"\r\nimport { batchGeometry } from \"./batch_geometry\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry } from \"../geometry\"\r\nimport { Mat3 } from \"../linear_algebra\"\r\nimport { reduce, Reducer } from \"../reduce\"\r\nimport { Connection, Entry, UI } from \"../ui\"\r\nimport { buildIdToWorldSpace, IdToWorldSpace } from \"./id_to_world_space\"\r\nimport { connectionGeometry } from \"./connection_geometry\"\r\n\r\nexport type Cameras = Mat3[]\r\nexport type TextureIndex = number\r\nexport type Layer = Map<TextureIndex, Geometry[]>\r\nexport type Layers = Layer[]\r\n\r\ninterface Accumulator {\r\n    layers: Layers,\r\n    clickHandlers: ClickHandlers,\r\n    idToWorldSpace: IdToWorldSpace\r\n    connections: Connection[]\r\n}\r\n\r\nexport const layerGeometry: Reducer<Layers> = {\r\n    initial: () => [],\r\n    combine: (layers: Layers, entry: Entry) => {\r\n        if (entry.geometry.vertices.length == 0) return layers\r\n        const needed = entry.z - layers.length + 1\r\n        for (let i = 0; i < needed; ++i) layers.push(new Map())\r\n        const layer = layers[entry.z]\r\n        const geometry = (() => {\r\n            const geometry = layer.get(entry.geometry.textureIndex)\r\n            if (geometry) return geometry\r\n            const newGeometry: Geometry[] = []\r\n            layer.set(entry.geometry.textureIndex, newGeometry)\r\n            return newGeometry\r\n        })()\r\n        geometry.push(entry.geometry)\r\n        return layers\r\n    }\r\n}\r\n\r\nexport const gatherOnClickHandlers: Reducer<ClickHandlers> = {\r\n    initial: () => [],\r\n    combine: (handlers: ClickHandlers, entry: Entry) => {\r\n        if (!entry.ui.onClick) return handlers\r\n        const needed = entry.z - handlers.length + 1\r\n        for (let i = 0; i < needed; ++i) handlers.push([])\r\n        handlers[entry.z].push({\r\n            onClick: entry.ui.onClick,\r\n            worldSpace: entry.geometry.worldSpace\r\n        })\r\n        return handlers\r\n    }\r\n}\r\n\r\n\r\nexport const gatherConnections: Reducer<Connection[]> = {\r\n    initial: () => [],\r\n    combine: (connections: Connection[], entry: Entry) => {\r\n        if (!entry.ui.connections) return connections\r\n        connections.push(...entry.ui.connections)\r\n        return connections\r\n    }\r\n}\r\n\r\n\r\nexport const reducer: Reducer<Accumulator> = {\r\n    initial: () => ({\r\n        layers: layerGeometry.initial(),\r\n        clickHandlers: gatherOnClickHandlers.initial(),\r\n        idToWorldSpace: buildIdToWorldSpace.initial(),\r\n        connections: gatherConnections.initial()\r\n    }),\r\n    combine: (acc: Accumulator, entry: Entry) => {\r\n        return {\r\n            layers: layerGeometry.combine(acc.layers, entry),\r\n            clickHandlers: gatherOnClickHandlers.combine(acc.clickHandlers, entry),\r\n            idToWorldSpace: buildIdToWorldSpace.combine(acc.idToWorldSpace, entry),\r\n            connections: gatherConnections.combine(acc.connections, entry)\r\n        }\r\n    }\r\n}\r\n\r\nexport const render = <R extends Renderer>(renderer: R, ui: UI): R => {\r\n    const { width, height } = renderer.size\r\n    renderer.clear()\r\n    const constraints = {\r\n        minWidth: 0,\r\n        maxWidth: width,\r\n        minHeight: 0,\r\n        maxHeight: height\r\n    }\r\n    const layout = ui.layout(constraints, renderer.measureText)\r\n    const offsets = { x: 0, y: 0 }\r\n    const cameraStack = new CameraStack()\r\n    const geometry = ui.geometry(layout, offsets, cameraStack)\r\n    const { layers, clickHandlers, connections, idToWorldSpace } = reduce(ui, layout, geometry, reducer)\r\n    const batches = batchGeometry(layers)\r\n    const lines = connectionGeometry(connections, idToWorldSpace)\r\n    renderer.cameras = cameraStack.cameras\r\n    renderer.clickHandlers = clickHandlers\r\n    for (const batch of batches) renderer.draw(batch)\r\n    if (lines.vertices.length) renderer.drawLines(lines)\r\n    return renderer\r\n}\r\n","import { ClickHandlers } from \".\";\r\nimport { Batch } from \"./batch_geometry\";\r\nimport { Size } from \"../layout\";\r\nimport { Mat3 } from \"../linear_algebra\";\r\nimport { Font, TextMeasurements } from \"../ui\";\r\nimport { Lines } from \"./connection_geometry\";\r\n\r\ninterface Attribute {\r\n    location: number\r\n    buffer: WebGLBuffer\r\n}\r\n\r\ninterface Attributes {\r\n    vertices: Attribute\r\n    vertexIndices: WebGLBuffer\r\n    colors: Attribute\r\n    textureCoordinates: Attribute\r\n    cameraIndex: Attribute\r\n}\r\n\r\ninterface Uniforms {\r\n    projection: WebGLUniformLocation\r\n    texture: WebGLUniformLocation\r\n    cameras: WebGLUniformLocation\r\n}\r\n\r\ninterface Program {\r\n    vertexShader: WebGLShader\r\n    fragmentShader: WebGLShader\r\n    program: WebGLProgram\r\n    attributes: Attributes\r\n    uniforms: Uniforms\r\n}\r\n\r\ntype DevicePixelRatio = number\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\nconst createTextMeasurements = (gl: WebGL2RenderingContext, font: Font, dpr: DevicePixelRatio) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(font.size * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * dpr\r\n    canvas.height = size * dpr\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(dpr, dpr)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = `${font.size}px ${font.family}`\r\n    ctx.fillStyle = 'white'\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const height = font.size\r\n    const widths: number[] = []\r\n    const textureCoordinates: number[][] = []\r\n    for (let i = 0; i < totalCells; ++i) {\r\n        const c = String.fromCharCode(i)\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        widths.push(width)\r\n        const x0 = x / size\r\n        const x1 = (x + width) / size\r\n        const y0 = y / size\r\n        const y1 = (y + height) / size\r\n        textureCoordinates.push([\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        ])\r\n    }\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas\r\n    )\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return { widths, textureCoordinates, texture }\r\n}\r\n\r\nconst mapString = <T>(str: string, f: (c: string, i: number) => T): Array<T> => {\r\n    let result = []\r\n    for (let i = 0; i < str.length; ++i) {\r\n        result.push(f(str[i], i))\r\n    }\r\n    return result\r\n}\r\n\r\nexport class WebGL2Renderer {\r\n    _size: Size\r\n    _cameras: Mat3[]\r\n\r\n    constructor(\r\n        public canvas: HTMLCanvasElement,\r\n        public gl: WebGL2RenderingContext,\r\n        public program: Program,\r\n        public textures: WebGLTexture[],\r\n        public textMeasurementsCache: Map<string, TextMeasurements>,\r\n        public clickHandlers: ClickHandlers,\r\n    ) { }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    set size(size: Size) {\r\n        const { gl, program } = this\r\n        const { uniforms } = program\r\n        const { canvas } = gl\r\n        gl.uniformMatrix3fv(uniforms.projection, /*transpose*/true, Mat3.projection(size).data)\r\n        canvas.width = size.width * window.devicePixelRatio\r\n        canvas.height = size.height * window.devicePixelRatio\r\n        canvas.style.width = `${size.width}px`\r\n        canvas.style.height = `${size.height}px`\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this._size = size\r\n    }\r\n\r\n    get size() { return this._size }\r\n\r\n    set cameras(cameras: Mat3[]) {\r\n        const { gl, program } = this\r\n        const { uniforms } = program\r\n        const data: number[] = []\r\n        for (const camera of cameras) data.push(...camera.data)\r\n        gl.uniformMatrix3fv(uniforms.cameras, /*transpose*/true, data)\r\n        this._cameras = cameras\r\n    }\r\n\r\n    get cameras() { return this._cameras }\r\n\r\n    draw = ({ vertices, colors, vertexIndices, textureCoordinates, textureIndex, cameraIndex }: Batch) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        const texture = textures[textureIndex]\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndex), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.vertexIndices)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors }: Lines) => {\r\n        const { gl, program, textures } = this\r\n        const { attributes } = program\r\n        const texture = textures[0]\r\n        const count = vertices.length / 2\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.vertices.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.colors.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.textureCoordinates.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(Array(count * 2).fill(0)), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, attributes.cameraIndex.buffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(Array(count).fill(0)), gl.STATIC_DRAW)\r\n        gl.drawArrays(gl.LINES, /*first*/0, count)\r\n    }\r\n\r\n    getTextureMeasurements = (font: Font, dpr: DevicePixelRatio) => {\r\n        const { gl } = this\r\n        const key = `${dpr} ${font.size} ${font.family}`\r\n        const measurements = this.textMeasurementsCache.get(key)\r\n        if (measurements) return measurements\r\n        const { texture, widths, textureCoordinates } = createTextMeasurements(gl, font, dpr)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newMeasurements = { widths, textureIndex, textureCoordinates }\r\n        this.textMeasurementsCache.set(key, newMeasurements)\r\n        return newMeasurements\r\n    }\r\n\r\n    measureText = (font: Font, str: string) => {\r\n        const dpr = window.devicePixelRatio\r\n        const { widths, textureIndex, textureCoordinates } = this.getTextureMeasurements(font, dpr)\r\n        const indices = mapString(str, c => c.charCodeAt(0))\r\n        return {\r\n            widths: indices.map(i => widths[i]),\r\n            textureIndex,\r\n            textureCoordinates: indices.map(i => textureCoordinates[i]),\r\n        }\r\n    }\r\n}\r\n\r\nconst createVertexShader = (gl: WebGL2RenderingContext, attributes: Attributes): WebGLShader => {\r\n    const { vertices, colors, textureCoordinates, cameraIndex } = attributes\r\n    const vertexShaderSource = `#version 300 es\r\n  uniform mat3 u_projection;\r\n  uniform mat3 u_cameras[8];\r\n\r\n  layout(location = ${vertices.location}) in vec2 a_vertex;\r\n  layout(location = ${colors.location}) in vec4 a_color;\r\n  layout(location = ${textureCoordinates.location}) in vec2 a_textureCoordinates;\r\n  layout(location = ${cameraIndex.location}) in uint a_cameraIndex;\r\n\r\n  out vec4 v_color;\r\n  out vec2 v_textureCoordinates;\r\n\r\n  void main() {\r\n    mat3 camera = u_cameras[a_cameraIndex];\r\n    mat3 transform = u_projection * inverse(camera);\r\n    gl_Position = vec4((transform * vec3(a_vertex, 1)).xy, 0, 1);\r\n    v_color = a_color / 255.0;\r\n    v_textureCoordinates = a_textureCoordinates;\r\n  }\r\n  `\r\n    const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n    gl.shaderSource(vertexShader, vertexShaderSource)\r\n    gl.compileShader(vertexShader)\r\n    return vertexShader\r\n}\r\n\r\nconst createFragmentShader = (gl: WebGL2RenderingContext): WebGLShader => {\r\n    const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec4 v_color;\r\n  in vec2 v_textureCoordinates;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  void main() {\r\n    fragColor = texture(u_texture, v_textureCoordinates) * v_color;\r\n  }\r\n  `\r\n    const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n    gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n    gl.compileShader(fragmentShader)\r\n    return fragmentShader\r\n}\r\n\r\nconst bindVertices = (gl: WebGL2RenderingContext, program: WebGLProgram, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_vertex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindColors = (gl: WebGL2RenderingContext, program: WebGLProgram, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_color')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindTextureCoordinates = (gl: WebGL2RenderingContext, program: WebGLProgram, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_textureCoordinates')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribPointer(\r\n        location,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst bindCameraIndex = (gl: WebGL2RenderingContext, program: WebGLProgram, { location, buffer }: Attribute) => {\r\n    gl.bindAttribLocation(program, location, 'a_cameraIndex')\r\n    gl.enableVertexAttribArray(location)\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer)\r\n    gl.vertexAttribIPointer(\r\n        location,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n    )\r\n}\r\n\r\nconst createProgram = (gl: WebGL2RenderingContext): Program => {\r\n    const attributes: Attributes = {\r\n        vertices: {\r\n            location: 0,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        colors: {\r\n            location: 1,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        textureCoordinates: {\r\n            location: 2,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        cameraIndex: {\r\n            location: 3,\r\n            buffer: gl.createBuffer()!\r\n        },\r\n        vertexIndices: gl.createBuffer()!\r\n    }\r\n    const vertexShader = createVertexShader(gl, attributes)\r\n    const fragmentShader = createFragmentShader(gl)\r\n    const program = gl.createProgram()!\r\n    gl.attachShader(program, vertexShader)\r\n    gl.attachShader(program, fragmentShader)\r\n    gl.linkProgram(program)\r\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n        console.log(gl.getShaderInfoLog(vertexShader))\r\n        console.log(gl.getShaderInfoLog(fragmentShader))\r\n    }\r\n    gl.useProgram(program)\r\n    const vertexArrayObject = gl.createVertexArray()!\r\n    gl.bindVertexArray(vertexArrayObject)\r\n    bindVertices(gl, program, attributes.vertices)\r\n    bindColors(gl, program, attributes.colors)\r\n    bindTextureCoordinates(gl, program, attributes.textureCoordinates)\r\n    bindCameraIndex(gl, program, attributes.cameraIndex)\r\n    const uniforms: Uniforms = {\r\n        projection: gl.getUniformLocation(program, 'u_projection')!,\r\n        texture: gl.getUniformLocation(program, 'u_texture')!,\r\n        cameras: gl.getUniformLocation(program, 'u_cameras')!\r\n    }\r\n    return {\r\n        vertexShader,\r\n        fragmentShader,\r\n        program,\r\n        attributes,\r\n        uniforms\r\n    }\r\n}\r\n\r\nexport const webGL2Renderer = (size: Size) => {\r\n    const canvas = document.createElement('canvas')\r\n    canvas.style.touchAction = 'none'\r\n    const gl = canvas.getContext('webgl2')!\r\n    gl.enable(gl.BLEND)\r\n    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n    gl.depthMask(false)\r\n    gl.activeTexture(gl.TEXTURE0)\r\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n    gl.clearColor(0, 0, 0, 1)\r\n    const program = createProgram(gl)\r\n    const texture = gl.createTexture()!\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255])\r\n    )\r\n    const renderer = new WebGL2Renderer(canvas, gl, program, [texture], new Map(), [])\r\n    renderer.size = size\r\n    return renderer\r\n}","import { pointerDown } from \"./renderer/pointer_down\"\r\nimport { render } from \"./renderer/render\"\r\nimport { webGL2Renderer } from \"./renderer/webgl2\"\r\nimport { Pointer, UI } from \"./ui\"\r\n\r\nexport const transformPointer = (p: PointerEvent): Pointer => ({\r\n    x: p.clientX,\r\n    y: p.clientY,\r\n    id: p.pointerId,\r\n})\r\n\r\nexport type Dispatch<Event> = (event: Event) => void\r\n\r\ntype View<State, Event> = (dispatch: Dispatch<Event>, state: State) => UI\r\n\r\ninterface UpdateResult<State> {\r\n    state: State\r\n    rerender: boolean\r\n}\r\n\r\ntype Update<State, Event> = (state: State, event: Event) => UpdateResult<State>\r\n\r\nexport const run = <State, Event>(state: State, view: View<State, Event>, update: Update<State, Event>): Dispatch<Event> => {\r\n    let renderer = webGL2Renderer({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight\r\n    })\r\n    let renderQueued = false\r\n    const scheduleRender = () => {\r\n        if (!renderQueued) {\r\n            renderQueued = true\r\n            requestAnimationFrame(() => {\r\n                renderer = render(renderer, view(dispatch, state))\r\n                renderQueued = false\r\n            })\r\n        }\r\n    }\r\n    const dispatch = (event: Event) => {\r\n        const { state: newState, rerender } = update(state, event)\r\n        state = newState\r\n        if (rerender) scheduleRender()\r\n    }\r\n    document.body.appendChild(renderer.canvas)\r\n    document.addEventListener(\"pointerdown\", p => {\r\n        renderer = pointerDown(renderer, transformPointer(p))\r\n    })\r\n    window.addEventListener(\"resize\", () => {\r\n        renderer.size = { width: window.innerWidth, height: window.innerHeight }\r\n        scheduleRender()\r\n    })\r\n    scheduleRender()\r\n    return dispatch\r\n}\r\n","import { Entry, MeasureText, UI } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"../alignment\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class ColumnLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly totalChildHeight: number,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const columnLayout = (size: Size, totalChildHeight: number, children: Layout[]) =>\r\n    new ColumnLayout(size, totalChildHeight, children)\r\n\r\nexport class ColumnGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const columnGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new ColumnGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Column {\r\n    constructor(\r\n        readonly mainAxisAlignment: MainAxisAlignment,\r\n        readonly crossAxisAlignment: CrossAxisAlignment,\r\n        readonly children: UI[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const initialChildren: Layout[] = []\r\n        const initial = {\r\n            children: initialChildren,\r\n            width: 0,\r\n            totalChildHeight: 0\r\n        }\r\n        const result = this.children.reduce((acc, child) => {\r\n            const layout = child.layout(constraints, measureText)\r\n            acc.children.push(layout)\r\n            acc.totalChildHeight += layout.size.height\r\n            acc.width = Math.max(acc.width, layout.size.width)\r\n            return acc\r\n        }, initial)\r\n        const { children, width, totalChildHeight } = result\r\n        const height = this.mainAxisAlignment == MainAxisAlignment.START ? totalChildHeight : constraints.maxHeight\r\n        return columnLayout({ width, height }, totalChildHeight, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const columnLayout = (layout as ColumnLayout)\r\n        const initialChildren: Geometry[] = []\r\n        const freeSpaceY = layout.size.height - columnLayout.totalChildHeight\r\n        const initial = {\r\n            children: initialChildren,\r\n            y: (() => {\r\n                switch (this.mainAxisAlignment) {\r\n                    case MainAxisAlignment.START: return offset.y\r\n                    case MainAxisAlignment.CENTER: return offset.y + freeSpaceY / 2\r\n                    case MainAxisAlignment.END: return offset.y + freeSpaceY\r\n                    case MainAxisAlignment.SPACE_EVENLY: return offset.y + freeSpaceY / (this.children.length + 1)\r\n                    case MainAxisAlignment.SPACE_BETWEEN: return offset.y\r\n                }\r\n            })(),\r\n        }\r\n        const addYStart = (childLayout: Layout) => childLayout.size.height\r\n        const addYCenter = (childLayout: Layout) => childLayout.size.height\r\n        const addYEnd = (childLayout: Layout) => childLayout.size.height\r\n        const addYSpaceEvenly = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (this.children.length + 1)\r\n        const addYSpaceBetween = (childLayout: Layout) => childLayout.size.height + freeSpaceY / (this.children.length - 1)\r\n        const addY = (() => {\r\n            switch (this.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return addYStart\r\n                case MainAxisAlignment.CENTER: return addYCenter\r\n                case MainAxisAlignment.END: return addYEnd\r\n                case MainAxisAlignment.SPACE_EVENLY: return addYSpaceEvenly\r\n                case MainAxisAlignment.SPACE_BETWEEN: return addYSpaceBetween\r\n            }\r\n        })()\r\n        const offsetXStart = (_: Layout) => offset.x\r\n        const offsetXCenter = (childLayout: Layout) => offset.x + layout.size.width / 2 - childLayout.size.width / 2\r\n        const offsetXEnd = (childLayout: Layout) => offset.x + layout.size.width - childLayout.size.width\r\n        const offsetX = (() => {\r\n            switch (this.crossAxisAlignment) {\r\n                case CrossAxisAlignment.START: return offsetXStart\r\n                case CrossAxisAlignment.CENTER: return offsetXCenter\r\n                case CrossAxisAlignment.END: return offsetXEnd\r\n            }\r\n        })()\r\n        const result = this.children.reduce((acc, child, i) => {\r\n            const childLayout = columnLayout.children[i]\r\n            const childOffset = { x: offsetX(childLayout), y: acc.y }\r\n            const childGeometry = child.geometry(childLayout, childOffset, cameraStack)\r\n            acc.children.push(childGeometry)\r\n            acc.y += addY(childLayout)\r\n            return acc\r\n        }, initial)\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        })\r\n        return columnGeometry(worldSpace, result.children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as ColumnLayout).children\r\n        const childrenGeometry = (geometry as ColumnGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        const nextZ = z + 1\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            yield* child.traverse(childrenLayout[i], childrenGeometry[i], nextZ)\r\n            i += 1\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\ntype Overload = {\r\n    (children: UI[]): Column\r\n    (properties: Properties, children: UI[]): Column\r\n}\r\n\r\nexport const column: Overload = (...args: any[]): Column => {\r\n    const [properties, children] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return new Column(\r\n        properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    )\r\n}","import { CameraStack } from \"../camera_stack\"\r\nimport { Color } from \"../color\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\nimport { Padding, padding as paddingAll } from \"../padding\"\r\nimport { Entry, Id, MeasureText, OnClick, UI } from \"../ui\"\r\n\r\nexport class ContainerLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly child?: Layout\r\n    ) { }\r\n}\r\n\r\nexport const containerLayout = (size: Size, child?: Layout) =>\r\n    new ContainerLayout(size, child)\r\n\r\nexport class ContainerGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly child?: Geometry\r\n    ) { }\r\n}\r\n\r\ninterface GeometryData {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex?: number\r\n    readonly textureCoordinates?: number[]\r\n    readonly colors?: number[]\r\n    readonly vertices?: number[]\r\n    readonly vertexIndices?: number[]\r\n    readonly cameraIndex?: number[]\r\n}\r\n\r\nexport const containerGeometry = (data: GeometryData, child?: Geometry) => {\r\n    const vertices = data.vertices ?? []\r\n    return new ContainerGeometry(\r\n        data.worldSpace,\r\n        data.textureIndex ?? 0,\r\n        data.textureCoordinates ?? Array.from<number>({ length: vertices.length }).fill(0),\r\n        data.colors ?? [],\r\n        vertices,\r\n        data.vertexIndices ?? [],\r\n        data.cameraIndex ?? [],\r\n        child\r\n    )\r\n}\r\n\r\nexport class Container {\r\n    constructor(\r\n        readonly padding: Padding,\r\n        readonly width?: number,\r\n        readonly height?: number,\r\n        readonly x?: number,\r\n        readonly y?: number,\r\n        readonly color?: Color,\r\n        readonly onClick?: OnClick,\r\n        readonly id?: Id,\r\n        readonly child?: UI\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const { left, top, right, bottom } = this.padding\r\n        if (this.child) {\r\n            const layout = this.child.layout(constraints, measureText)\r\n            const width = layout.size.width + left + right\r\n            const height = layout.size.height + top + bottom\r\n            return containerLayout({ width, height }, layout)\r\n        }\r\n        const width = (() => {\r\n            if (this.width) return this.width + left + right\r\n            return constraints.maxWidth\r\n        })()\r\n        const height = (() => {\r\n            if (this.height) return this.height + top + bottom\r\n            return constraints.maxHeight\r\n        })()\r\n        return containerLayout({ width, height })\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const x0 = offset.x + (this.x ?? 0)\r\n        const x1 = x0 + layout.size.width\r\n        const y0 = offset.y + (this.y ?? 0)\r\n        const y1 = y0 + layout.size.height\r\n        const worldSpace = cameraStack.transformWorldSpace({ x0, x1, y0, y1 })\r\n        const data = (() => {\r\n            if (this.color) {\r\n                const { r, g, b, a } = this.color.rgba()\r\n                return {\r\n                    worldSpace,\r\n                    vertices: [\r\n                        x0, y0,\r\n                        x0, y1,\r\n                        x1, y0,\r\n                        x1, y1,\r\n                    ],\r\n                    colors: [\r\n                        r, g, b, a,\r\n                        r, g, b, a,\r\n                        r, g, b, a,\r\n                        r, g, b, a,\r\n                    ],\r\n                    vertexIndices: [\r\n                        0, 1, 2,\r\n                        1, 2, 3\r\n                    ],\r\n                    cameraIndex: Array(4).fill(cameraStack.activeCamera())\r\n                }\r\n            }\r\n            return {\r\n                worldSpace,\r\n                vertices: [],\r\n                colors: [],\r\n                vertexIndices: [],\r\n                cameraIndex: [],\r\n            }\r\n        })()\r\n        if (this.child) {\r\n            const childLayout = (layout as ContainerLayout).child!\r\n            const childOffset = {\r\n                x: x0 + this.padding.left,\r\n                y: y0 + this.padding.top\r\n            }\r\n            const childGeometry = this.child.geometry(childLayout, childOffset, cameraStack)\r\n            return containerGeometry(data, childGeometry)\r\n        }\r\n        return containerGeometry(data)\r\n    }\r\n\r\n    * traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        yield { ui: this, layout, geometry, z }\r\n        if (this.child) {\r\n            const childLayout = (layout as ContainerLayout).child!\r\n            const childGeometry = (geometry as ContainerGeometry).child!\r\n            yield* this.child.traverse(childLayout, childGeometry, z + 1)\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly padding?: Padding\r\n    readonly width?: number\r\n    readonly height?: number\r\n    readonly x?: number\r\n    readonly y?: number\r\n    readonly color?: Color\r\n    readonly onClick?: OnClick\r\n    readonly id?: Id\r\n}\r\n\r\nexport const container = ({ padding, width, height, color, x, y, onClick, id }: Properties, child?: UI): Container =>\r\n    new Container(\r\n        padding ?? paddingAll(0),\r\n        width,\r\n        height,\r\n        x,\r\n        y,\r\n        color,\r\n        onClick,\r\n        id,\r\n        child\r\n    )","import { Entry, MeasureText, UI } from \".\"\r\nimport { CrossAxisAlignment, MainAxisAlignment } from \"../alignment\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class RowLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly totalChildWidth: number,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const rowLayout = (size: Size, totalChildWidth: number, children: Layout[]) =>\r\n    new RowLayout(size, totalChildWidth, children)\r\n\r\nexport class RowGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const rowGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new RowGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Row {\r\n    constructor(\r\n        readonly mainAxisAlignment: MainAxisAlignment,\r\n        readonly crossAxisAlignment: CrossAxisAlignment,\r\n        readonly children: UI[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const initialChildren: Layout[] = []\r\n        const initial = {\r\n            children: initialChildren,\r\n            totalChildWidth: 0,\r\n            height: 0\r\n        }\r\n        const result = this.children.reduce((acc, child) => {\r\n            const layout = child.layout(constraints, measureText)\r\n            acc.children.push(layout)\r\n            acc.totalChildWidth += layout.size.width\r\n            acc.height = Math.max(acc.height, layout.size.height)\r\n            return acc\r\n        }, initial)\r\n        const { children, totalChildWidth, height } = result\r\n        const width = this.mainAxisAlignment == MainAxisAlignment.START ? totalChildWidth : constraints.maxWidth\r\n        return rowLayout({ width, height }, totalChildWidth, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const rowLayout = (layout as RowLayout)\r\n        const initialChildren: Geometry[] = []\r\n        const freeSpaceX = layout.size.width - rowLayout.totalChildWidth\r\n        const initial = {\r\n            children: initialChildren,\r\n            x: (() => {\r\n                switch (this.mainAxisAlignment) {\r\n                    case MainAxisAlignment.START: return offset.x\r\n                    case MainAxisAlignment.CENTER: return offset.x + freeSpaceX / 2\r\n                    case MainAxisAlignment.END: return offset.x + freeSpaceX\r\n                    case MainAxisAlignment.SPACE_EVENLY: return offset.x + freeSpaceX / (this.children.length + 1)\r\n                    case MainAxisAlignment.SPACE_BETWEEN: return offset.x\r\n                }\r\n            })(),\r\n        }\r\n        const addXStart = (childLayout: Layout) => childLayout.size.width\r\n        const addXCenter = (childLayout: Layout) => childLayout.size.width\r\n        const addXEnd = (childLayout: Layout) => childLayout.size.width\r\n        const addXSpaceEvenly = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (this.children.length + 1)\r\n        const addXSpaceBetween = (childLayout: Layout) => childLayout.size.width + freeSpaceX / (this.children.length - 1)\r\n        const addX = (() => {\r\n            switch (this.mainAxisAlignment) {\r\n                case MainAxisAlignment.START: return addXStart\r\n                case MainAxisAlignment.CENTER: return addXCenter\r\n                case MainAxisAlignment.END: return addXEnd\r\n                case MainAxisAlignment.SPACE_EVENLY: return addXSpaceEvenly\r\n                case MainAxisAlignment.SPACE_BETWEEN: return addXSpaceBetween\r\n            }\r\n        })()\r\n        const offsetYStart = (_: Layout) => offset.y\r\n        const offsetYCenter = (childLayout: Layout) => offset.y + layout.size.height / 2 - childLayout.size.height / 2\r\n        const offsetYEnd = (childLayout: Layout) => offset.y + layout.size.height - childLayout.size.height\r\n        const offsetY = (() => {\r\n            switch (this.crossAxisAlignment) {\r\n                case CrossAxisAlignment.START: return offsetYStart\r\n                case CrossAxisAlignment.CENTER: return offsetYCenter\r\n                case CrossAxisAlignment.END: return offsetYEnd\r\n            }\r\n        })()\r\n        const result = this.children.reduce((acc, child, i) => {\r\n            const childLayout = rowLayout.children[i]\r\n            const childOffset = { x: acc.x, y: offsetY(childLayout) }\r\n            const childGeometry = child.geometry(childLayout, childOffset, cameraStack)\r\n            acc.children.push(childGeometry)\r\n            acc.x += addX(childLayout)\r\n            return acc\r\n        }, initial)\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height,\r\n        })\r\n        return rowGeometry(worldSpace, result.children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as RowLayout).children\r\n        const childrenGeometry = (geometry as RowGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        const nextZ = z + 1\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            yield* child.traverse(childrenLayout[i], childrenGeometry[i], nextZ)\r\n            i += 1\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly mainAxisAlignment?: MainAxisAlignment\r\n    readonly crossAxisAlignment?: CrossAxisAlignment\r\n}\r\n\r\ntype Overload = {\r\n    (children: UI[]): Row\r\n    (properties: Properties, children: UI[]): Row\r\n}\r\n\r\nexport const row: Overload = (...args: any[]): Row => {\r\n    const [properties, children] = (() =>\r\n        args[0] instanceof Array ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    return new Row(\r\n        properties.mainAxisAlignment ?? MainAxisAlignment.START,\r\n        properties.crossAxisAlignment ?? CrossAxisAlignment.START,\r\n        children\r\n    )\r\n}","import { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\nimport { Mat3 } from \"../linear_algebra\"\r\nimport { Connection, Entry, MeasureText, UI } from \"../ui\"\r\n\r\nexport class SceneLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const sceneLayout = (size: Size, children: Layout[]) =>\r\n    new SceneLayout(size, children)\r\n\r\nexport class SceneGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const sceneGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new SceneGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Scene {\r\n    constructor(\r\n        readonly camera: Mat3,\r\n        readonly children: UI[],\r\n        readonly connections: Connection[]\r\n    ) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const children = this.children.map(c => c.layout(constraints, measureText))\r\n        const width = constraints.maxWidth\r\n        const height = constraints.maxHeight\r\n        return sceneLayout({ width, height }, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height\r\n        })\r\n        const childrenLayout = (layout as SceneLayout).children\r\n        cameraStack.pushCamera(this.camera)\r\n        const children = this.children.map((c, i) => c.geometry(childrenLayout[i], offset, cameraStack))\r\n        cameraStack.popCamera()\r\n        return sceneGeometry(worldSpace, children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as SceneLayout).children\r\n        const childrenGeometry = (geometry as SceneGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            for (const entry of child.traverse(childrenLayout[i], childrenGeometry[i], z)) {\r\n                yield entry\r\n                z = Math.max(z, entry.z)\r\n            }\r\n            i++\r\n            z++\r\n        }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    camera: Mat3\r\n    children: UI[]\r\n    connections?: Connection[]\r\n}\r\n\r\nexport const scene = (properties: Properties): Scene =>\r\n    new Scene(properties.camera, properties.children, properties.connections ?? [])","import { Entry, MeasureText, UI } from \".\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class StackLayout {\r\n    constructor(\r\n        readonly size: Size,\r\n        readonly children: Layout[]\r\n    ) { }\r\n}\r\n\r\nexport const stackLayout = (size: Size, children: Layout[]) =>\r\n    new StackLayout(size, children)\r\n\r\nexport class StackGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n        readonly children: Geometry[]\r\n    ) { }\r\n}\r\n\r\nexport const stackGeometry = (worldSpace: WorldSpace, children: Geometry[]) =>\r\n    new StackGeometry(worldSpace, 0, [], [], [], [], [], children)\r\n\r\nexport class Stack {\r\n    constructor(readonly children: UI[]) { }\r\n\r\n    layout(constraints: Constraints, measureText: MeasureText) {\r\n        const children = this.children.map(c => c.layout(constraints, measureText))\r\n        const width = constraints.maxWidth\r\n        const height = constraints.maxHeight\r\n        return stackLayout({ width, height }, children)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const stackLayout = (layout as StackLayout)\r\n        const children = this.children.map((c, i) => c.geometry(stackLayout.children[i], offset, cameraStack))\r\n        const worldSpace = cameraStack.transformWorldSpace({\r\n            x0: offset.x,\r\n            y0: offset.y,\r\n            x1: offset.x + layout.size.width,\r\n            y1: offset.y + layout.size.height,\r\n        })\r\n        return stackGeometry(worldSpace, children)\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        const childrenLayout = (layout as StackLayout).children\r\n        const childrenGeometry = (geometry as StackGeometry).children\r\n        yield { ui: this, layout, geometry, z }\r\n        let i = 0\r\n        for (const child of this.children) {\r\n            for (const entry of child.traverse(childrenLayout[i], childrenGeometry[i], z)) {\r\n                yield entry\r\n                z = Math.max(z, entry.z)\r\n            }\r\n            i += 1\r\n            z += 1\r\n        }\r\n    }\r\n}\r\n\r\nexport const stack = (children: UI[]): Stack =>\r\n    new Stack(children)","import { Entry, Font, MeasureText, TextMeasurements } from \".\"\r\nimport { CameraStack } from \"../camera_stack\"\r\nimport { Color, rgba } from \"../color\"\r\nimport { Geometry, Offset, WorldSpace } from \"../geometry\"\r\nimport { Constraints, Layout, Size } from \"../layout\"\r\n\r\nexport class TextLayout {\r\n    constructor(\r\n        readonly measurements: TextMeasurements,\r\n        readonly size: Size\r\n    ) { }\r\n}\r\n\r\nexport const textLayout = (measurements: TextMeasurements, size: Size) =>\r\n    new TextLayout(measurements, size)\r\n\r\n\r\nexport class TextGeometry {\r\n    constructor(\r\n        readonly worldSpace: WorldSpace,\r\n        readonly textureIndex: number,\r\n        readonly textureCoordinates: number[],\r\n        readonly colors: number[],\r\n        readonly vertices: number[],\r\n        readonly vertexIndices: number[],\r\n        readonly cameraIndex: number[],\r\n    ) { }\r\n}\r\n\r\ninterface GeometryData {\r\n    readonly worldSpace: WorldSpace\r\n    readonly textureIndex: number\r\n    readonly textureCoordinates: number[]\r\n    readonly colors: number[]\r\n    readonly vertices: number[]\r\n    readonly vertexIndices: number[]\r\n    readonly cameraIndex: number[]\r\n}\r\n\r\nconst vertices = (widths: number[], height: number, offset: Offset) => {\r\n    const result = []\r\n    let offsetX = offset.x\r\n    const y0 = offset.y\r\n    const y1 = offset.y + height\r\n    for (const width of widths) {\r\n        const x0 = offsetX\r\n        const x1 = offsetX + width\r\n        result.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1\r\n        )\r\n        offsetX += width\r\n    }\r\n    return result\r\n}\r\n\r\nconst colors = (n: number, color: Color) => {\r\n    const result = []\r\n    const { r, g, b, a } = color.rgba()\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            r, g, b, a,\r\n            r, g, b, a,\r\n            r, g, b, a,\r\n            r, g, b, a,\r\n        )\r\n    }\r\n    return result\r\n}\r\n\r\nconst vertexIndices = (n: number) => {\r\n    const result = []\r\n    let offset = 0\r\n    for (let i = 0; i < n; ++i) {\r\n        result.push(\r\n            offset, offset + 1, offset + 2,\r\n            offset + 1, offset + 2, offset + 3\r\n        )\r\n        offset += 4\r\n    }\r\n    return result\r\n}\r\n\r\nexport const textGeometry = (data: GeometryData) =>\r\n    new TextGeometry(\r\n        data.worldSpace,\r\n        data.textureIndex,\r\n        data.textureCoordinates,\r\n        data.colors,\r\n        data.vertices,\r\n        data.vertexIndices,\r\n        data.cameraIndex,\r\n    )\r\n\r\nexport class Text {\r\n    constructor(\r\n        readonly font: Font,\r\n        readonly color: Color,\r\n        readonly str: string\r\n    ) { }\r\n\r\n    layout(_: Constraints, measureText: MeasureText) {\r\n        const { font, str } = this\r\n        const measurements = measureText(font, str)\r\n        const width = measurements.widths.reduce((acc, width) => acc + width)\r\n        const size = { width, height: font.size }\r\n        return textLayout(measurements, size)\r\n    }\r\n\r\n    geometry(layout: Layout, offset: Offset, cameraStack: CameraStack) {\r\n        const textLayout = layout as TextLayout\r\n        const { measurements } = textLayout\r\n        const { textureIndex, textureCoordinates, widths } = measurements\r\n        return textGeometry({\r\n            worldSpace: cameraStack.transformWorldSpace({\r\n                x0: offset.x,\r\n                y0: offset.y,\r\n                x1: offset.x + layout.size.width,\r\n                y1: offset.y + layout.size.height\r\n            }),\r\n            textureIndex,\r\n            textureCoordinates: textureCoordinates.flat(),\r\n            colors: colors(widths.length, this.color),\r\n            vertices: vertices(widths, this.font.size, offset),\r\n            vertexIndices: vertexIndices(widths.length),\r\n            cameraIndex: Array(widths.length * 4).fill(cameraStack.activeCamera())\r\n        })\r\n    }\r\n\r\n    *traverse(layout: Layout, geometry: Geometry, z: number): Generator<Entry> {\r\n        yield { ui: this, layout, geometry, z }\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    readonly font?: string\r\n    readonly size?: number\r\n    readonly color?: Color\r\n}\r\n\r\ntype Overload = {\r\n    (str: String): Text\r\n    (properties: Properties, str: String): Text\r\n}\r\n\r\nexport const text: Overload = (...args: any[]): Text => {\r\n    const [properties, str] = (() =>\r\n        typeof args[0] == 'string' ? [{}, args[0]] : [args[0], args[1]]\r\n    )()\r\n    const font = {\r\n        family: properties.font ?? \"monospace\",\r\n        size: properties.size ?? 24\r\n    }\r\n    return new Text(\r\n        font,\r\n        properties.color ?? rgba(255, 255, 255, 255),\r\n        str\r\n    )\r\n}","import { CrossAxisAlignment } from \"./alignment\"\r\nimport { rgba } from \"./color\"\r\nimport { Event, EventKind, update } from \"./event\"\r\nimport { Mat3 } from \"./linear_algebra\"\r\nimport { padding } from \"./padding\"\r\nimport { Dispatch, run, transformPointer } from \"./run\"\r\nimport { Input, Node, Output, State, Theme } from \"./state\"\r\nimport { Connection, UI } from \"./ui\"\r\nimport { column } from \"./ui/column\"\r\nimport { container } from \"./ui/container\"\r\nimport { row } from \"./ui/row\"\r\nimport { scene } from \"./ui/scene\"\r\nimport { stack } from \"./ui/stack\"\r\nimport { text } from \"./ui/text\"\r\n\r\nconst spacer = (size: number) =>\r\n    container({ width: size, height: size })\r\n\r\nconst intersperse = <T>(array: T[], seperator: T): T[] => {\r\n    const result = [array[0]]\r\n    for (const element of array.slice(1)) {\r\n        result.push(seperator, element)\r\n    }\r\n    return result\r\n}\r\n\r\nconst inputUi = (theme: Theme, { name, selected }: Input, nodeIndex: number, inputIndex: number): UI =>\r\n    row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n        container({\r\n            id: `input ${nodeIndex} ${inputIndex}`,\r\n            width: 24,\r\n            height: 24,\r\n            color: selected ? theme.selectedInput : theme.input,\r\n            onClick: () => dispatch({\r\n                kind: EventKind.CLICKED_INPUT,\r\n                inputPath: { nodeIndex: nodeIndex, inputIndex: inputIndex }\r\n            })\r\n        }),\r\n        spacer(10),\r\n        text(name)\r\n    ])\r\n\r\nconst inputsUi = (theme: Theme, inputs: Input[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            inputs.map((input, inputIndex) => inputUi(theme, input, nodeIndex, inputIndex)),\r\n            spacer(10)\r\n        )\r\n    )\r\n\r\nconst outputUi = (theme: Theme, { name, selected }: Output, nodeIndex: number, outputIndex: number): UI =>\r\n    row({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n        text(name),\r\n        spacer(10),\r\n        container({\r\n            id: `output ${nodeIndex} ${outputIndex}`,\r\n            width: 24,\r\n            height: 24,\r\n            color: selected ? theme.selectedInput : theme.input,\r\n            onClick: () => dispatch({\r\n                kind: EventKind.CLICKED_OUTPUT,\r\n                outputPath: { nodeIndex: nodeIndex, outputIndex: outputIndex }\r\n            })\r\n        }),\r\n    ])\r\n\r\nconst outputsUi = (theme: Theme, outputs: Output[], nodeIndex: number) =>\r\n    column(\r\n        intersperse(\r\n            outputs.map((output, outputIndex) => outputUi(theme, output, nodeIndex, outputIndex)),\r\n            spacer(10)\r\n        )\r\n    )\r\n\r\nconst nodeUi = (dispatch: Dispatch<Event>, theme: Theme, { name, x, y, inputs, outputs }: Node, index: number) => {\r\n    const rowEntries: UI[] = []\r\n    if (inputs.length) rowEntries.push(inputsUi(theme, inputs, index))\r\n    if (inputs.length && outputs.length) rowEntries.push(spacer(30))\r\n    if (outputs.length) rowEntries.push(outputsUi(theme, outputs, index))\r\n    return container({\r\n        color: theme.node,\r\n        padding: padding(10),\r\n        x, y,\r\n        onClick: () => dispatch({\r\n            kind: EventKind.CLICKED_NODE,\r\n            index: index\r\n        })\r\n    },\r\n        column({ crossAxisAlignment: CrossAxisAlignment.CENTER }, [\r\n            text(name),\r\n            spacer(10),\r\n            row(rowEntries)\r\n        ])\r\n    )\r\n}\r\n\r\nconst view = (dispatch: Dispatch<Event>, state: State) => {\r\n    const nodes: UI[] = []\r\n    state.graph.nodes.forEach((node, i) => {\r\n        if (i !== state.draggedNode) nodes.push(nodeUi(dispatch, state.theme, node, i))\r\n    })\r\n    if (state.draggedNode !== null) {\r\n        const i = state.draggedNode\r\n        nodes.push(nodeUi(dispatch, state.theme, state.graph.nodes[i], i))\r\n    }\r\n    const connections: Connection[] = state.graph.edges.map(({ input, output }) => ({\r\n        from: `output ${output.nodeIndex} ${output.outputIndex}`,\r\n        to: `input ${input.nodeIndex} ${input.inputIndex}`,\r\n        color: state.theme.connection\r\n    }))\r\n    return stack([\r\n        container({ color: state.theme.background }),\r\n        scene({ camera: state.camera, children: nodes, connections }),\r\n    ])\r\n}\r\n\r\nconst initialState: State = {\r\n    graph: {\r\n        nodes: [\r\n            {\r\n                name: \"Source\",\r\n                inputs: [],\r\n                outputs: [\r\n                    { name: \"Out 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"Out 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                x: 100,\r\n                y: 200\r\n            },\r\n            {\r\n                name: \"Transform\",\r\n                inputs: [\r\n                    { name: \"In 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"In 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                outputs: [\r\n                    { name: \"Out 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"Out 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                x: 400,\r\n                y: 300\r\n            },\r\n            {\r\n                name: \"Sink\",\r\n                inputs: [\r\n                    { name: \"In 1\", selected: false, edgeIndices: [] },\r\n                    { name: \"In 2\", selected: false, edgeIndices: [] }\r\n                ],\r\n                outputs: [],\r\n                x: 800,\r\n                y: 250\r\n            },\r\n        ],\r\n        edges: []\r\n    },\r\n    dragging: false,\r\n    draggedNode: null,\r\n    pointers: [],\r\n    pointerDistance: 0,\r\n    pointerCenter: [0, 0],\r\n    camera: Mat3.identity(),\r\n    selectedOutput: null,\r\n    selectedInput: null,\r\n    theme: {\r\n        background: rgba(1, 22, 39, 255),\r\n        node: rgba(41, 95, 120, 255),\r\n        input: rgba(188, 240, 192, 255),\r\n        selectedInput: rgba(175, 122, 208, 255),\r\n        connection: rgba(255, 255, 255, 255),\r\n    },\r\n}\r\n\r\nconst dispatch = run(initialState, view, update)\r\n\r\nif (typeof PointerEvent.prototype.getCoalescedEvents === 'function') {\r\n    document.addEventListener('pointermove', (e) => {\r\n        e.getCoalescedEvents().forEach(p => {\r\n            dispatch({\r\n                kind: EventKind.POINTER_MOVE,\r\n                pointer: transformPointer(p)\r\n            })\r\n        })\r\n    })\r\n} else {\r\n    document.addEventListener('pointermove', p =>\r\n        dispatch({\r\n            kind: EventKind.POINTER_MOVE,\r\n            pointer: transformPointer(p)\r\n        })\r\n    )\r\n}\r\n\r\ndocument.addEventListener(\"pointerdown\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_DOWN,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener(\"pointerup\", p => {\r\n    dispatch({\r\n        kind: EventKind.POINTER_UP,\r\n        pointer: transformPointer(p)\r\n    })\r\n})\r\n\r\ndocument.addEventListener('wheel', e => {\r\n    e.preventDefault()\r\n    dispatch({\r\n        kind: EventKind.WHEEL,\r\n        x: e.clientX,\r\n        y: e.clientY,\r\n        deltaY: e.deltaY,\r\n    })\r\n}, { passive: false })\r\n\r\ndocument.addEventListener('contextmenu', e => {\r\n    e.preventDefault()\r\n})\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    document.body.requestFullscreen()\r\n})"],"names":["$38d7a2dac5bc7fa9$export$6595504a60e1f77c","MainAxisAlignment1","$38d7a2dac5bc7fa9$export$66a3248d846611ce","CrossAxisAlignment1","$5b55f105e5908397$export$10de0a9b1528b6e","constructor","r","g","b","a","rgba","this","$5b55f105e5908397$export$4e46ac54fc82cf3b","$a26733d1baff63db$export$838423f3adec30fa","data","length","c","Math","sqrt","pow","$a26733d1baff63db$export$83f4edd572c84121","matMul","other","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","vecMul","b1","b2","b3","inverse","idet","static","width","height","x","y","radians","cos","s","sin","$d7336fab2a6e7c56$export$50508d7849040d51","EventKind1","$810e59d520bce11e$export$8ee6ea94b5aedb49","top","right","bottom","left","$810e59d520bce11e$export$6f98e8eaf0be1996","value","$f97aa2d16f86c383$var$inWorldSpace","x0","y0","x1","y1","pointer","$f97aa2d16f86c383$export$e6e29dfeb5ef19c1","renderer","i","clickHandlers","onClick","worldSpace","$db98e7c147af88a3$var$newBatch","textureIndex","vertices","colors","vertexIndices","textureCoordinates","cameraIndex","$db98e7c147af88a3$export$1e96939139b396da","layers","batches","batch","layer","geometries","push","geometry","offset","index","$14955c3b2c9570b5$export$e6fddfd45b239a42","camera","identity","cameras","stack","transform","pushCamera","popCamera","pop","activeCamera","slice","transformWorldSpace","_0","_1","$cecff29ae76c43d7$export$533b26079ad0b4b","ui","layout","reducer","accumulator","initial","entry","traverse","combine","$c7f5b399ef6aea66$export$390ef945b5a425a7","lookup","id","$45d6bbdb80ff139b$var$cubicBezier","ts","from","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","first","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$45d6bbdb80ff139b$export$48a436e09c0b8a4d","connections","idToWorldSpace","start","stop","num","step","Array","_","$45d6bbdb80ff139b$var$linspace","color","p","samples","$f0ab672d0c96c5dc$export$8c1d7deec90f08c1","needed","z","Map","get","newGeometry","set","$f0ab672d0c96c5dc$export$707dc0d5406a403a","handlers","$f0ab672d0c96c5dc$export$1c1147d11a715c65","$f0ab672d0c96c5dc$export$1650419e431d3ba3","acc","$f0ab672d0c96c5dc$export$b3890eb0ae9dca99","size","clear","constraints","minWidth","maxWidth","minHeight","maxHeight","measureText","cameraStack","lines","draw","drawLines","$30cee85f95a8e397$export$ce2766bf4a8721d3","canvas","gl1","program1","textures1","textMeasurementsCache","gl","program","textures","COLOR_BUFFER_BIT","attributes","texture","bindTexture","TEXTURE_2D","bindBuffer","ARRAY_BUFFER","buffer","bufferData","Float32Array","STATIC_DRAW","Uint8Array","ELEMENT_ARRAY_BUFFER","Uint16Array","drawElements","TRIANGLES","UNSIGNED_SHORT","count","fill","drawArrays","LINES","getTextureMeasurements","font","dpr","key","family","measurements","widths","document","createElement","ctx","getContext","rows","current","$30cee85f95a8e397$var$nearestPowerOfTwo","cellSize","style","scale","textAlign","textBaseline","fillStyle","clearRect","String","fromCharCode","metric","ceil","floor","fillText","createTexture","texImage2D","RGBA","UNSIGNED_BYTE","generateMipmap","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","$30cee85f95a8e397$var$createTextMeasurements","newMeasurements","str","window","devicePixelRatio","indices","f","result","$30cee85f95a8e397$var$mapString","charCodeAt","map","uniforms","uniformMatrix3fv","projection","viewport","_size","_cameras","location","createBuffer","vertexShader","vertexShaderSource","createShader","VERTEX_SHADER","shaderSource","compileShader","$30cee85f95a8e397$var$createVertexShader","fragmentShader","FRAGMENT_SHADER","$30cee85f95a8e397$var$createFragmentShader","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","console","log","getShaderInfoLog","useProgram","vertexArrayObject","createVertexArray","bindVertexArray","FLOAT","$30cee85f95a8e397$var$bindVertices","$30cee85f95a8e397$var$bindColors","bindAttribLocation","enableVertexAttribArray","vertexAttribPointer","$30cee85f95a8e397$var$bindTextureCoordinates","vertexAttribIPointer","getUniformLocation","$6119d70cc28f8b94$export$479aac53993fd71","clientX","clientY","pointerId","$518015a6e3cc694d$export$c7e5bac7049eee2a","totalChildHeight","children","$518015a6e3cc694d$export$dfd18615cd7e86d6","$518015a6e3cc694d$export$816b5d811295e6bc","mainAxisAlignment","crossAxisAlignment","reduce","child","max","$518015a6e3cc694d$export$f8ce731bdfd45dc7","START","columnLayout1","freeSpaceY","CENTER","END","SPACE_EVENLY","SPACE_BETWEEN","addYStart","childLayout","addYCenter","addYEnd","addYSpaceEvenly","addYSpaceBetween","addY","offsetXStart","offsetXCenter","offsetXEnd","offsetX","childOffset","childGeometry","$518015a6e3cc694d$export$5a1548308f4d4391","childrenLayout","childrenGeometry","nextZ","$518015a6e3cc694d$export$4e0c71f277ca26b3","args","properties","$8a99d960732a172f$export$26c271df922a3d3c","$8a99d960732a172f$export$a4e80cd8d85917bb","$8a99d960732a172f$export$76c47790527e6c8a","$8a99d960732a172f$export$7c88ce694bad6320","$8a99d960732a172f$export$42a852a2b6b56249","padding","$8a99d960732a172f$export$34e0f9847d4c02dd","$9e4edab979495f0d$export$593b1ed5b05b470","totalChildWidth","$9e4edab979495f0d$export$aef74122d3baefd6","$9e4edab979495f0d$export$b59bdbef9ce70de2","$9e4edab979495f0d$export$4076779b9674714b","rowLayout1","freeSpaceX","addXStart","addXCenter","addXEnd","addXSpaceEvenly","addXSpaceBetween","addX","offsetYStart","offsetYCenter","offsetYEnd","offsetY","$9e4edab979495f0d$export$90e65e88c1393562","$9e4edab979495f0d$export$120ff0929b202a6d","$864b15efd9f5e1a7$export$183888ffeb127955","$864b15efd9f5e1a7$export$cbdc2ca6cb1fbaf1","$864b15efd9f5e1a7$export$38af1803e3442a7f","$864b15efd9f5e1a7$export$9e03d30774b30061","$864b15efd9f5e1a7$export$7a4266c2aa024d65","$d380360335f9e6c0$export$4a33896fea5f6057","$d380360335f9e6c0$export$288eb08f379bb85f","$d380360335f9e6c0$export$694e0d28c7ffc90c","$d380360335f9e6c0$export$b008c3d2ea57ca56","stackLayout1","$d380360335f9e6c0$export$218db93a2e8965d","$2d5075f154be1094$export$211e101f90b3ed3","$2d5075f154be1094$export$684b774b4473ba5f","colors1","vertices1","vertexIndices1","$2d5075f154be1094$var$vertices","$2d5075f154be1094$var$colors","n","$2d5075f154be1094$var$vertexIndices","$2d5075f154be1094$export$5f1af8db9871e1d6","width1","$2d5075f154be1094$export$801f12fcd9ba2788","textLayout1","flat","$2d5075f154be1094$export$6f093cfa640b7166","$b4e14b6b8da86996$var$spacer","$b4e14b6b8da86996$var$intersperse","array","seperator","element","$b4e14b6b8da86996$var$inputsUi","theme","inputs","nodeIndex","input","inputIndex","name","selected","selectedInput","$b4e14b6b8da86996$var$dispatch","kind","CLICKED_INPUT","inputPath","$b4e14b6b8da86996$var$inputUi","$b4e14b6b8da86996$var$outputsUi","outputs","output","outputIndex","CLICKED_OUTPUT","outputPath","$b4e14b6b8da86996$var$outputUi","$b4e14b6b8da86996$var$nodeUi","dispatch1","rowEntries","node","CLICKED_NODE","state","view","update","$30cee85f95a8e397$export$94781114c991ae1c","innerWidth","innerHeight","renderQueued","scheduleRender","requestAnimationFrame","dispatch","event","newState","rerender","body","appendChild","addEventListener","graph","nodes","edgeIndices","edges","dragging","draggedNode","pointers","pointerDistance","pointerCenter","selectedOutput","background","connection","dispatch2","forEach","POINTER_DOWN","$d7336fab2a6e7c56$var$pointerDown","POINTER_UP","findIndex","splice","$d7336fab2a6e7c56$var$pointerUp","POINTER_MOVE","dx","dy","scaling","translate","p0","p1","x2","y2","distance","previousDistance","previousCenter","move","zoom","moveBack","$d7336fab2a6e7c56$var$pointerMove","$d7336fab2a6e7c56$var$clickedNode","WHEEL","deltaY","$d7336fab2a6e7c56$var$wheel","edgeIndex","$d7336fab2a6e7c56$var$clickedInput","$d7336fab2a6e7c56$var$clickedOutput","PointerEvent","prototype","getCoalescedEvents","e","preventDefault","passive","requestFullscreen"],"version":3,"file":"index.c65c7100.js.map"}