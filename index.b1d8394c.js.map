{"mappings":"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","sources":["src/components.ts","src/linear_algebra.ts","src/renderer.ts","src/systems/render.ts","src/systems/layout.ts","src/layers.ts","src/systems/geometry.ts","src/systems/ray_cast.ts","src/systems/pointerDown.ts","src/systems/pointerMove.ts","src/systems/pointerUp.ts","src/systems/init.ts","src/ui/text.ts","src/ui/center.ts","src/ui/column.ts","src/ui/row.ts","src/ui/container.ts","src/ui/connection.ts","src/ui/scene.ts","src/ecs.ts","src/index.ts"],"sourcesContent":["import { Entity } from \"./ecs\";\r\nimport { Layers } from \"./layers\";\r\nimport { Mat3 } from \"./linear_algebra\";\r\n\r\nexport class UIRoot { constructor(public entity: Entity) { } }\r\n\r\nexport class Text { constructor(public value: string) { } }\r\n\r\nexport class FontSize { constructor(public value: number) { } }\r\n\r\nexport class FontFamily { constructor(public value: string) { } }\r\n\r\nexport class Child { constructor(public entity: Entity) { } }\r\n\r\nexport class Children { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Connections { constructor(public entities: Entity[]) { } }\r\n\r\nexport class Camera { constructor(public entity: Entity) { } }\r\n\r\nexport enum Alignment { START, CENTER, END }\r\n\r\nexport class CrossAxisAlignment { constructor(public alignment: Alignment) { } }\r\n\r\nexport class Width { constructor(public value: number) { } }\r\n\r\nexport class Height { constructor(public value: number) { } }\r\n\r\nexport class Translate {\r\n    constructor(public x: number, public y: number) { }\r\n}\r\n\r\nexport class Transform { constructor(public matrix: Mat3) { } }\r\n\r\nexport class Zoom {\r\n    constructor(\r\n        public scale: number,\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n}\r\n\r\nexport class From { constructor(public entity: Entity) { } }\r\n\r\nexport class To { constructor(public entity: Entity) { } }\r\n\r\nexport interface Hsla {\r\n    h: number\r\n    s: number\r\n    l: number\r\n    a: number\r\n}\r\n\r\nexport class Color {\r\n    h: number\r\n    s: number\r\n    l: number\r\n    a: number\r\n\r\n    constructor({ h, s, l, a }: Hsla) {\r\n        this.h = h\r\n        this.s = s\r\n        this.l = l\r\n        this.a = a\r\n    }\r\n}\r\n\r\nexport class Padding { constructor(public value: number) { } }\r\n\r\nexport class Constraints {\r\n    constructor(\r\n        public minWidth: number,\r\n        public maxWidth: number,\r\n        public minHeight: number,\r\n        public maxHeight: number\r\n    ) { }\r\n}\r\n\r\nexport class Size {\r\n    constructor(\r\n        public width: number,\r\n        public height: number,\r\n    ) { }\r\n}\r\n\r\nexport class Offset {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n    ) { }\r\n\r\n    add = (other: Offset) => new Offset(this.x + other.x, this.y + other.y)\r\n}\r\n\r\nexport class Layout {\r\n    constructor(\r\n        private impl: (self: Entity, constraints: Constraints) => Size\r\n    ) { }\r\n\r\n    layout = (self: Entity, constraints: Constraints) =>\r\n        this.impl(self, constraints)\r\n}\r\n\r\nexport class WorldSpace {\r\n    constructor(\r\n        public x: number,\r\n        public y: number,\r\n        public width: number,\r\n        public height: number\r\n    ) { }\r\n}\r\n\r\nexport class Vertices { constructor(public data: number[]) { } }\r\n\r\nexport class TextureCoordinates { constructor(public data: number[]) { } }\r\n\r\nexport class Colors { constructor(public data: number[]) { } }\r\n\r\nexport class VertexIndices { constructor(public data: number[]) { } }\r\n\r\nexport class CameraIndices { constructor(public data: number[]) { } }\r\n\r\nexport class Geometry {\r\n    constructor(\r\n        private impl: (self: Entity, parentOffset: Offset, layers: Layers, z: number) => void\r\n    ) { }\r\n\r\n    geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) =>\r\n        this.impl(self, parentOffset, layers, z)\r\n}\r\n\r\nexport type OnDragCallback = (entity: Entity, x: number, y: number) => void\r\n\r\nexport class OnDrag { constructor(public callback: OnDragCallback) { } }\r\n\r\nexport type OnClickCallback = (entity: Entity) => void\r\n\r\nexport class OnClick { constructor(public callback: OnClickCallback) { } }\r\n\r\nexport class Pointers {\r\n    constructor(public events: PointerEvent[]) { }\r\n}\r\n\r\nexport class PointerDistance {\r\n    constructor(public value: number) { }\r\n}\r\n\r\nexport class Dragging {\r\n    constructor(public value: boolean) { }\r\n}\r\n\r\nexport class DraggedEntity {\r\n    constructor(public entity: Entity | null) { }\r\n}","export class Vec3 {\r\n    constructor(public data: number[]) { }\r\n}\r\n\r\nexport class Mat3 {\r\n    constructor(public data: number[]) { }\r\n\r\n    static identity = () => new Mat3([\r\n        1, 0, 0,\r\n        0, 1, 0,\r\n        0, 0, 1,\r\n    ])\r\n\r\n    static projection = (width: number, height: number) => new Mat3([\r\n        2 / width, 0, -1,\r\n        0, -2 / height, 1,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static translation = (x: number, y: number) => new Mat3([\r\n        1, 0, x,\r\n        0, 1, y,\r\n        0, 0, 1\r\n    ])\r\n\r\n    static rotation = (radians: number) => {\r\n        const c = Math.cos(radians)\r\n        const s = Math.sin(radians)\r\n        return new Mat3([\r\n            c, s, 0,\r\n            -s, c, 0,\r\n            0, 0, 1\r\n        ])\r\n    }\r\n\r\n    static scaling = (x: number, y: number) => new Mat3([\r\n        x, 0, 0,\r\n        0, y, 0,\r\n        0, 0, 1\r\n    ])\r\n\r\n    matMul = (other: Mat3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = b[0]\r\n        const b12 = b[1]\r\n        const b13 = b[2]\r\n        const b21 = b[3]\r\n        const b22 = b[4]\r\n        const b23 = b[5]\r\n        const b31 = b[6]\r\n        const b32 = b[7]\r\n        const b33 = b[8]\r\n        const c11 = a11 * b11 + a12 * b21 + a13 * b31\r\n        const c12 = a11 * b12 + a12 * b22 + a13 * b32\r\n        const c13 = a11 * b13 + a12 * b23 + a13 * b33\r\n        const c21 = a21 * b11 + a22 * b21 + a23 * b31\r\n        const c22 = a21 * b12 + a22 * b22 + a23 * b32\r\n        const c23 = a21 * b13 + a22 * b23 + a23 * b33\r\n        const c31 = a31 * b11 + a32 * b21 + a33 * b31\r\n        const c32 = a31 * b12 + a32 * b22 + a33 * b32\r\n        const c33 = a31 * b13 + a32 * b23 + a33 * b33\r\n        return new Mat3([\r\n            c11, c12, c13,\r\n            c21, c22, c23,\r\n            c31, c32, c33,\r\n        ])\r\n    }\r\n\r\n    vecMul = (other: Vec3) => {\r\n        const a = this.data\r\n        const b = other.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b1 = b[0]\r\n        const b2 = b[1]\r\n        const b3 = b[2]\r\n        const c1 = a11 * b1 + a12 * b2 + a13 * b3\r\n        const c2 = a21 * b1 + a22 * b2 + a23 * b3\r\n        const c3 = a31 * b1 + a32 * b2 + a33 * b3\r\n        return new Vec3([c1, c2, c3])\r\n    }\r\n\r\n    inverse = () => {\r\n        const a = this.data\r\n        const a11 = a[0]\r\n        const a12 = a[1]\r\n        const a13 = a[2]\r\n        const a21 = a[3]\r\n        const a22 = a[4]\r\n        const a23 = a[5]\r\n        const a31 = a[6]\r\n        const a32 = a[7]\r\n        const a33 = a[8]\r\n        const b11 = a22 * a33 - a23 * a32\r\n        const b12 = a21 * a33 - a23 * a31\r\n        const b13 = a21 * a32 - a22 * a31\r\n        const b21 = a12 * a33 - a13 * a32\r\n        const b22 = a11 * a33 - a13 * a31\r\n        const b23 = a11 * a32 - a12 * a31\r\n        const b31 = a12 * a23 - a13 * a22\r\n        const b32 = a11 * a23 - a13 * a21\r\n        const b33 = a11 * a22 - a12 * a21\r\n        const det = a31 * b31 - a32 * b32 + a33 * b33\r\n        const idet = 1 / det\r\n        return new Mat3([\r\n            idet * b11, idet * -b21, idet * b31,\r\n            idet * -b12, idet * b22, idet * -b32,\r\n            idet * b13, idet * -b23, idet * b33\r\n        ])\r\n    }\r\n}","import { Mat3 } from \"./linear_algebra\"\r\n\r\nclass DefaultProgram {\r\n    positionBuffer: WebGLBuffer\r\n    colorBuffer: WebGLBuffer\r\n    textureCoordinatesBuffer: WebGLBuffer\r\n    indexBuffer: WebGLBuffer\r\n    resolutionLocation: WebGLUniformLocation\r\n    devicePixelRatioLocation: WebGLUniformLocation\r\n    matricesLocation: WebGLUniformLocation\r\n    matrixIndexBuffer: WebGLBuffer\r\n\r\n    constructor(gl: WebGL2RenderingContext) {\r\n        const aPositionLocation = 0\r\n        const aTextureCoordinatesLocation = 1\r\n        const aColorLocation = 2\r\n        const aMatrixIndexLocation = 3\r\n\r\n        const vertexShaderSource = `#version 300 es\r\n  uniform float u_devicePixelRatio;\r\n  uniform mat3 u_matrices[10];\r\n\r\n  layout(location = ${aPositionLocation}) in vec2 a_position;\r\n  layout(location = ${aTextureCoordinatesLocation}) in vec2 a_textureCoordinates;\r\n  layout(location = ${aColorLocation}) in vec4 a_color;\r\n  layout(location = ${aMatrixIndexLocation}) in uint a_matrixIndex;\r\n\r\n  out vec2 v_textureCoordinates;\r\n  out vec4 v_color;\r\n\r\n  void main() {\r\n    gl_Position = vec4((u_matrices[a_matrixIndex] * vec3(a_position, 1)).xy, 0, 1);\r\n    v_textureCoordinates = a_textureCoordinates * u_devicePixelRatio;\r\n    v_color = a_color;\r\n  }\r\n  `\r\n        const fragmentShaderSource = `#version 300 es\r\n  precision highp float;\r\n\r\n  uniform sampler2D u_texture;\r\n\r\n  in vec2 v_textureCoordinates;\r\n  in vec4 v_color;\r\n\r\n  out vec4 fragColor;\r\n  \r\n  vec4 hslToRgb(in vec4 hsl) {\r\n    float h = hsl.x / 360.0;\r\n    vec3 rgb = clamp(abs(mod(h * 6.0 + vec3(0.0,4.0,2.0), 6.0) - 3.0) - 1.0, 0.0, 1.0);\r\n    return vec4(hsl.z + hsl.y * (rgb - 0.5) * (1.0 - abs(2.0 * hsl.z - 1.0)), hsl.w);\r\n  }\r\n\r\n  void main() {\r\n    ivec2 size = textureSize(u_texture, 0);\r\n    vec2 coordinate = v_textureCoordinates / vec2(float(size.x), float(size.y));\r\n    fragColor = texture(u_texture, coordinate) * hslToRgb(v_color);\r\n  }\r\n  `\r\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER)!\r\n        gl.shaderSource(vertexShader, vertexShaderSource)\r\n        gl.compileShader(vertexShader)\r\n\r\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER)!\r\n        gl.shaderSource(fragmentShader, fragmentShaderSource)\r\n        gl.compileShader(fragmentShader)\r\n\r\n        const program = gl.createProgram()!\r\n        gl.attachShader(program, vertexShader)\r\n        gl.attachShader(program, fragmentShader)\r\n        gl.linkProgram(program)\r\n\r\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\r\n            console.log(gl.getShaderInfoLog(vertexShader))\r\n            console.log(gl.getShaderInfoLog(fragmentShader))\r\n        }\r\n\r\n        gl.useProgram(program)\r\n\r\n        const vertexArrayObject = gl.createVertexArray()!\r\n        gl.bindVertexArray(vertexArrayObject)\r\n\r\n        this.positionBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aPositionLocation, 'a_position')\r\n        gl.enableVertexAttribArray(aPositionLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer)\r\n        gl.vertexAttribPointer(\r\n            aPositionLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.textureCoordinatesBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aTextureCoordinatesLocation, 'a_textureCoordinates')\r\n        gl.enableVertexAttribArray(aTextureCoordinatesLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.textureCoordinatesBuffer)\r\n        gl.vertexAttribPointer(\r\n            aTextureCoordinatesLocation,\r\n        /*size*/2,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.colorBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aColorLocation, 'a_color')\r\n        gl.enableVertexAttribArray(aColorLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.colorBuffer)\r\n        gl.vertexAttribPointer(\r\n            aColorLocation,\r\n        /*size*/4,\r\n        /*type*/gl.FLOAT,\r\n        /*normalize*/false,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.matrixIndexBuffer = gl.createBuffer()!\r\n        gl.bindAttribLocation(program, aMatrixIndexLocation, 'a_matrixIndex')\r\n        gl.enableVertexAttribArray(aMatrixIndexLocation)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.matrixIndexBuffer)\r\n        gl.vertexAttribIPointer(\r\n            aMatrixIndexLocation,\r\n        /*size*/1,\r\n        /*type*/gl.UNSIGNED_BYTE,\r\n        /*stride*/0,\r\n        /*offset*/0\r\n        )\r\n\r\n        this.indexBuffer = gl.createBuffer()!\r\n        this.devicePixelRatioLocation = gl.getUniformLocation(program, 'u_devicePixelRatio')!\r\n        this.matricesLocation = gl.getUniformLocation(program, 'u_matrices')!\r\n    }\r\n}\r\n\r\nconst nearestPowerOfTwo = (x: number): number => {\r\n    let current = 1\r\n    while (current < x) {\r\n        current <<= 1\r\n    }\r\n    return current\r\n}\r\n\r\ninterface Metric {\r\n    x: number\r\n    y: number\r\n    width: number\r\n    height: number\r\n}\r\n\r\nclass FontAtlas {\r\n    constructor(\r\n        public texture: number,\r\n        public metrics: Metric[],\r\n        public fontFamily: string,\r\n        public fontSize: number,\r\n    ) { }\r\n\r\n    metric = (c: string) => this.metrics[c.charCodeAt(0)]\r\n}\r\n\r\ninterface DrawData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    vertexIndices: number[]\r\n    cameraIndices: number[]\r\n}\r\n\r\ninterface DrawLineData {\r\n    vertices: number[]\r\n    colors: number[]\r\n    textureCoordinates: number[]\r\n    cameraIndices: number[]\r\n}\r\n\r\nconst createFontMetrics = (gl: WebGL2RenderingContext, texture: WebGLTexture, font: string, fontSize: number) => {\r\n    const canvas = document.createElement('canvas')\r\n    const ctx = canvas.getContext('2d')!\r\n    const totalCells = 256\r\n    const rows = Math.sqrt(totalCells)\r\n    const size = nearestPowerOfTwo(fontSize * rows)\r\n    const cellSize = size / rows\r\n    canvas.width = size * window.devicePixelRatio\r\n    canvas.height = size * window.devicePixelRatio\r\n    canvas.style.width = `${size}px`\r\n    canvas.style.height = `${size}px`\r\n    ctx.scale(window.devicePixelRatio, window.devicePixelRatio)\r\n    ctx.textAlign = 'left'\r\n    ctx.textBaseline = 'top'\r\n    ctx.font = font\r\n    ctx.fillStyle = 'white'\r\n    const ascii = Array.from({ length: totalCells }, (v, i) => i)\r\n    const chars = ascii.map(c => String.fromCharCode(c))\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    const metrics = chars.map((c, i) => {\r\n        const metric = ctx.measureText(c)\r\n        const width = Math.ceil(metric.width)\r\n        const height = fontSize\r\n        const x = i % rows * cellSize\r\n        const y = Math.floor(i / rows) * cellSize\r\n        ctx.fillText(c, x, y)\r\n        return {\r\n            x: x,\r\n            y: y,\r\n            width: width,\r\n            height: height\r\n        }\r\n    })\r\n    gl.bindTexture(gl.TEXTURE_2D, texture)\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*source*/canvas)\r\n    gl.generateMipmap(gl.TEXTURE_2D)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE)\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE)\r\n    return metrics\r\n}\r\n\r\nexport class Renderer {\r\n    gl: WebGL2RenderingContext\r\n    canvas: HTMLCanvasElement\r\n    program: DefaultProgram\r\n    width: number\r\n    height: number\r\n    fontAtlasses: Map<string, FontAtlas>\r\n    textures: WebGLTexture[]\r\n    devicePixelRatio: number\r\n\r\n    constructor(width: number, height: number) {\r\n        const canvas = document.createElement('canvas')\r\n        canvas.style.touchAction = 'none'\r\n        const gl = canvas.getContext('webgl2')!\r\n        gl.clearColor(0.0, 0.0, 0.0, 1.0)\r\n        gl.enable(gl.BLEND)\r\n        gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)\r\n        gl.depthMask(false)\r\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true)\r\n        gl.activeTexture(gl.TEXTURE0)\r\n        this.gl = gl\r\n        this.canvas = canvas\r\n        this.program = new DefaultProgram(gl)\r\n        this.fontAtlasses = new Map()\r\n        this.textures = []\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.setSize(width, height)\r\n        const texture = gl.createTexture()!\r\n        gl.bindTexture(gl.TEXTURE_2D, texture)\r\n        gl.texImage2D(\r\n            gl.TEXTURE_2D,\r\n      /*mipLevel*/0,\r\n      /*internalformat*/gl.RGBA,\r\n      /*width*/1,\r\n      /*height*/1,\r\n      /*border*/0,\r\n      /*srcFormat*/gl.RGBA,\r\n      /*srcType*/gl.UNSIGNED_BYTE,\r\n      /*data*/new Uint8Array([255, 255, 255, 255]))\r\n        this.textures.push(texture)\r\n    }\r\n\r\n    setSize = (width: number, height: number) => {\r\n        const { gl, canvas } = this\r\n        canvas.width = width * window.devicePixelRatio\r\n        canvas.height = height * window.devicePixelRatio\r\n        gl.uniform2f(this.program.resolutionLocation, canvas.width, canvas.height)\r\n        gl.uniform1f(this.program.devicePixelRatioLocation, window.devicePixelRatio)\r\n        gl.viewport(0, 0, canvas.width, canvas.height)\r\n        this.width = width\r\n        this.height = height\r\n        if (this.devicePixelRatio == window.devicePixelRatio) return\r\n        this.devicePixelRatio = window.devicePixelRatio\r\n        this.recreateFontAtlasses()\r\n    }\r\n\r\n    clear = () => {\r\n        const { gl } = this\r\n        gl.clear(gl.COLOR_BUFFER_BIT)\r\n    }\r\n\r\n    setMatrices = (matrices: Mat3[]) => {\r\n        const { gl } = this\r\n        const data: number[] = []\r\n        for (const matrix of matrices) {\r\n            data.push(...matrix.data)\r\n        }\r\n        gl.uniformMatrix3fv(this.program.matricesLocation, /*transpose*/true, /*data*/data)\r\n    }\r\n\r\n    draw = ({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices }: DrawData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Uint16Array(vertexIndices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.matrixIndexBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndices), gl.STATIC_DRAW)\r\n        gl.drawElements(gl.TRIANGLES, /*count*/vertexIndices.length, /*type*/gl.UNSIGNED_SHORT, /*offset*/0)\r\n    }\r\n\r\n    drawLines = ({ vertices, colors, textureCoordinates, cameraIndices }: DrawLineData) => {\r\n        const { gl, program } = this\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.positionBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.colorBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(colors), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.textureCoordinatesBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(textureCoordinates), gl.STATIC_DRAW)\r\n        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, program.indexBuffer)\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, program.matrixIndexBuffer)\r\n        gl.bufferData(gl.ARRAY_BUFFER, new Uint8Array(cameraIndices), gl.STATIC_DRAW)\r\n        gl.drawArrays(gl.LINES, 0, vertices.length / 2)\r\n    }\r\n\r\n    recreateFontAtlasses = () => {\r\n        for (const [font, fontAtlas] of this.fontAtlasses) {\r\n            const texture = this.textures[fontAtlas.texture]\r\n            const metrics = createFontMetrics(this.gl, texture, font, fontAtlas.fontSize)\r\n            fontAtlas.metrics = metrics\r\n        }\r\n    }\r\n\r\n    fontAtlas = (fontFamily: string, fontSize: number): FontAtlas => {\r\n        const font = `${fontSize}px ${fontFamily}`\r\n        const atlas = this.fontAtlasses.get(font)\r\n        if (atlas) return atlas\r\n        const { gl } = this\r\n        const texture = gl.createTexture()!\r\n        const metrics = createFontMetrics(gl, texture, font, fontSize)\r\n        const textureIndex = this.textures.length\r\n        this.textures.push(texture)\r\n        const newAtlas = new FontAtlas(textureIndex, metrics, fontFamily, fontSize)\r\n        this.fontAtlasses.set(font, newAtlas)\r\n        return newAtlas\r\n    }\r\n}","import { Renderer } from \"../renderer\";\r\nimport { ECS } from \"../ecs\";\r\nimport { CameraIndices, Colors, TextureCoordinates, VertexIndices, Vertices } from \"../components\";\r\nimport { Layers } from \"../layers\";\r\nimport { layout, geometry } from './'\r\nimport { Mat3 } from \"../linear_algebra\";\r\n\r\nconst renderTriangles = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let vertexIndices: number[] = []\r\n    let cameraIndices: number[] = []\r\n    let previousTexture: number = -1\r\n    for (const layer of layers.layers) {\r\n        for (const [texture, entities] of layer) {\r\n            if (texture != previousTexture) {\r\n                if (vertices.length) {\r\n                    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices })\r\n                    vertices = []\r\n                    colors = []\r\n                    textureCoordinates = []\r\n                    vertexIndices = []\r\n                    cameraIndices = []\r\n                }\r\n                previousTexture = texture\r\n                gl.bindTexture(gl.TEXTURE_2D, renderer.textures[texture])\r\n            }\r\n            for (const entity of entities) {\r\n                const offset = vertices.length / 2\r\n                vertices.push(...entity.get(Vertices)!.data)\r\n                colors.push(...entity.get(Colors)!.data)\r\n                textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n                for (const index of entity.get(VertexIndices)!.data) {\r\n                    vertexIndices.push(offset + index)\r\n                }\r\n                cameraIndices.push(...entity.get(CameraIndices)!.data)\r\n            }\r\n        }\r\n    }\r\n    if (vertices.length == 0) return\r\n    renderer.draw({ vertices, colors, textureCoordinates, vertexIndices, cameraIndices })\r\n}\r\n\r\nconst renderLines = (renderer: Renderer, layers: Layers) => {\r\n    const { gl } = renderer\r\n    let vertices: number[] = []\r\n    let colors: number[] = []\r\n    let textureCoordinates: number[] = []\r\n    let cameraIndices: number[] = []\r\n    gl.bindTexture(gl.TEXTURE_2D, renderer.textures[0])\r\n    for (const entity of layers.lines) {\r\n        vertices.push(...entity.get(Vertices)!.data)\r\n        colors.push(...entity.get(Colors)!.data)\r\n        textureCoordinates.push(...entity.get(TextureCoordinates)!.data)\r\n        cameraIndices.push(...entity.get(CameraIndices)!.data)\r\n    }\r\n    if (vertices.length == 0) return\r\n    renderer.drawLines({ vertices, colors, textureCoordinates, cameraIndices })\r\n}\r\n\r\nexport const render = (ecs: ECS) => {\r\n    layout(ecs)\r\n    const layers = geometry(ecs)\r\n    const renderer = ecs.get(Renderer)!\r\n    const projection = Mat3.projection(renderer.width, renderer.height)\r\n    renderer.setMatrices(layers.cameras.map(camera => projection.matMul(camera.inverse())))\r\n    renderer.clear()\r\n    renderTriangles(renderer, layers)\r\n    renderLines(renderer, layers)\r\n    ecs.set(layers)\r\n}","import { Constraints, Layout, UIRoot } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nexport const layout = (ecs: ECS) => {\r\n    const { width, height } = ecs.get(Renderer)!\r\n    const ui = ecs.get(UIRoot)!.entity\r\n    const constraints = new Constraints(0, width, 0, height)\r\n    ui.get(Layout)!.layout(ui, constraints)\r\n}","import { Entity } from \"./ecs\";\r\nimport { Mat3 } from \"./linear_algebra\";\r\n\r\ninterface Data {\r\n    z: number\r\n    texture: number\r\n    entity: Entity\r\n}\r\n\r\nexport class Layers {\r\n    layers: Map<number, Entity[]>[]\r\n    lines: Entity[]\r\n    cameras: Mat3[]\r\n    activeCamera: number\r\n\r\n    constructor() {\r\n        this.layers = []\r\n        this.lines = []\r\n        this.cameras = [Mat3.identity()]\r\n        this.activeCamera = 0\r\n    }\r\n\r\n    pushAndSetActiveCamera = (camera: Mat3) => {\r\n        this.activeCamera = this.cameras.length\r\n        this.cameras.push(camera)\r\n    }\r\n\r\n    push = ({ z, texture, entity }: Data): void => {\r\n        for (let i = this.layers.length; i < z + 1; ++i) {\r\n            this.layers.push(new Map())\r\n        }\r\n        const layer = this.layers[z]\r\n        const entities = layer.get(texture)\r\n        if (entities) {\r\n            entities.push(entity)\r\n            return\r\n        }\r\n        layer.set(texture, [entity])\r\n    }\r\n}","import { UIRoot, Geometry, Offset } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nexport const geometry = (ecs: ECS): Layers => {\r\n    const layers = new Layers()\r\n    const ui = ecs.get(UIRoot)!.entity\r\n    ui.get(Geometry)!.geometry(ui, new Offset(0, 0), layers, 0)\r\n    return layers\r\n}","import { WorldSpace } from \"../components\"\r\nimport { ECS, Entity } from \"../ecs\"\r\nimport { Layers } from \"../layers\"\r\nimport { Mat3, Vec3 } from \"../linear_algebra\"\r\n\r\nexport function* rayCast(ecs: ECS, camera: Mat3, vec: Vec3): Generator<Entity> {\r\n    const [mx, my, _] = camera.vecMul(vec).data\r\n    for (const layer of ecs.get(Layers)!.layers.reverse()) {\r\n        for (const entities of layer.values()) {\r\n            for (const entity of entities) {\r\n                const { x, y, width, height } = entity.get(WorldSpace)!\r\n                if (mx > x && mx < x + width && my > y && my < y + height) {\r\n                    yield entity\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { Camera, Dragging, OnClick, Pointers, Transform } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Vec3 } from \"../linear_algebra\";\r\nimport { rayCast } from \"./ray_cast\";\r\nimport { render } from \"./render\";\r\n\r\nexport const pointerDown = (ecs: ECS) => {\r\n    document.addEventListener('pointerdown', (e) => {\r\n        const length = ecs.update(Pointers, pointers => {\r\n            pointers.events.push(e)\r\n            return pointers.events.length\r\n        })\r\n        if (length != 1) return\r\n        const camera = ecs.get(Camera)!.entity\r\n        const cameraMatrix = camera.get(Transform)!.matrix\r\n        const mouse = new Vec3([e.clientX, e.clientY, 1])\r\n        for (const entity of rayCast(ecs, cameraMatrix, mouse)) {\r\n            const onClick = entity.get(OnClick)\r\n            if (onClick) {\r\n                onClick.callback(entity)\r\n                requestAnimationFrame(() => render(ecs))\r\n                return\r\n            }\r\n        }\r\n        ecs.update(Dragging, dragging => dragging.value = true)\r\n    })\r\n}","import { Camera, DraggedEntity, Dragging, OnDrag, PointerDistance, Pointers, Transform } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { Mat3, Vec3 } from \"../linear_algebra\";\r\nimport { rayCast } from \"./ray_cast\";\r\nimport { render } from \"./render\";\r\n\r\nconst dragging = (ecs: ECS, e: PointerEvent) => {\r\n    const camera = ecs.get(Camera)!.entity\r\n    const draggedEntity = ecs.get(DraggedEntity)!.entity\r\n    if (draggedEntity) {\r\n        const onDrag = draggedEntity.get(OnDrag)!.callback\r\n        onDrag(draggedEntity, e.movementX, e.movementY)\r\n        requestAnimationFrame(() => render(ecs))\r\n        return\r\n    }\r\n    const cameraMatrix = camera.get(Transform)!.matrix\r\n    const mouse = new Vec3([e.clientX, e.clientY, 1])\r\n    for (const entity of rayCast(ecs, cameraMatrix, mouse)) {\r\n        const onDrag = entity.get(OnDrag)\r\n        if (onDrag) {\r\n            ecs.update(DraggedEntity, dragged => dragged.entity = entity)\r\n            onDrag.callback(entity, e.movementX, e.movementY)\r\n            requestAnimationFrame(() => render(ecs))\r\n            return\r\n        }\r\n    }\r\n    camera.update(Transform, transform => {\r\n        const translate = Mat3.translation(-e.movementX, -e.movementY)\r\n        transform.matrix = transform.matrix.matMul(translate)\r\n    })\r\n    requestAnimationFrame(() => render(ecs))\r\n}\r\n\r\nconst zoomCamera = (ecs: ECS, pointers: PointerEvent[], e: PointerEvent) => {\r\n    const [x1, y1] = [pointers[0].clientX, pointers[0].clientY]\r\n    const [x2, y2] = [pointers[1].clientX, pointers[1].clientY]\r\n    const distance = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n    const pointerDistance = ecs.get(PointerDistance)!.value\r\n    if (pointerDistance > 0) {\r\n        const move = Mat3.translation(e.clientX, e.clientY)\r\n        const zoom = Math.pow(2, (pointerDistance - distance) * 0.01)\r\n        const scale = Mat3.scaling(zoom, zoom)\r\n        const moveBack = Mat3.translation(-e.clientX, -e.clientY)\r\n        const result = move.matMul(scale).matMul(moveBack)\r\n        const camera = ecs.get(Camera)!.entity\r\n        camera.update(Transform, transform =>\r\n            transform.matrix = transform.matrix.matMul(result)\r\n        )\r\n    }\r\n    ecs.update(PointerDistance, d => d.value = distance)\r\n    requestAnimationFrame(() => render(ecs))\r\n}\r\n\r\nexport const pointerMove = (ecs: ECS) => {\r\n    document.addEventListener('pointermove', (e) => {\r\n        const pointers = ecs.get(Pointers)!.events\r\n        pointers[pointers.findIndex(p => p.pointerId == e.pointerId)] = e\r\n        if (ecs.get(Dragging)!.value && pointers.length == 1) {\r\n            dragging(ecs, e)\r\n        } else if (pointers.length == 2) {\r\n            zoomCamera(ecs, pointers, e)\r\n        }\r\n    })\r\n}","import { DraggedEntity, Dragging, PointerDistance, Pointers } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\n\r\nexport const pointerUp = (ecs: ECS) => {\r\n    document.addEventListener('pointerup', (e) => {\r\n        const length = ecs.update(Pointers, pointers => {\r\n            pointers.events.splice(pointers.events.findIndex(p => p.pointerId == e.pointerId), 1)\r\n            return pointers.events.length\r\n        })\r\n        if (length != 0) return\r\n        ecs.update(Dragging, dragging => dragging.value = false)\r\n        ecs.update(PointerDistance, distance => distance.value = 0)\r\n        ecs.update(DraggedEntity, dragged => dragged.entity = null)\r\n    })\r\n}","import { DraggedEntity, Dragging, PointerDistance, Pointers } from \"../components\";\r\nimport { ECS } from \"../ecs\";\r\nimport { pointerDown } from \"./pointerDown\";\r\nimport { pointerMove } from \"./pointerMove\";\r\nimport { pointerUp } from \"./pointerUp\";\r\n\r\nexport const init = (ecs: ECS) => {\r\n    ecs.set(\r\n        new Pointers([]),\r\n        new PointerDistance(0),\r\n        new Dragging(false),\r\n        new DraggedEntity(null)\r\n    )\r\n    pointerDown(ecs)\r\n    pointerMove(ecs)\r\n    pointerUp(ecs)\r\n}","import {\r\n    Layout,\r\n    Text,\r\n    FontSize,\r\n    FontFamily,\r\n    Constraints,\r\n    Color,\r\n    Offset,\r\n    Geometry,\r\n    Size,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    Hsla,\r\n    WorldSpace,\r\n    CameraIndices\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { Renderer } from \"../renderer\";\r\n\r\nconst textSize = (renderer: Renderer, entity: Entity) => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let size = new Size(0, 0)\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        size.width += metric.width\r\n        size.height = Math.max(metric.height, size.height)\r\n    }\r\n    return size\r\n}\r\n\r\nconst textGeometry = (renderer: Renderer, entity: Entity, offset: Offset, layers: Layers): number => {\r\n    const text = entity.get(Text)!.value\r\n    const fontSize = entity.get(FontSize)!.value\r\n    const fontFamily = entity.get(FontFamily)!.value\r\n    const { h, s, l, a } = entity.get(Color)!\r\n    const atlas = renderer.fontAtlas(fontFamily, fontSize)\r\n    let x = 0\r\n    let indexOffset = 0\r\n    const vertices: number[] = []\r\n    const textureCoordinates: number[] = []\r\n    const colors: number[] = []\r\n    const indices: number[] = []\r\n    for (const c of text) {\r\n        const metric = atlas.metric(c)\r\n        const x0 = offset.x + x\r\n        const x1 = x0 + metric.width\r\n        const y0 = offset.y\r\n        const y1 = y0 + metric.height\r\n        vertices.push(\r\n            x0, y0,\r\n            x0, y1,\r\n            x1, y0,\r\n            x1, y1,\r\n        )\r\n        textureCoordinates.push(\r\n            metric.x, metric.y,\r\n            metric.x, metric.y + metric.height,\r\n            metric.x + metric.width, metric.y,\r\n            metric.x + metric.width, metric.y + metric.height,\r\n        )\r\n        colors.push(\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n            h, s, l, a,\r\n        )\r\n        indices.push(\r\n            indexOffset + 0, indexOffset + 1, indexOffset + 2,\r\n            indexOffset + 1, indexOffset + 2, indexOffset + 3,\r\n        )\r\n        x += metric.width\r\n        indexOffset += 4\r\n    }\r\n    entity.set(\r\n        new Vertices(vertices),\r\n        new TextureCoordinates(textureCoordinates),\r\n        new Colors(colors),\r\n        new VertexIndices(indices),\r\n        new CameraIndices(Array(indexOffset).fill(layers.activeCamera))\r\n    )\r\n    return atlas.texture\r\n}\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const size = textSize(self.ecs.get(Renderer)!, self)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const texture = textGeometry(self.ecs.get(Renderer)!, self, offset, layers)\r\n    layers.push({ z, entity: self, texture })\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    fontSize?: number\r\n    fontFamily?: number\r\n    color?: Hsla\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, data: string): Entity\r\n    (ecs: ECS, properties: Properties, data: string): Entity\r\n}\r\n\r\nexport const text: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, data] = (() => {\r\n        if (typeof args[0] === 'string') return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Text(data),\r\n        new FontSize(properties.fontSize ?? 24),\r\n        new FontFamily(properties.fontFamily ?? \"monospace\"),\r\n        new Color(properties.color ?? { h: 0, s: 1, l: 1, a: 1 }),\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const child = self.get(Child)!.entity\r\n    const childSize = child.get(Layout)!.layout(child, constraints)\r\n    child.update(Offset, offset => {\r\n        offset.x = constraints.maxWidth / 2 - childSize.width / 2\r\n        offset.y = constraints.maxHeight / 2 - childSize.height / 2\r\n    })\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const child = self.get(Child)!.entity\r\n    child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\nexport const center = (ecs: ECS, child: Entity) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Child(child)\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.y = height)\r\n        height += size.height\r\n        width = Math.max(width, size.width)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width / 2 - childWidth / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childWidth = child.get(Size)!.width\r\n                child.update(Offset, offset => offset.x = width - childWidth)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const column: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Alignment,\r\n    CrossAxisAlignment,\r\n    WorldSpace,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    let width = 0\r\n    let height = 0\r\n    const children = self.get(Children)!.entities\r\n    for (const child of children) {\r\n        const size = child.get(Layout)!.layout(child, constraints)\r\n        child.update(Offset, offset => offset.x = width)\r\n        width += size.width\r\n        height = Math.max(height, size.height)\r\n    }\r\n    switch (self.get(CrossAxisAlignment)!.alignment) {\r\n        case Alignment.START:\r\n            break\r\n        case Alignment.CENTER:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height / 2 - childHeight / 2)\r\n            }\r\n            break\r\n        case Alignment.END:\r\n            for (const child of children) {\r\n                const childHeight = child.get(Size)!.height\r\n                child.update(Offset, offset => offset.y = height - childHeight)\r\n            }\r\n            break\r\n    }\r\n    const size = new Size(width, height)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    crossAxisAlignment?: Alignment\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, children: Entity[]): Entity\r\n    (ecs: ECS, properties: Properties, children: Entity[]): Entity\r\n}\r\n\r\nexport const row: Overload = (ecs: ECS, ...args: any[]): Entity => {\r\n    const [properties, children] = (() => {\r\n        if (args[0] instanceof Array) return [{}, args[0]]\r\n        return [args[0], args[1]]\r\n    })()\r\n    return ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(children),\r\n        new CrossAxisAlignment(properties.crossAxisAlignment ?? Alignment.START)\r\n    )\r\n}","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Child,\r\n    Offset,\r\n    Hsla,\r\n    Color,\r\n    Vertices,\r\n    TextureCoordinates,\r\n    Colors,\r\n    VertexIndices,\r\n    Padding,\r\n    Width,\r\n    Height,\r\n    WorldSpace,\r\n    Translate,\r\n    CameraIndices,\r\n    OnDragCallback,\r\n    OnClickCallback,\r\n    OnClick,\r\n    OnDrag\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst clamp = (value: number, min: number, max: number): number =>\r\n    Math.max(Math.min(value, max), min)\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    const padding = self.get(Padding)!.value\r\n    const child = self.get(Child)\r\n    const { x, y } = self.get(Translate)!\r\n    const offset = new Offset(x, y)\r\n    if (child) {\r\n        const childSize = child.entity.get(Layout)!.layout(child.entity, constraints)\r\n        const size = new Size(\r\n            Math.min(constraints.maxWidth, childSize.width + 2 * padding),\r\n            Math.min(constraints.maxHeight, childSize.height + 2 * padding),\r\n        )\r\n        child.entity.update(Offset, offset => {\r\n            offset.x = padding\r\n            offset.y = padding\r\n        })\r\n        self.set(constraints, size, offset)\r\n        return size\r\n    }\r\n    const size = new Size(\r\n        clamp(self.get(Width)!.value, constraints.minWidth, constraints.maxWidth),\r\n        clamp(self.get(Height)!.value, constraints.minHeight, constraints.maxHeight),\r\n    )\r\n    self.set(constraints, size, offset)\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    const { width, height } = self.get(Size)!\r\n    const x0 = offset.x\r\n    const x1 = x0 + width\r\n    const y0 = offset.y\r\n    const y1 = y0 + height\r\n    const color = self.get(Color)\r\n    if (color) {\r\n        const { h, s, l, a } = color\r\n        self.set(\r\n            new Vertices([\r\n                x0, y0,\r\n                x0, y1,\r\n                x1, y0,\r\n                x1, y1,\r\n            ]),\r\n            new TextureCoordinates([\r\n                0, 0,\r\n                0, 0,\r\n                0, 0,\r\n                0, 0,\r\n            ]),\r\n            new Colors([\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n                h, s, l, a,\r\n            ]),\r\n            new VertexIndices([\r\n                0, 1, 2,\r\n                1, 2, 3,\r\n            ]),\r\n            new CameraIndices(Array(4).fill(layers.activeCamera))\r\n        )\r\n        layers.push({ z, texture: 0, entity: self })\r\n    }\r\n    const child = self.get(Child)\r\n    if (child) {\r\n        child.entity.get(Geometry)!.geometry(child.entity, offset, layers, z + 1)\r\n    }\r\n    self.set(new WorldSpace(x0, y0, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    color?: Hsla\r\n    padding?: number\r\n    width?: number\r\n    height?: number\r\n    x?: number\r\n    y?: number\r\n    onDrag?: OnDragCallback\r\n    onClick?: OnClickCallback\r\n}\r\n\r\ntype Overload = {\r\n    (ecs: ECS, properties: Properties): Entity\r\n    (ecs: ECS, properties: Properties, child: Entity): Entity\r\n}\r\n\r\nexport const container: Overload = (ecs: ECS, properties: Properties, child?: Entity) => {\r\n    const entity = ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Padding(properties.padding ?? 0),\r\n        new Width(properties.width ?? 0),\r\n        new Height(properties.height ?? 0),\r\n        new Translate(properties.x ?? 0, properties.y ?? 0)\r\n    )\r\n    if (properties.color) entity.set(new Color(properties.color))\r\n    if (child) entity.set(new Child(child))\r\n    if (properties.onDrag) entity.set(new OnDrag(properties.onDrag))\r\n    if (properties.onClick) entity.set(new OnClick(properties.onClick))\r\n    return entity\r\n}","import { CameraIndices, Color, Colors, From, Hsla, TextureCoordinates, To, Vertices, WorldSpace } from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\n\r\nconst linspace = (start: number, stop: number, num: number): number[] => {\r\n    const step = (stop - start) / (num - 1)\r\n    return Array.from({ length: num }, (_, i) => start + step * i)\r\n}\r\n\r\nconst cubicBezier = (ts: number[], from: WorldSpace, to: WorldSpace): number[] => {\r\n    const p0x = from.x + from.width / 2\r\n    const p0y = from.y + from.height / 2\r\n    const p1x = p0x + 50\r\n    const p1y = p0y\r\n    const p3x = to.x + to.width / 2\r\n    const p3y = to.y + to.height / 2\r\n    const p2x = p3x - 50\r\n    const p2y = p3y\r\n    const result: number[] = []\r\n    let lastX = 0\r\n    let lastY = 0\r\n    for (const t of ts) {\r\n        const tSquared = t * t\r\n        const tCubed = tSquared * t\r\n        const oneMinusT = 1 - t\r\n        const oneMinusTSquared = oneMinusT * oneMinusT\r\n        const oneMinusTCubed = oneMinusTSquared * oneMinusT\r\n        const a = oneMinusTCubed\r\n        const b = 3 * oneMinusTSquared * t\r\n        const c = 3 * oneMinusT * tSquared\r\n        const d = tCubed\r\n        const x = a * p0x + b * p1x + c * p2x + d * p3x\r\n        const y = a * p0y + b * p1y + c * p2y + d * p3y\r\n        if (result.length) result.push(lastX, lastY)\r\n        else result.push(x, y)\r\n        result.push(x, y)\r\n        lastX = x\r\n        lastY = y\r\n    }\r\n    return result\r\n}\r\n\r\nexport const geometry = (connections: Entity[], layers: Layers) => {\r\n    const samples = 20\r\n    const ts = linspace(0, 1, samples)\r\n    const textureCoordinates = Array(samples * 4).fill(0)\r\n    for (const entity of connections) {\r\n        const from = entity.get(From)!.entity.get(WorldSpace)!\r\n        const to = entity.get(To)!.entity.get(WorldSpace)!\r\n        const vertices = cubicBezier(ts, from, to)\r\n        const { h, s, l, a } = entity.get(Color)!\r\n        const colors: number[] = []\r\n        for (let i = 0; i < samples * 2; ++i) colors.push(h, s, l, a)\r\n        entity.set(\r\n            new Vertices(vertices),\r\n            new TextureCoordinates(textureCoordinates),\r\n            new Colors(colors),\r\n            new CameraIndices(Array(vertices.length / 2).fill(layers.activeCamera))\r\n        )\r\n        layers.lines.push(entity)\r\n    }\r\n}\r\n\r\ninterface Properties {\r\n    from: Entity\r\n    to: Entity\r\n    color?: Hsla\r\n}\r\n\r\nexport const connection = (ecs: ECS, properties: Properties): Entity =>\r\n    ecs.entity(\r\n        new From(properties.from),\r\n        new To(properties.to),\r\n        new Color(properties.color ?? { h: 0, s: 1, l: 1, a: 1 }),\r\n    )","import {\r\n    Layout,\r\n    Constraints,\r\n    Geometry,\r\n    Size,\r\n    Offset,\r\n    Children,\r\n    Connections,\r\n    WorldSpace,\r\n    Camera,\r\n    Transform,\r\n} from \"../components\";\r\nimport { ECS, Entity } from \"../ecs\";\r\nimport { Layers } from \"../layers\";\r\nimport { geometry as connectionGeometry } from './connection'\r\n\r\nconst layout = (self: Entity, constraints: Constraints) => {\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Layout)!.layout(child, constraints)\r\n    }\r\n    const size = new Size(constraints.maxWidth, constraints.maxHeight)\r\n    self.set(constraints, size, new Offset(0, 0))\r\n    return size\r\n}\r\n\r\nconst geometry = (self: Entity, parentOffset: Offset, layers: Layers, z: number) => {\r\n    const camera = self.ecs.get(Camera)!.entity.get(Transform)!.matrix\r\n    layers.pushAndSetActiveCamera(camera)\r\n    const { width, height } = self.get(Size)!\r\n    const offset = parentOffset.add(self.get(Offset)!)\r\n    for (const child of self.get(Children)!.entities) {\r\n        child.get(Geometry)!.geometry(child, offset, layers, z)\r\n    }\r\n    connectionGeometry(self.get(Connections)!.entities, layers)\r\n    self.set(new WorldSpace(offset.x, offset.y, width, height))\r\n}\r\n\r\ninterface Properties {\r\n    children: Entity[],\r\n    connections: Entity[],\r\n}\r\n\r\nexport const scene = (ecs: ECS, properties: Properties) =>\r\n    ecs.entity(\r\n        new Layout(layout),\r\n        new Geometry(geometry),\r\n        new Children(properties.children),\r\n        new Connections(properties.connections),\r\n    )","type Component<T> = { new(...args: any[]): T }\r\n\r\nclass Storage<T> {\r\n  lookup: Map<number, number>\r\n  data: T[]\r\n  inverses: number[]\r\n\r\n  constructor() {\r\n    this.clear()\r\n  }\r\n\r\n  get = (entity: Entity): T | undefined => {\r\n    const index = this.lookup.get(entity.id)\r\n    return index != undefined ? this.data[index] : undefined\r\n  }\r\n\r\n  hasId = (id: number): boolean => {\r\n    return this.lookup.has(id)\r\n  }\r\n\r\n  set = (entity: Entity, component: T): void => {\r\n    const index = this.lookup.get(entity.id)\r\n    if (index) {\r\n      this.data[index] = component\r\n      this.inverses[index] = entity.id\r\n      return\r\n    }\r\n    this.lookup.set(entity.id, this.data.length)\r\n    this.data.push(component)\r\n    this.inverses.push(entity.id)\r\n  }\r\n\r\n  clear = (): void => {\r\n    this.lookup = new Map()\r\n    this.data = []\r\n    this.inverses = []\r\n  }\r\n}\r\n\r\nexport class Entity {\r\n  constructor(public id: number, public ecs: ECS) { }\r\n\r\n  set = (...components: any): Entity => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      let storage = this.ecs.storages.get(Type)\r\n      if (!storage) {\r\n        storage = new Storage()\r\n        this.ecs.storages.set(Type, storage)\r\n      }\r\n      storage.set(this, component)\r\n    }\r\n    return this\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): Readonly<T> | undefined => {\r\n    const storage = this.ecs.storages.get(Type)\r\n    return storage ? storage.get(this) : undefined\r\n  }\r\n\r\n  update = <T, U>(Type: Component<T>, f: (_: T) => U): U =>\r\n    f(this.ecs.storages.get(Type)!.get(this)!)\r\n}\r\n\r\nexport class ECS {\r\n  nextEntityId: number\r\n  storages: Map<Component<any>, Storage<any>>\r\n  resources: Map<Component<any>, any>\r\n\r\n  constructor() {\r\n    this.nextEntityId = 0\r\n    this.storages = new Map()\r\n    this.resources = new Map()\r\n  }\r\n\r\n  entity = (...components: any): Entity => {\r\n    const entity = new Entity(this.nextEntityId, this)\r\n    entity.set(...components)\r\n    ++this.nextEntityId\r\n    return entity\r\n  }\r\n\r\n  query = function* (...components: any): Generator<Entity> {\r\n    const primary = this.storages.get(components[0])\r\n    if (!primary) return\r\n    const secondary = components.slice(1).map(s => this.storages.get(s))\r\n    for (const id of primary.inverses) {\r\n      if (secondary.every(storage => storage.hasId(id))) {\r\n        yield new Entity(id, this)\r\n      }\r\n    }\r\n  }\r\n\r\n  set = <T>(...components: any): void => {\r\n    for (const component of components) {\r\n      const Type = component.constructor\r\n      this.resources.set(Type, component)\r\n    }\r\n  }\r\n\r\n  get = <T>(Type: Component<T>): T | undefined => {\r\n    return this.resources.get(Type)\r\n  }\r\n\r\n  update = <T, U>(Type: Component<T>, f: (_: T) => U): U =>\r\n    f(this.resources.get(Type)!)\r\n\r\n  unsetAll = <T>(Type: Component<T>): void => {\r\n    const storage = this.storages.get(Type)\r\n    if (!storage) return\r\n    storage.clear()\r\n  }\r\n}\r\n","import { Camera, Color, Connections, Hsla, OnClick, OnDrag, Translate } from './components'\r\nimport { Mat3, Vec3 } from './linear_algebra'\r\nimport * as Studio from './studio'\r\nimport { Entity } from './studio'\r\nconst { ECS, Renderer } = Studio\r\nconst { UIRoot, Alignment, Transform } = Studio.components\r\nconst { text, column, row, container, scene, connection } = Studio.ui\r\nconst { render, init } = Studio.systems\r\n\r\nconst ecs = new ECS()\r\nconst renderer = new Renderer(window.innerWidth, window.innerHeight)\r\nrenderer.canvas.style.width = '100%'\r\nrenderer.canvas.style.height = '100%'\r\n\r\nconst dragSelf = (entity: Entity, x: number, y: number) =>\r\n    entity.update(Translate, translate => {\r\n        translate.x += x\r\n        translate.y += y\r\n    })\r\n\r\n\r\nlet connectionFrom: Entity | null = null\r\nlet connectionTo: Entity | null = null\r\n\r\n\r\nconst clickOutput = (entity: Entity) => {\r\n    if (!connectionTo) {\r\n        if (connectionFrom == entity) return\r\n        else if (connectionFrom != null) connectionFrom.update(Color, color => color.h -= 30)\r\n        connectionFrom = entity\r\n        entity.update(Color, color => color.h += 30)\r\n        requestAnimationFrame(() => render(ecs))\r\n    } else {\r\n        const con = connection(ecs, { from: entity, to: connectionTo })\r\n        root.update(Connections, connections =>\r\n            connections.entities.push(con)\r\n        )\r\n        connectionTo.update(Color, color => color.h -= 30)\r\n        connectionTo = null\r\n        requestAnimationFrame(() => render(ecs))\r\n    }\r\n}\r\n\r\nconst clickInput = (entity: Entity) => {\r\n    if (!connectionFrom) {\r\n        if (connectionTo == entity) return\r\n        else if (connectionTo != null) connectionTo.update(Color, color => color.h -= 30)\r\n        connectionTo = entity\r\n        entity.update(Color, color => color.h += 30)\r\n        requestAnimationFrame(() => render(ecs))\r\n\r\n    } else {\r\n        const con = connection(ecs, { from: connectionFrom, to: entity })\r\n        root.update(Connections, connections =>\r\n            connections.entities.push(con)\r\n        )\r\n        connectionFrom.update(Color, color => color.h -= 30)\r\n        connectionFrom = null\r\n        requestAnimationFrame(() => render(ecs))\r\n    }\r\n}\r\n\r\n\r\nconst inputs = (n: number, color: Hsla): Entity =>\r\n    column(ecs, Array.from({ length: n }, (_, i) =>\r\n        row(ecs, [\r\n            container(ecs, { width: 18, height: 18, color, onClick: clickInput }),\r\n            container(ecs, { width: 5 }),\r\n            container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, `in ${i}`)),\r\n        ]),\r\n    ))\r\n\r\n\r\nconst outputs = (n: number, color: Hsla): Entity =>\r\n    column(ecs, { crossAxisAlignment: Alignment.END }, Array.from({ length: n }, (_, i) =>\r\n        row(ecs, [\r\n            container(ecs, { padding: 2 }, text(ecs, { fontSize: 18 }, `out ${i}`)),\r\n            container(ecs, { width: 5 }),\r\n            container(ecs, { width: 18, height: 18, color, onClick: clickOutput })\r\n        ]),\r\n    ))\r\n\r\n\r\nconst source = container(ecs, { color: { h: 110, s: 1, l: 0.3, a: 1 }, padding: 10, x: 25, y: 200, onDrag: dragSelf },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Source\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            inputs(3, { h: 70, s: 1, l: 0.7, a: 1 }),\r\n            container(ecs, { width: 30 }),\r\n            outputs(2, { h: 70, s: 1, l: 0.7, a: 1 }),\r\n        ])\r\n    ])\r\n)\r\n\r\nconst transform = container(ecs, { color: { h: 210, s: 1, l: 0.3, a: 1 }, padding: 10, x: 300, y: 100, onDrag: dragSelf },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Transform\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            inputs(2, { h: 170, s: 1, l: 0.7, a: 1 }),\r\n            container(ecs, { width: 30 }),\r\n            outputs(4, { h: 170, s: 1, l: 0.7, a: 1 }),\r\n        ])\r\n    ])\r\n)\r\n\r\nconst sink = container(ecs, { color: { h: 310, s: 1, l: 0.3, a: 1 }, padding: 10, x: 550, y: 250, onDrag: dragSelf },\r\n    column(ecs, { crossAxisAlignment: Alignment.CENTER }, [\r\n        container(ecs, { padding: 5 }, text(ecs, \"Sink\")),\r\n        container(ecs, { height: 10 }),\r\n        row(ecs, [\r\n            inputs(3, { h: 270, s: 1, l: 0.7, a: 1 }),\r\n            container(ecs, { width: 30 }),\r\n            outputs(3, { h: 270, s: 1, l: 0.7, a: 1 })\r\n        ])\r\n    ])\r\n)\r\n\r\nconst camera = ecs.entity(new Transform(Mat3.identity()),)\r\n\r\nconst root = scene(ecs, {\r\n    children: [source, transform, sink],\r\n    connections: []\r\n})\r\n\r\necs.set(renderer, new UIRoot(root), new Camera(camera))\r\n\r\ninit(ecs)\r\n\r\nrequestAnimationFrame(() => render(ecs))\r\n\r\nwindow.addEventListener('resize', () => {\r\n    renderer.setSize(renderer.canvas.clientWidth, renderer.canvas.clientHeight)\r\n    requestAnimationFrame(() => render(ecs))\r\n})\r\n\r\ndocument.body.appendChild(renderer.canvas)\r\n\r\ndocument.addEventListener('touchend', () => {\r\n    renderer.canvas.requestFullscreen()\r\n})\r\n\r\ndocument.addEventListener('wheel', (e) => {\r\n    e.preventDefault()\r\n    camera.update(Transform, transform => {\r\n        const move = Mat3.translation(e.clientX, e.clientY)\r\n        const zoom = Math.pow(2, e.deltaY * 0.01)\r\n        const scale = Mat3.scaling(zoom, zoom)\r\n        const moveBack = Mat3.translation(-e.clientX, -e.clientY)\r\n        const result = move.matMul(scale).matMul(moveBack)\r\n        transform.matrix = transform.matrix.matMul(result)\r\n    })\r\n    requestAnimationFrame(() => render(ecs))\r\n}, { passive: false })\r\n"],"names":["$b28c6149dbdf1c74$export$63548ce3f438e2c4","constructor","entity","$b28c6149dbdf1c74$export$5f1af8db9871e1d6","value","$b28c6149dbdf1c74$export$80f2abd03de5ca5a","$b28c6149dbdf1c74$export$cd0608c167c7849e","$b28c6149dbdf1c74$export$3edfc50f178e5b0b","$b28c6149dbdf1c74$export$dca3b0875bd9a954","entities","$b28c6149dbdf1c74$export$f3ea0776119f0e84","$b28c6149dbdf1c74$export$79f141de891a5fed","$b28c6149dbdf1c74$export$9d7927214ed7d2cf","Alignment1","$b28c6149dbdf1c74$export$66a3248d846611ce","alignment","$b28c6149dbdf1c74$export$8ee255758437644c","$b28c6149dbdf1c74$export$8954cfac7c08d16a","$b28c6149dbdf1c74$export$9db2ba50894db2b9","x","y","$b28c6149dbdf1c74$export$563a914cafbdc389","matrix","$b28c6149dbdf1c74$export$65cfd44a2050f99","scale","$b28c6149dbdf1c74$export$678de176a9a9dea","$b28c6149dbdf1c74$export$d10b08d1cf690764","$b28c6149dbdf1c74$export$892596cec99bc70e","h","s","l","a","this","$b28c6149dbdf1c74$export$8ee6ea94b5aedb49","$b28c6149dbdf1c74$export$6e8e053b4dff75fa","minWidth","maxWidth","minHeight","maxHeight","$b28c6149dbdf1c74$export$cb6da89c6af1a8ec","width","height","$b28c6149dbdf1c74$export$8caee09accd95d7f","add","other","$b28c6149dbdf1c74$export$c84671f46d6a1ca","impl","layout","self","constraints","$b28c6149dbdf1c74$export$77f0fd777d3cc7db","$b28c6149dbdf1c74$export$92bffd8adab203ca","data","$b28c6149dbdf1c74$export$535dd6b7931a007","$b28c6149dbdf1c74$export$c537fa0d021d010b","$b28c6149dbdf1c74$export$fc4f2b7e7f87722c","$b28c6149dbdf1c74$export$39d3d935cf79db44","$b28c6149dbdf1c74$export$2db6c17465f94a2","geometry","parentOffset","layers","z","$b28c6149dbdf1c74$export$b11ff02aa7665438","callback","$b28c6149dbdf1c74$export$35ee2f917ebd5998","$b28c6149dbdf1c74$export$6412482d5070c3e5","events","$b28c6149dbdf1c74$export$713e7dce70432f26","$b28c6149dbdf1c74$export$d06c063800545f6e","$b28c6149dbdf1c74$export$b04da8f7c31a5074","$a26733d1baff63db$export$838423f3adec30fa","$a26733d1baff63db$export$83f4edd572c84121","matMul","b","a11","a12","a13","a21","a22","a23","a31","a32","a33","b11","b12","b13","b21","b22","b23","b31","b32","b33","vecMul","b1","b2","b3","inverse","idet","static","radians","c","Math","cos","sin","$621f3774f67738fc$var$DefaultProgram","gl","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","log","getShaderInfoLog","vertexArrayObject","createVertexArray","bindVertexArray","positionBuffer","createBuffer","bindAttribLocation","enableVertexAttribArray","bindBuffer","ARRAY_BUFFER","vertexAttribPointer","FLOAT","textureCoordinatesBuffer","colorBuffer","matrixIndexBuffer","vertexAttribIPointer","UNSIGNED_BYTE","indexBuffer","devicePixelRatioLocation","getUniformLocation","matricesLocation","texture","metrics","fontFamily","fontSize","metric","charCodeAt","$621f3774f67738fc$var$createFontMetrics","font","canvas","document","createElement","ctx","getContext","rows","sqrt","size","current","$621f3774f67738fc$var$nearestPowerOfTwo","cellSize","window","devicePixelRatio","style","textAlign","textBaseline","fillStyle","chars","Array","from","length","v","i","map","String","fromCharCode","clearRect","measureText","ceil","floor","fillText","TEXTURE_2D","RGBA","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","touchAction","clearColor","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","depthMask","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","activeTexture","TEXTURE0","fontAtlasses","Map","textures","setSize","createTexture","bindTexture","texImage2D","Uint8Array","push","uniform2f","resolutionLocation","uniform1f","viewport","recreateFontAtlasses","COLOR_BUFFER_BIT","matrices","uniformMatrix3fv","vertices","colors","textureCoordinates","vertexIndices","cameraIndices","bufferData","Float32Array","STATIC_DRAW","ELEMENT_ARRAY_BUFFER","Uint16Array","$9a7c059fd1344034$export$b3890eb0ae9dca99","ecs","$cb3d056828175573$export$b3219800bda33a1f","$90a5a29c0fcb75eb$export$42a7622cbf932bb","renderer","get","$621f3774f67738fc$export$88530751e3977073","projection","setMatrices","cameras","camera","clear","previousTexture","layer","draw","offset","index","$9a7c059fd1344034$var$renderTriangles","lines","drawLines","$9a7c059fd1344034$var$renderLines","set","ui","$3b19fb344542138e$export$89312ce47c0ca777","identity","activeCamera","pushAndSetActiveCamera","$231f2a51c75bf33f$export$51be7442bbfe168a","vec","mx","my","_","reverse","values","$0b92ec7f88b512ef$export$e6e29dfeb5ef19c1","addEventListener","e","update","pointers","cameraMatrix","mouse","clientX","clientY","onClick","requestAnimationFrame","dragging","$f6814459cf3a656e$export$71eac0963f2c2f01","findIndex","p","pointerId","draggedEntity","onDrag","movementX","movementY","dragged","transform","translate","translation","$f6814459cf3a656e$var$dragging","x1","y1","x2","y2","distance","pow","pointerDistance","move","zoom","scaling","moveBack","result","d","$f6814459cf3a656e$var$zoomCamera","$d70a29fd47e7122e$export$b0143ab4f38d0a07","splice","$6d01f164b3d82840$export$2cd8252107eb640b","$2d5075f154be1094$var$layout","text1","atlas","fontAtlas","max","$2d5075f154be1094$var$textSize","$2d5075f154be1094$var$geometry","text2","indexOffset","indices","x0","y0","fill","$2d5075f154be1094$var$textGeometry","$2d5075f154be1094$export$6f093cfa640b7166","args","properties","color","$fd89ce3675dee463$var$layout","child","childSize","$fd89ce3675dee463$var$geometry","$fd89ce3675dee463$export$3481c78889e8fbe8","$518015a6e3cc694d$var$layout","children","START","CENTER","child1","childWidth","END","child2","$518015a6e3cc694d$var$geometry","$518015a6e3cc694d$export$4e0c71f277ca26b3","crossAxisAlignment","$9e4edab979495f0d$var$layout","childHeight","$9e4edab979495f0d$var$geometry","$9e4edab979495f0d$export$120ff0929b202a6d","$8a99d960732a172f$var$clamp","min","$8a99d960732a172f$var$layout","padding","offset1","$8a99d960732a172f$var$geometry","$8a99d960732a172f$export$34e0f9847d4c02dd","$5dee3d2e57488100$var$cubicBezier","ts","to","p0x","p0y","p1x","p1y","p3x","p3y","p2x","p2y","lastX","lastY","t","tSquared","tCubed","oneMinusT","oneMinusTSquared","oneMinusTCubed","$5dee3d2e57488100$export$42a7622cbf932bb","connections","start","stop","num","step","$5dee3d2e57488100$var$linspace","samples","$5dee3d2e57488100$export$412d2991813e589a","$864b15efd9f5e1a7$var$layout","$864b15efd9f5e1a7$var$geometry","$864b15efd9f5e1a7$export$33aff30b8aa0934e","$556f46b6ec271235$var$Storage","lookup","id","undefined","hasId","has","component","inverses","$556f46b6ec271235$export$bc644a473284d944","components","Type","storage","storages","f","$556f46b6ec271235$export$d01098d378880d3","nextEntityId","resources","query","primary","secondary","slice","every","unsetAll","ECS","$b4e14b6b8da86996$var$ECS","Renderer","$b4e14b6b8da86996$var$Renderer","$91ae824a8b26c87f$exports","UIRoot","$b4e14b6b8da86996$var$UIRoot","Alignment","$b4e14b6b8da86996$var$Alignment","Transform","$b4e14b6b8da86996$var$Transform","text","$b4e14b6b8da86996$var$text","column","$b4e14b6b8da86996$var$column","row","$b4e14b6b8da86996$var$row","container","$b4e14b6b8da86996$var$container","scene","$b4e14b6b8da86996$var$scene","connection","$b4e14b6b8da86996$var$connection","render","$b4e14b6b8da86996$var$render","init","$b4e14b6b8da86996$var$init","systems","$b4e14b6b8da86996$var$ecs","$b4e14b6b8da86996$var$renderer","innerWidth","innerHeight","$b4e14b6b8da86996$var$dragSelf","$b4e14b6b8da86996$var$connectionFrom","$b4e14b6b8da86996$var$connectionTo","$b4e14b6b8da86996$var$clickOutput","con","$b4e14b6b8da86996$var$root","$b4e14b6b8da86996$var$clickInput","$b4e14b6b8da86996$var$inputs","n","$b4e14b6b8da86996$var$outputs","$b4e14b6b8da86996$var$source","$b4e14b6b8da86996$var$transform","$b4e14b6b8da86996$var$sink","$b4e14b6b8da86996$var$camera","clientWidth","clientHeight","body","appendChild","requestFullscreen","preventDefault","transform1","deltaY","passive"],"version":3,"file":"index.b1d8394c.js.map"}